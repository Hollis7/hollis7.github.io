<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/16/README/</url>
    <content><![CDATA[<p>大家好，这是hollis7的个人博客，用于记录学习的过程与心得。</p>
]]></content>
      <categories>
        <category>欢迎</category>
      </categories>
      <tags>
        <tag>welcome</tag>
        <tag>computer</tag>
        <tag>java learner</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2024/01/16/MyBatis/MyBatis/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="MyBaits中文网"><a href="#MyBaits中文网" class="headerlink" title="MyBaits中文网"></a>MyBaits中文网</h2><p><a href="https://mybatis.net.cn/">MyBatis</a></p>
<span id="more"></span>
<h2 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h2><ul>
<li><p>数据库表（tb_user）及数据准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">	addr <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;234&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入依赖，pom.xml，粘贴logback.xml到resource文件夹下</p>
</li>
<li><p>编写mybatis-config.xml文件</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hdb2205&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编写UserMapper.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithdb.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>主程序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/71335_image-20240112095356363.png" alt="image-20240112095356363" style="zoom:50%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/49567_image-20240112095507785.png" alt="image-20240112095507785" style="zoom: 50%;" /></p>
<p><strong>刷新一下可以看到数据库的表</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/47675_image-20240112095851919.png" alt="image-20240112095851919" style="zoom: 67%;" /></p>
<p><strong>idea中使用sql语句进行查询</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/57896_image-20240112100335351.png" alt="image-20240112100335351"></p>
<h2 id="使用Mapper代理方式完成入门案例"><a href="#使用Mapper代理方式完成入门案例" class="headerlink" title="使用Mapper代理方式完成入门案例"></a>使用Mapper代理方式完成入门案例</h2><ol>
<li>定义与SQL映射文件同名的Mapperf接口，并且将Mapper接口和SQL映射文件放置在同一目录下</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/70576_image-20240112102522431.png" alt="image-20240112102522431"></p>
<p>这里一定要用<code>com/inhdb/mapper</code>创建包，而不是<code>com.inhdb.mapper</code>，否则编译后没有文件夹层次结构，只是一个<code>com.inhdb.mapper</code>文件</p>
<ol>
<li>设置SQL映射文件的namespace属性为Mapper接口全限定名</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.ithdb.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectAll&quot;</span> resultType=<span class="string">&quot;com.ithdb.pojo.User&quot;</span>&gt;</span><br><span class="line">        select *</span><br><span class="line">        from tb_user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>在Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id,并保持参数类型和返回值类型一致</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>修改mybatis-config.xml的UserMapper.xml地址</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/ithdb/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>编码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//3.1 获取UserMapper接口的代理对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectAll();</span><br></pre></td></tr></table></figure>
<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>只要遵循了<code>Mapper接口和SQL映射文件放置在同一目录下</code>（编译过后在同一目录下），就可以用包扫描的方法进行配置</p>
<p><code>mybatis-config.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;!--Mapper代理方式，识别到sql映射文件--&gt;</span><br><span class="line">   &lt;<span class="keyword">package</span> name=<span class="string">&quot;com.ithdb.mapper&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>
<h2 id="MyBatis核心配置文件"><a href="#MyBatis核心配置文件" class="headerlink" title="MyBatis核心配置文件"></a>MyBatis核心配置文件</h2><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment</p>
<h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.ithdb.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为com.ithdb.pojo目录下的实体取别名，默认小写如：user</p>
<p><code>UserMapper.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectAll&quot;</span> resultType=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">       select *</span><br><span class="line">       from tb_user;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<h2 id="增删改查环境准备"><a href="#增删改查环境准备" class="headerlink" title="增删改查环境准备"></a>增删改查环境准备</h2><p>准备tb_brand(mybatis数据库下)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除tb_brand表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_brand;</span><br><span class="line"><span class="comment">-- 创建tb_brand表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand</span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- id 主键</span></span><br><span class="line">    id           <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    <span class="comment">-- 品牌名称</span></span><br><span class="line">    brand_name   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 企业名称</span></span><br><span class="line">    company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 排序字段</span></span><br><span class="line">    ordered      <span class="type">int</span>,</span><br><span class="line">    <span class="comment">-- 描述信息</span></span><br><span class="line">    description  <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="comment">-- 状态：0：禁用  1：启用</span></span><br><span class="line">    status       <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;三只松鼠&#x27;</span>, <span class="string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;好吃不上火&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">       (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;华为技术有限公司&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;小米科技有限公司&#x27;</span>, <span class="number">50</span>, <span class="string">&#x27;are you ok&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_brand;</span><br></pre></td></tr></table></figure>
<h3 id="大小驼峰解决方案"><a href="#大小驼峰解决方案" class="headerlink" title="大小驼峰解决方案"></a>大小驼峰解决方案</h3><p>springboot有更好的方案</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查看详情"><a href="#查看详情" class="headerlink" title="查看详情"></a>查看详情</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        * 参数占位符：</span></span><br><span class="line"><span class="comment">            1. #&#123;&#125;:会将其替换为 ?，为了防止SQL注入</span></span><br><span class="line"><span class="comment">            2. $&#123;&#125;：拼sql。会存在SQL注入问题</span></span><br><span class="line"><span class="comment">            3. 使用时机：</span></span><br><span class="line"><span class="comment">                * 参数传递的时候：#&#123;&#125;</span></span><br><span class="line"><span class="comment">                * 表名或者列名不固定的情况下：$&#123;&#125; 会存在SQL注入问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * 参数类型：parameterType：可以省略</span></span><br><span class="line"><span class="comment">         * 特殊字符处理：</span></span><br><span class="line"><span class="comment">            1. 转义字符：</span></span><br><span class="line"><span class="comment">            2. CDATA区:</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="特殊字符转义"><a href="#特殊字符转义" class="headerlink" title="特殊字符转义"></a>特殊字符转义</h3><p>法一，转义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where id <span class="symbol">&amp;lt;</span> #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如&lt;对应<code>&amp;lt;</code></p>
<p>法二，CDATA</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where id</span><br><span class="line">            &lt;![CDATA[</span><br><span class="line">            &lt;</span><br><span class="line">            ]]&gt;</span><br><span class="line">            #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 条件查询</span><br><span class="line">    * * 参数接收</span><br><span class="line">    * 1. 散装参数：如果方法中有多个参数，需要使用@Param(&quot;SQL参数占位符名称&quot;)</span><br><span class="line">    * 2. 对象参数:对象的属性名称要和参数占位符名称一致</span><br><span class="line">    * 3. map集合参数</span><br><span class="line">    */</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"><span class="comment">// 处理参数</span></span><br><span class="line">companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装对象</span></span><br><span class="line"><span class="comment">//        Brand brand = new Brand();</span></span><br><span class="line"><span class="comment">//        brand.setStatus(status);</span></span><br><span class="line"><span class="comment">//        brand.setCompanyName(companyName);</span></span><br><span class="line"><span class="comment">//        brand.setBrandName(brandName);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;status&quot;</span>, status);</span><br><span class="line">map.put(<span class="string">&quot;companyName&quot;</span>, companyName);</span><br><span class="line">map.put(<span class="string">&quot;brandName&quot;</span>, brandName);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    List&lt;Brand&gt; selectByCondition(@Param(&quot;status&quot;) int status, @Param(&quot;companyName&quot;) String companyName, @Param(&quot;brandName&quot;) String brandName);</span></span><br><span class="line"><span class="comment">//    List&lt;Brand&gt; selectByCondition(Brand brand);</span></span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="动态多条件查询"><a href="#动态多条件查询" class="headerlink" title="动态多条件查询"></a>动态多条件查询</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       动态条件查询</span></span><br><span class="line"><span class="comment">           * if: 条件判断</span></span><br><span class="line"><span class="comment">               * test：逻辑表达式</span></span><br><span class="line"><span class="comment">           * 问题：</span></span><br><span class="line"><span class="comment">               * 恒等式</span></span><br><span class="line"><span class="comment">               * &lt;where&gt; 替换 where 关键字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">        status = #&#123;status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and company_name like #&#123;companyName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and brand_name like #&#123;brandName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果第一个status后面参数不为空就会存在sql语法错误</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">       select *</span><br><span class="line">       from tb_brand</span><br><span class="line">       /* where 1=1 */</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">               and status = #&#123;status&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">               and company_name like #&#123;companyName&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">               and brand_name like #&#123;brandName&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>存在无参数全查询问题</p>
</blockquote>
<h2 id="单条件动态查询"><a href="#单条件动态查询" class="headerlink" title="单条件动态查询"></a>单条件动态查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByConditionSingle&quot;</span> resultMap=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    &lt;choose&gt;&lt;!--相当于<span class="keyword">switch</span>--&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;status!=null&quot;</span>&gt;&lt;!--相当于<span class="keyword">case</span>--&gt;</span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            company_name like #&#123;companyName&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;&lt;!--相当于<span class="keyword">case</span>--&gt;</span><br><span class="line">            brand_name like #&#123;brandName&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;otherwise&gt;</span><br><span class="line">            <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">        &lt;/otherwise&gt;</span><br><span class="line">    &lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>otherwise可以通过<code>&lt;where&gt;</code>包裹进行替换</p>
<h2 id="添加或者修改"><a href="#添加或者修改" class="headerlink" title="添加或者修改"></a>添加或者修改</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>BrandMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">        insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">        values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意需要提交或者开始处开启自动提交</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line"><span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 执行方法</span></span><br><span class="line">brandMapper.add(brand);</span><br><span class="line"><span class="comment">//提交事务,否则插入的数据会回滚</span></span><br><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h3 id="添加项获取主键如id值"><a href="#添加项获取主键如id值" class="headerlink" title="添加项获取主键如id值"></a>添加项获取主键如id值</h3><p>使用useGeneratedKeys、keyProperty绑定插入数据的主键到id</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4. 执行方法</span></span><br><span class="line">brandMapper.add(brand);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> brand.getId();</span><br><span class="line">System.out.println(id);</span><br></pre></td></tr></table></figure>
<h2 id="修改-动态"><a href="#修改-动态" class="headerlink" title="修改-动态"></a>修改-动态</h2><p>使用set标签避免sql参数不全，多“，”造成语法错误</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand_name = #&#123;brandName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            company_name = #&#123;companyName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ordered != null&quot;</span>&gt;</span></span><br><span class="line">            ordered = #&#123;ordered&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            description = #&#123;description&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="单个"><a href="#单个" class="headerlink" title="单个"></a>单个</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from tb_brand</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>sql原语</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> id <span class="keyword">in</span> (?,?,?);</span><br></pre></td></tr></table></figure>
<p>mybatis改写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        mybatis会将数组参数，封装为一个Map集合。</span></span><br><span class="line"><span class="comment">            * 默认：array = 数组</span></span><br><span class="line"><span class="comment">            * 使用@Param注解改变map集合的默认key的名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from tb_brand</span><br><span class="line">    where id in (</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>separator的目的是为了分隔多个id</p>
<p>还可以将where id in (?,?,?)中的括号用这种形式改变</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p><strong>多个参数：封装为Map集合,可以使用@Param注解，替换Map集合中默认的arg键名</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>简单的sql语句用注解，复杂的用xml配置方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_user where id = #&#123;id&#125;;&quot;)</span></span><br><span class="line">User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="springboot3使用MyBatis"><a href="#springboot3使用MyBatis" class="headerlink" title="springboot3使用MyBatis"></a>springboot3使用MyBatis</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、用spring initial创建module</p>
<p>2、选中初始依赖</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/61655_image-20240114212007854.png" alt="image-20240114212007854"></p>
<p><code>MyBatis Framework</code>和<code>MySQL Driver</code>在SQL的依赖中</p>
<p>3、<code>application.properties</code>配置数据源</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">hdb2205</span></span><br></pre></td></tr></table></figure>
<p>4、创建pojo类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String passwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、创建一个接口<code>UserMapper</code>，resource文件夹下创建<code>mapper</code>文件夹，利用MybatisX这个插件生产<code>UserMapper.xml</code>文件（选中接口点击 more actions，选中生产xml，选中xml文件生成的位置）</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/28490_image-20240114213800163.png" alt="image-20240114213800163"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/43338_image-20240114213851958.png" alt="image-20240114213851958"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/98218_image-20240114214002500.png" alt="image-20240114214002500"></p>
<p>6、在接口中编辑方法，利用插件自动生成statement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TUser <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hdb.boot3mybatis.bean.TUser&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7、主程序中加入<code>MapperScan</code>，扫描接口包的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com/hdb/boot3mybatis/mapper&quot;)</span></span><br></pre></td></tr></table></figure>
<p>8、配置xxxmapper.xml的位置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<p>9、配置驼峰命名</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>spirng6知识小点</title>
    <url>/2024/01/16/spring6/spring6_1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="启用Log4j2日志框架"><a href="#启用Log4j2日志框架" class="headerlink" title="启用Log4j2日志框架"></a>启用Log4j2日志框架</h2><p><strong>（1）日志信息的优先级</strong>，日志信息的优先级从高到低有<strong>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</strong><br>                TRACE：追踪，是最低的日志级别，相当于追踪程序的执行<br>                DEBUG：调试，一般在开发中，都将其设置为最低的日志级别<br>                INFO：信息，输出重要的信息，使用较多<br>                WARN：警告，输出警告的信息<br>                ERROR：错误，输出错误信息<br>                FATAL：严重错误</p>
<span id="more"></span>
<p>这些级别分别用来指定这条日志信息的重要程度；级别高的会自动屏蔽级别低的日志，也就是说，设置了WARN的日志，则INFO、DEBUG的日志级别的日志不会显示</p>
<p><strong>（2）日志信息的输出目的地</strong>，日志信息的输出目的地指定了日志将打印到<strong>控制台</strong>还是<strong>文件中</strong>；</p>
<p><strong>（3）日志信息的输出格式</strong>，而输出格式则控制了日志信息的显示内容。</p>
<p>CryptoNets: Applying Neural Networks to Encrypted Data with High Throughput and Accuracy</p>
<h2 id="AOP概念及相关术语"><a href="#AOP概念及相关术语" class="headerlink" title="AOP概念及相关术语"></a>AOP概念及相关术语</h2><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善<strong>，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术</strong>。</p>
]]></content>
      <categories>
        <category>spring6</category>
      </categories>
      <tags>
        <tag>spring6</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习</title>
    <url>/2024/01/16/git%E5%AD%A6%E4%B9%A0/git_notes/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><p>配置⽤户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;hollis7&quot;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>配置邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;herryhollis@163.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>查看配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
<blockquote>
<p>user.name=hollis<br>user.email=herryhollis@163.com<br>http.proxy=<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a><br>https.proxy=<a href="https://127.0.0.1:7890">https://127.0.0.1:7890</a></p>
</blockquote>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>创建⼀个新的本地仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>当前目录下指定一个仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init my-repo</span><br></pre></td></tr></table></figure>
<p>查看.git信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -altr</span><br><span class="line"><span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">total 8</span><br><span class="line">drwxr-xr-x 1 hdb22 197610 0 Nov 29 16:58 ../</span><br><span class="line">drwxr-xr-x 1 hdb22 197610 0 Nov 29 16:58 ./</span><br><span class="line">drwxr-xr-x 1 hdb22 197610 0 Nov 29 16:58 .git/</span><br></pre></td></tr></table></figure>
<p>克隆⼀个远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br></pre></td></tr></table></figure>
<h2 id="四个区域"><a href="#四个区域" class="headerlink" title="四个区域"></a>四个区域</h2><p><strong>工作区(Working Directory)</strong><br>就是你在电脑里能实际看到的目录。</p>
<p><strong>暂存区（Stage/Index）</strong><br>暂存区也叫索引? ⽤来临时存放未提交的内容。 ⼀般在.git⽬录下的index中。</p>
<p><strong>本地仓库(Repository)</strong><br>Git在本地的版本库，仓库信息存储在.git这个隐藏目录中。</p>
<p><strong>远程仓库(Remote Repository)</strong><br>托管在远程服务器上的仓库。常用的有GitHub、GitLab、Gitee。</p>
<h2 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h2><p>提交以.txt结尾的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add *.txt</span><br></pre></td></tr></table></figure>
<p>提交记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 965946e2d53df2d211bb4fa9ff357007815f9c3e (HEAD -&gt; master)</span><br><span class="line">Author: hollis &lt;herryhollis@163.com&gt;</span><br><span class="line">Date:   Wed Nov 29 17:20:58 2023 +0800</span><br><span class="line"></span><br><span class="line">    second commit</span><br><span class="line"></span><br><span class="line">commit fccd50cb2e25533a639b4bc6ef4fa0d6c4225de6</span><br><span class="line">Author: hollis &lt;herryhollis@163.com&gt;</span><br><span class="line">Date:   Wed Nov 29 17:14:23 2023 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>简洁日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><img src="C:\data\mysoftware\Typora\typoraPicture\image-20231129172540607.png" alt="image-20231129172540607" style="zoom: 25%;" /></p>
<h3 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h3><p>查看版本id</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">837739d (HEAD -&gt; master) 3</span><br><span class="line">e4b3f38 2</span><br><span class="line">8ef07df 1</span><br></pre></td></tr></table></figure>
<p>回退到指定版本id：<code>e4b3f38</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft e4b3f38</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">e4b3f38 (HEAD -&gt; master) 2</span><br><span class="line">8ef07df 1</span><br></pre></td></tr></table></figure>
<p>查看暂存区的内容，<code>file3.txt</code>仍在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git ls-files</span><br><span class="line">file1.txt</span><br><span class="line">file2.txt</span><br><span class="line">file3.txt</span><br></pre></td></tr></table></figure>
<h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><p>回退到上一个版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
<blockquote>
<p>工作区和暂存区的file3.txt均不存在</p>
</blockquote>
<ul>
<li>[ ] 工作区</li>
<li>[ ] 暂存区</li>
</ul>
<h3 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h3><p>回退到上一个版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD^</span><br></pre></td></tr></table></figure>
<ul>
<li>[x] 工作区</li>
<li>[ ] 暂存区</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft <span class="built_in">id</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">git reset HEAD^</span><br></pre></td></tr></table></figure>
<p>常用<code>git reset HEAD^</code>和<code>git reset --soft id</code></p>
<p>:anger:慎用<code>git reset --hard HEAD^</code></p>
<h2 id="误操作"><a href="#误操作" class="headerlink" title="误操作"></a>误操作</h2><p>查看操作，回退到误操作之前：837739d</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e4b3f38 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">837739d HEAD@&#123;1&#125;: commit: 3</span><br><span class="line">e4b3f38 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 2</span><br><span class="line">8ef07df HEAD@&#123;3&#125;: commit (initial): 1</span><br></pre></td></tr></table></figure>
<p>回退</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset 837739d</span><br></pre></td></tr></table></figure>
<h2 id="查看差异"><a href="#查看差异" class="headerlink" title="查看差异"></a>查看差异</h2><ol>
<li>查看工作区和暂存区的差异</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/29/93054_image-20231129201440960.png" alt="image-20231129201440960"></p>
<p>这里add一下，工作区和暂存区保持一致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<ol>
<li>比较工作区和版本库之间的差异</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff <span class="built_in">head</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/29/67476_image-20231129202024642.png" alt="image-20231129202024642"></p>
<ol>
<li>比较暂存区和版本库之间的差异</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/29/55545_image-20231129202403474.png" alt="image-20231129202403474"></p>
<ol>
<li>比较两个版本内容</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff 837739d e4b3f38</span><br><span class="line">git diff <span class="built_in">head</span> 837739d</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/29/13924_image-20231129203139207.png" alt="image-20231129203139207"></p>
<ol>
<li>最新两个版本之间</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff <span class="built_in">head</span>~ <span class="built_in">head</span></span><br></pre></td></tr></table></figure>
<p><code>head~</code>表示最新版本的上一版本，<code>head^</code>同理</p>
<p><code>head~2</code>表示head之前的2个版本</p>
<ol>
<li>查看指定文件版本之间的差异</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff <span class="built_in">head</span>~ <span class="built_in">head</span> file3.txt</span><br></pre></td></tr></table></figure>
<h2 id="git-rm删除文件"><a href="#git-rm删除文件" class="headerlink" title="git rm删除文件"></a>git rm删除文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> file1.txt</span><br></pre></td></tr></table></figure>
<p>暂存区中的内容没有被删掉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git ls-files</span><br><span class="line">file1.txt</span><br><span class="line">file2.txt</span><br><span class="line">file3.txt</span><br></pre></td></tr></table></figure>
<p>需要add 和commit</p>
<h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>直接删除工作区和暂存区中的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> file2.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后还是要提交，否则删除的文件还是在版本库中</p>
</blockquote>
<h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><p>递归删除某个目录下的所有子目录和文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r *</span><br></pre></td></tr></table></figure>
<h2 id="学习-gitigonore"><a href="#学习-gitigonore" class="headerlink" title="学习.gitigonore"></a>学习.gitigonore</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;some log&quot;</span> &gt; access.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;other log &quot;</span> &gt; other.log</span><br></pre></td></tr></table></figure>
<p>将access.log放入<code>.gitigonore</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> access.log &gt; .gitignore</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/29/13517_image-20231129205548067.png" alt="image-20231129205548067"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;ignore and other files&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="忽略所有日志文件"><a href="#忽略所有日志文件" class="headerlink" title="忽略所有日志文件"></a>忽略所有日志文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .gitignore</span><br><span class="line">*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>输入：<code>*.log</code>然后<code>wq</code>保存</p>
<h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; hello.log</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/29/38701_image-20231129210211915.png" alt="image-20231129210211915"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -am <span class="string">&quot;test ignore log&quot;</span></span><br><span class="line">git ls-files</span><br></pre></td></tr></table></figure>
<p>没有 <code>hello.log</code></p>
<h3 id="测试已经提交的other-log"><a href="#测试已经提交的other-log" class="headerlink" title="测试已经提交的other.log"></a>测试已经提交的other.log</h3><p>追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot; modified&quot;</span> &gt;&gt; other.log</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   other.log</span><br></pre></td></tr></table></figure>
<p><code>.gitigonore</code>对已经添加的不能起作用</p>
<h3 id="删除暂存区的other-log"><a href="#删除暂存区的other-log" class="headerlink" title="删除暂存区的other.log"></a>删除暂存区的other.log</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached other.log</span><br></pre></td></tr></table></figure>
<ul>
<li>[ ] 暂存区</li>
<li>[x] 本地</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -am <span class="string">&quot;delete other.log&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>git commit -am &quot;delete other.log&quot;</code> 这个命令的作用是将所有已跟踪的文件的修改提交到版本库，并且使用 “delete other.log” 作为提交的消息。</p>
<p>需要注意的是，这种方式只适用于已经被 Git 跟踪的文件。对于新添加的文件，还是需要使用 <code>git add</code> 将其添加到暂存区，然后再使用 <code>git commit -m &quot;message&quot;</code> 提交。</p>
</blockquote>
<h3 id="忽略文件夹"><a href="#忽略文件夹" class="headerlink" title="忽略文件夹"></a>忽略文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; temp/hello.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .gitignore</span><br><span class="line">//追加temp/</span><br><span class="line">temp/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> git add .</span><br><span class="line"> git commit -m <span class="string">&quot;test ignore fold&quot;</span></span><br><span class="line"> git ls-files</span><br><span class="line"> </span><br><span class="line"> $ git ls-files</span><br><span class="line">.gitignore</span><br><span class="line">file3.txt</span><br></pre></td></tr></table></figure>
<h2 id="关联本地仓库和远程仓库"><a href="#关联本地仓库和远程仓库" class="headerlink" title="关联本地仓库和远程仓库"></a>关联本地仓库和远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:Hollis7/git_testrepo.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<p>在GitHub上添加readme文件</p>
<p>本地仓库拉取远程仓库的修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote-name&gt; &lt;remote-url&gt;</span><br><span class="line">//添加远程仓库</span><br><span class="line">git remote -v</span><br><span class="line">//查看远程仓库?</span><br></pre></td></tr></table></figure>
<h2 id="⽂件状态"><a href="#⽂件状态" class="headerlink" title="⽂件状态"></a>⽂件状态</h2><ul>
<li>main/master 默认主分⽀</li>
<li>Origin 默认远程仓库</li>
<li>HEAD 指向当前分⽀的指针</li>
<li>HEAD^ 上⼀个版本</li>
<li>HEAD~ 上四个版本</li>
</ul>
<h2 id="vscode中使用git"><a href="#vscode中使用git" class="headerlink" title="vscode中使用git"></a>vscode中使用git</h2><p>在git中打开vscode</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure>
<h2 id="分支简介和基本操作"><a href="#分支简介和基本操作" class="headerlink" title="分支简介和基本操作"></a>分支简介和基本操作</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<h3 id="创建新的分支"><a href="#创建新的分支" class="headerlink" title="创建新的分支"></a>创建新的分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure>
<p>查看分支，默认分支仍然为<code>master</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev（不建议，存在歧义）</span><br><span class="line">git switch master（建议）</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="merge合并"><a href="#merge合并" class="headerlink" title="merge合并"></a>merge合并</h2><p>在<code>dev</code>分支下创建<code>dev1.txt dev2.txt</code>，并提交，在<code>master</code>分支下查看，并没有<code>dev1.txt dev2.txt</code></p>
<p>在创建main4.txt和main5.txt看到明显的分叉</p>
<p>:memo:合并分支,将<code>dev</code>分支合并到<code>master</code>（当前）分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdb22@hollis7 MINGW64 /c/individualproject/git-learn/branch-demo (master)</span><br><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure>
<p>查看分支图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --oneline --decorate --all</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --oneline --decorate --all</span><br><span class="line">*   554c860 (HEAD -&gt; master) Merge branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">|\</span><br><span class="line">| * 01f908c (dev) dev:2</span><br><span class="line">| * 0db7fa1 dev:1</span><br><span class="line">* | 7e18db1 main:5</span><br><span class="line">* | 5d73401 main:4</span><br><span class="line">|/</span><br><span class="line">* 185b91e main:3</span><br><span class="line">* 823dd12 main:2</span><br><span class="line">* 262a6df main:1</span><br></pre></td></tr></table></figure>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>合并后分支仍然存在，可以删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>
<p><code>-d</code>表示删除已经合并的分支</p>
<p><code>-D</code>表示强制删除</p>
<h2 id="合并分支解决冲突"><a href="#合并分支解决冲突" class="headerlink" title="合并分支解决冲突"></a>合并分支解决冲突</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feat</span><br><span class="line">git swich feat</span><br><span class="line">vim main1.txt</span><br></pre></td></tr></table></figure>
<p>在<code>feat</code>分支下提交修改的main1.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;feat:1&quot;</span></span><br></pre></td></tr></table></figure>
<p>切回<code>master</code>分支，<code>main1.txt</code>的内容不变</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch master</span><br><span class="line"><span class="built_in">cat</span> main1.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>main1</p>
</blockquote>
<p>修改<code>main1.txt</code>并保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim main1.txt</span><br><span class="line">git commit -am <span class="string">&quot;main:6&quot;</span></span><br></pre></td></tr></table></figure>
<p>:memo:<strong>直接合并出现冲突</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge feat</span><br><span class="line">Auto-merging main1.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> main1.txt</span><br><span class="line">Automatic merge failed;fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>
<p>使用<code>git diff</code>查看冲突内容</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/01/66112_image-20231201153625765.png" alt="image-20231201153625765"></p>
<p><strong>手动修改main.txt文件，然后提交</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim main1.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;merge conflict&quot;</span></span><br></pre></td></tr></table></figure>
<p>提交之前中断合并可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge --absort</span><br></pre></td></tr></table></figure>
<h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><ol>
<li>为了便于演示，先删除feat分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d feat</span><br></pre></td></tr></table></figure>
<ol>
<li>恢复dev分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev 01f908c</span><br></pre></td></tr></table></figure>
<p><code>01f908c</code>是提交dev2.txt的id</p>
<ol>
<li>切回master，并reset到状态提交<code>main.5</code>的状态</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git swtich master</span><br><span class="line">git reset --hard 7e18db1</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/01/64965_image-20231201155844275.png" alt="image-20231201155844275" style="zoom:67%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/16/10240_image-20231201160041852.png" alt="image-20231201160041852" style="zoom: 67%;" /></p>
<ol>
<li><strong>回退目录，copy两次branch-demo分别演示</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf branch-demo rebase1</span><br><span class="line"><span class="built_in">cp</span> -rf branch-demo rebase2</span><br></pre></td></tr></table></figure>
<ol>
<li>rebase1文件夹下，切换到<code>dev</code>分支进行<code>rebase</code>，dev变基到master</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch dev</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/01/84395_image-20231201160653932.png" alt="image-20231201160653932" style="zoom: 67%;" /></p>
<ol>
<li>rebase2文件夹下，切换到<code>master</code>分支进行<code>rebase</code>，master变基到dev</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase dev</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/01/70958_image-20231201161355387.png" alt="image-20231201161355387" style="zoom:67%;" /></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>只是想要merge，不关系历史采用rebase（个人开发，清晰明了）</p>
<p>共享分支采用merge，不然会给别人带来困扰</p>
<h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>定义命令别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> graph=<span class="string">&quot;git log --oneline --graph --decorate --all&quot;</span></span><br></pre></td></tr></table></figure>
<p>输入<code>graph</code>直接查看图像和提交记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ graph</span><br><span class="line">*   9d6c599 (master) merge conflict</span><br><span class="line">|\</span><br><span class="line">| * 55416ce feat:1</span><br><span class="line">* | 5b8f4ef main:6</span><br><span class="line">|/</span><br><span class="line">*   554c860 Merge branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">|\</span><br><span class="line">| * 01f908c (HEAD -&gt; dev) dev:2</span><br><span class="line">| * 0db7fa1 dev:1</span><br><span class="line">* | 7e18db1 main:5</span><br><span class="line">* | 5d73401 main:4</span><br><span class="line">|/</span><br><span class="line">* 185b91e main:3</span><br><span class="line">* 823dd12 main:2</span><br><span class="line">* 262a6df main:1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_2</title>
    <url>/2024/01/18/redis/redis_2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="内容包括"><a href="#内容包括" class="headerlink" title="内容包括"></a>内容包括</h2><ul>
<li>redis java 客户端</li>
<li>SpringDataRedis</li>
<li>自定义序列化</li>
<li>手动序列化</li>
</ul>
<span id="more"></span>
<h2 id="redis的java客户端"><a href="#redis的java客户端" class="headerlink" title="redis的java客户端"></a>redis的java客户端</h2><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p>
<h2 id="Jedis客户端"><a href="#Jedis客户端" class="headerlink" title="Jedis客户端"></a>Jedis客户端</h2><p>Jedis的官网地址： <a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a></p>
<p>略，重点学习SpringDataRedis</p>
<h2 id="SpringDataRedis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p>
<ul>
<li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li>
<li>提供了RedisTemplate统一API来操作Redis</li>
<li>支持Redis的发布订阅模型</li>
<li>支持Redis哨兵和Redis集群</li>
<li>支持基于Lettuce的响应式编程</li>
<li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</li>
<li>支持基于Redis的JDKCollection实现</li>
</ul>
<p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/18/24230_1652976773295.png" alt="1652976773295"></p>
<h2 id="SpringDataRedis项目创建"><a href="#SpringDataRedis项目创建" class="headerlink" title="SpringDataRedis项目创建"></a>SpringDataRedis项目创建</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/18/43447_image-20240118152046621.png" alt="image-20240118152046621"></p>
<p>1、加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置yaml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">ip</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">xxxxx</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span>  <span class="comment">#最大连接</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">8</span>   <span class="comment">#最大空闲连接</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#最小空闲连接</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">100ms</span> <span class="comment">#连接等待时间</span></span><br></pre></td></tr></table></figure>
<p>3、RedisTemplate测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;彬哥&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、发现问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"> 1) <span class="string">&quot;hdb:product:2&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;users&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;\xac\xed\x00\x05t\x00\x04name&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="数据序列化器"><a href="#数据序列化器" class="headerlink" title="数据序列化器"></a>数据序列化器</h3><p>RedisTemplate可以接收任意Object作为值写入Redis</p>
<p>只不过写入前会把Object序列化为字节形式，<strong>默认是采用JDK序列化</strong></p>
<h3 id="自定义RedisTemplate的序列化"><a href="#自定义RedisTemplate的序列化" class="headerlink" title="自定义RedisTemplate的序列化"></a>自定义RedisTemplate的序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h2><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如图：</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/18/57696_image-20240118194242562.png" alt="image-20240118194242562"></p>
<ul>
<li><code>&quot;@class&quot;: &quot;com.hdb.redisdemo.pojo.User&quot;,</code>占用的空间比对象本身还多，但是自动反序列化又需要。</li>
<li>为了减少内存的消耗，我们可以采用手动序列化的方式，换句话说，就是不借助默认的序列化器，而是我们自己来控制序列化的动作，同时，我们只采用String的序列化器，这样，在存储value时，我们就不需要在内存中就不用多存储数据，从而节约我们的内存空间</li>
<li>SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;bin&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">// 手动序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">// 写入数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span>, json);</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonUser</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">        <span class="comment">// 手动反序列化</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(jsonUser, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="存储hash"><a href="#存储hash" class="headerlink" title="存储hash"></a>存储hash</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">    stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;bin&quot;</span>);</span><br><span class="line">    stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;entries = &quot;</span> + entries);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC学习笔记</title>
    <url>/2024/01/16/springMVC/spinngMVC/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<span id="more"></span>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol>
<li>先创建空项目</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/20184_image-20230831163022372.png" alt="image-20230831163022372"></p>
<ol>
<li>创建module</li>
</ol>
<p>等待创建过程</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/78249_image-20230831163316649.png" alt="image-20230831163316649"></p>
<ol>
<li>新建java目录</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/46834_image-20230831163503073.png" alt="image-20230831163503073"></p>
<ol>
<li>更改per-module bytecode</li>
</ol>
<p>否则会报：java: 错误: 不支持发行版本 5</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/95133_image-20230831200656888.png" alt="image-20230831200656888"></p>
<blockquote>
<p>很显然这种方式很麻烦，每次修改pom.xml文件后，都需要再次去设置。</p>
</blockquote>
<p><strong>法二、在pom.xml文件中配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="local-tomcat配置"><a href="#local-tomcat配置" class="headerlink" title="local tomcat配置"></a>local tomcat配置</h2><p>提前安装tomcat，<code>application server</code>选择安装的目录</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/11337_image-20230831202822348.png" alt="image-20230831202822348"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/84522_image-20230831144725474.png" alt="image-20230831144725474"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/83078_image-20230831144747097.png" alt="image-20230831144747097"></p>
<h2 id="tomcat乱码"><a href="#tomcat乱码" class="headerlink" title="tomcat乱码"></a>tomcat乱码</h2><h3 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">               connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">               redirectPort=<span class="string">&quot;8443&quot;</span></span><br><span class="line">               maxParameterCount=<span class="string">&quot;1000&quot;</span></span><br><span class="line">                URIEncoding=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">               /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="logging-properties"><a href="#logging-properties" class="headerlink" title="logging.properties"></a>logging.properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.encoding =  GBK</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h2 id="新建module后操作"><a href="#新建module后操作" class="headerlink" title="新建module后操作"></a>新建module后操作</h2><p>删掉原有deployment，添加新的<code>springMVC-demo2:war exploded</code></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/36330_image-20230831200416626.png" alt="image-20230831200416626"></p>
<h2 id="RequestMapping注解的value属性"><a href="#RequestMapping注解的value属性" class="headerlink" title="@RequestMapping注解的value属性"></a>@RequestMapping注解的value属性</h2><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<h2 id="RequestMapping注解的params属性"><a href="#RequestMapping注解的params属性" class="headerlink" title="@RequestMapping注解的params属性"></a>@RequestMapping注解的params属性</h2><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
<p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<h2 id="SpringMVC支持ant风格的路径"><a href="#SpringMVC支持ant风格的路径" class="headerlink" title="SpringMVC支持ant风格的路径"></a>SpringMVC支持ant风格的路径</h2><p>？：表示任意的单个字符</p>
<blockquote>
<p>java代码中用<code>/a?a</code></p>
</blockquote>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用*<em>时，只能使用/*</em>/xxx的方式</p>
<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h2><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p><strong>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400</strong>：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<h2 id="解决获取请求参数的乱码问题"><a href="#解决获取请求参数的乱码问题" class="headerlink" title="解决获取请求参数的乱码问题"></a>解决获取请求参数的乱码问题</h2><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h2><p>ServletAPI, ModelAndView, Model, map, ModelMap</p>
<h3 id="Model-map-ModelMap关系"><a href="#Model-map-ModelMap关系" class="headerlink" title="Model, map, ModelMap关系"></a>Model, map, ModelMap关系</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Model</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title class_">ModelMap</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title class_">ExtendedModelMap</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jsp上下文路径"><a href="#jsp上下文路径" class="headerlink" title="jsp上下文路径"></a>jsp上下文路径</h2><p>更新后的版本，直接使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;success&quot;</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不再使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/success&quot;</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="HiddenHttpMethodFilter"><a href="#HiddenHttpMethodFilter" class="headerlink" title="HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
</blockquote>
<h2 id="添加功能流程"><a href="#添加功能流程" class="headerlink" title="添加功能流程"></a>添加功能流程</h2><p>在employee_list中点击add功能，通过视图控制器（springMVC.xml)跳转到employee_add界面，输入信息，通过POST方法进入控制器，控制器保存新的员工，重定向到<code>/employee</code>重新进入查询所有的员工信息。</p>
<h2 id="get-post-delete-post"><a href="#get-post-delete-post" class="headerlink" title="get_post_delete_post"></a>get_post_delete_post</h2><div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1—&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user—&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1—&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user—&gt;put请求方式</td>
</tr>
</tbody>
</table>
</div>
<h2 id="更新功能流程"><a href="#更新功能流程" class="headerlink" title="更新功能流程"></a>更新功能流程</h2><p>在employee_list中点击update功能，跳转到控制器中的getEmployeeById（RequestMethod.GET）查询对应id的employee，将employee信息发送到employee_update网页，网页采用回显，提交信息后跳转到控制器中的updateEmployee（put），更新保存信息，重定向到控制器的getAllEmployee显示所有员工信息。</p>
<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RequestEntity"><a href="#RequestEntity" class="headerlink" title="RequestEntity"></a>RequestEntity</h2><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<blockquote>
<p>不再把success解析为html视图</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC处理json"><a href="#SpringMVC处理json" class="headerlink" title="SpringMVC处理json"></a>SpringMVC处理json</h2><p>浏览器不能识别java响应的对象，需要转化为json格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>a&gt;导入jackson的依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.12</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>
<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为<strong>Json格式的字符串</strong></p>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，通常用于在不同系统之间传递和存储数据。JSON的设计目标是简单、易于阅读和编写，同时也易于解析和生成。它以文本形式表示数据，由键值对组成，具有以下特点：</p>
<ol>
<li>键值对：JSON 数据是由键值对组成的，每个键（也称为属性或字段）都是一个字符串，值可以是字符串、数字、布尔值、数组、对象、null等。键值对之间使用冒号（<code>:</code>）分隔，而不同的键值对之间使用逗号（<code>,</code>）分隔。</li>
<li>嵌套结构：JSON 支持嵌套结构，可以在值中包含其他键值对，从而构建复杂的数据结构。</li>
<li>数组：JSON 数组是一种有序的值的集合，使用方括号（<code>[]</code>）来表示。数组中的元素可以是任何合法的 JSON 数据类型，包括对象、字符串、数字等。</li>
<li>简洁性：JSON 的语法相对简单，易于阅读和编写。这使得它成为了在不同编程语言之间进行数据交换的理想选择。</li>
<li>自我描述性：JSON 数据本身包含数据类型信息，因此接收方可以很容易地理解数据的结构和内容。</li>
<li>广泛应用：JSON 在Web开发中非常常见，用于传输数据、配置文件、API通信等。它也得到了许多编程语言的支持，因此可以轻松地在不同平台上使用。<em>**</em></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isStudent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;languages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;JavaScript&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Python&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C++&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123 Main St&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Anytown&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h2><p>再webapp下添加了static后，需要重新打包，找到maven中的lifestyle下的package，点击</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/10/30/28028_image-20231030104445931.png" alt="image-20231030104445931" style="zoom: 50%;" /><img src="https://gitee.com/hollis7/pictures/raw/master/2023/10/30/88240_image-20231030104506076.png" alt="image-20231030104506076" style="zoom: 50%;" /></p>
<h2 id="RestController注解"><a href="#RestController注解" class="headerlink" title="@RestController注解"></a>@RestController注解</h2><p><code>@RestController</code>注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了<code>@Controller</code>注解，并且为其中的每个方法添加了<code>@ResponseBody</code>注解</p>
<h2 id="文件上传-下载"><a href="#文件上传-下载" class="headerlink" title="文件上传/下载"></a>文件上传/下载</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>获取ServletContext对象</p>
<p>获取服务器中文件的真实路径</p>
<p>创建输入流</p>
<p>创建字节数组</p>
<p>将流读到字节数组中</p>
<p>创建HttpHeaders对象设置响应头信息</p>
<p>设置要下载方式以及下载文件的名字</p>
<p>设置响应状态码</p>
<p>创建ResponseEntity对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>这两条都是对所有请求拦截（springMVC配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.hdb.mvc.interceptors.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="拦截器的三个抽象方法"><a href="#拦截器的三个抽象方法" class="headerlink" title="拦截器的三个抽象方法"></a>拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h2 id="基于配置的异常处理"><a href="#基于配置的异常处理" class="headerlink" title="基于配置的异常处理"></a>基于配置的异常处理</h2><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver<br>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver. SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置异常处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置将异常信息共享在请求域中的键--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">出现错误</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;ex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h2><p>Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为<code>AbstractAnnotationConfigDispatcherServletInitializer</code>，当我们的类扩展了<code>AbstractAnnotationConfigDispatcherServletInitializer</code>并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webconfig"><a href="#webconfig" class="headerlink" title="webconfig"></a>webconfig</h3><p>代替SpringMVC的配置文件：</p>
<p>1、扫描组件  2、视图解析器   3、view-controller   4、default-servlet-handler</p>
<p> 5、mvc注解驱动   6、文件上传解析器  7、异常处理    8、拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hdb.mvc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hdb.mvc.interceptor.TestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.ContextLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.spring5.SpringTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.spring5.view.ThymeleafViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templatemode.TemplateMode;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templateresolver.ITemplateResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代替SpringMVC的配置文件：</span></span><br><span class="line"><span class="comment"> * 1、扫描组件   2、视图解析器     3、view-controller    4、default-servlet-handler</span></span><br><span class="line"><span class="comment"> * 5、mvc注解驱动    6、文件上传解析器   7、异常处理      8、拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//1、扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hdb.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//5、mvc注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、default-servlet-handler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8、拦截器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">TestInterceptor</span> <span class="variable">testInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(testInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、view-controller</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/hello&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6、文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CommonsMultipartResolver</span> <span class="variable">commonsMultipartResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">        <span class="keyword">return</span> commonsMultipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7、异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMappingExceptionResolver</span> <span class="variable">exceptionResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMappingExceptionResolver</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;java.lang.ArithmeticException&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//出现ArithmeticException映射到error。html</span></span><br><span class="line">        exceptionResolver.setExceptionMappings(prop);</span><br><span class="line">        <span class="comment">//exception的值是ArithmeticException中对应的错误信息，共享到请求域中的键</span></span><br><span class="line">        exceptionResolver.setExceptionAttribute(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        resolvers.add(exceptionResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC常用组件"><a href="#SpringMVC常用组件" class="headerlink" title="SpringMVC常用组件"></a>SpringMVC常用组件</h2><ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：<strong>处理器</strong>，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h2 id="DispatcherServlet初始化过程"><a href="#DispatcherServlet初始化过程" class="headerlink" title="DispatcherServlet初始化过程"></a>DispatcherServlet初始化过程</h2><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p>a&gt;初始化WebApplicationContext</p>
<p>b&gt;创建WebApplicationContext</p>
<p>c&gt;DispatcherServlet初始化策略</p>
<p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><p>1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p>
<p>2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
<p>a) 不存在</p>
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<p>b) 存在则执行下面的流程</p>
<p>3) 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
<p>4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>
<p>5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p>
<p>6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<p>7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
<p>8) 此时将开始执行拦截器的postHandle(…)方法【逆向】。</p>
<p>9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p>
<p>10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p>
<p>11) 将渲染结果返回给客户端。</p>
]]></content>
      <categories>
        <category>springMVC</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpirngMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 场景整合</title>
    <url>/2024/01/16/springboot3/springboot3_%E5%9C%BA%E6%99%AF%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes</a></p>
<span id="more"></span>
<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ul>
<li>准备prometheus.yml，docker-compose.yml</li>
<li>启动环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure>
<p>停止服务而不删除相关容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.yml stop</span><br></pre></td></tr></table></figure>
<p>重新启动已经停止的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.yml start</span><br></pre></td></tr></table></figure>
<p>关闭通过 Docker Compose 启动的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.yml down</span><br></pre></td></tr></table></figure>
<h2 id="Redis整合"><a href="#Redis整合" class="headerlink" title="Redis整合"></a>Redis整合</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">server ip</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * set:     集合:       redisTemplate.opsForSet()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">setName</span> <span class="operator">=</span> <span class="string">&quot;settest&quot;</span>;</span><br><span class="line">       <span class="comment">//1、给集合中添加元素</span></span><br><span class="line">       redisTemplate.opsForSet().add(setName,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> redisTemplate.opsForSet().isMember(setName, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">       Assertions.assertTrue(aBoolean);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">aBoolean1</span> <span class="operator">=</span> redisTemplate.opsForSet().isMember(setName, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">       Assertions.assertFalse(aBoolean1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="RedisTemplate定制化"><a href="#RedisTemplate定制化" class="headerlink" title="RedisTemplate定制化"></a>RedisTemplate定制化</h2><p>模仿官方的RedisTemplate进行改写默认序列化，在<code>RedisAutoConfiguration</code>中有<br>找到<code>RedisSerializer</code>接口，定位实现类（ctr+H），发现<code>GenericJackson2JsonRedisSerializer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppRedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//把对象转为json字符串的序列化工具</span></span><br><span class="line">        template.setDefaultSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/78210_image-20240109102411367.png" alt="image-20240109102411367"></p>
<p>重新运行程序，会产生一个没有乱码的person的<code>&lt;key,value&gt;</code></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/82329_image-20240109102745029.png" alt="image-20240109102745029"></p>
<h2 id="redis相关配置"><a href="#redis相关配置" class="headerlink" title="redis相关配置"></a>redis相关配置</h2><ul>
<li><p><strong>Redis客户端</strong></p>
</li>
<li><ul>
<li>Lettuce： 默认</li>
<li>Jedis：可以使用以下切换</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring.data.redis.client-type=lettuce</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置lettuce的底层参数</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br></pre></td></tr></table></figure>
<p>使用Jedis，在redis-starter中排除<code>lettuce</code>，再导入<code>jedis</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        切换 jedis 作为操作redis的底层客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><p>Swagger 可以快速生成<strong>实时接口</strong>文档，方便前后开发人员进行协调沟通。遵循 <strong>OpenAPI</strong> 规范。</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>进入<code>http://localhost:8080/swagger-ui/index.html</code></p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th>标注位置</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Tag</td>
<td>controller 类</td>
<td>标识 controller 作用</td>
</tr>
<tr>
<td>@Parameter</td>
<td>参数</td>
<td>标识参数作用</td>
</tr>
<tr>
<td>@Parameters</td>
<td>参数</td>
<td>参数多重说明</td>
</tr>
<tr>
<td>@Schema</td>
<td>model 层的 JavaBean</td>
<td>描述模型作用及每个属性</td>
</tr>
<tr>
<td>@Operation</td>
<td>方法</td>
<td>描述方法作用</td>
</tr>
<tr>
<td>@ApiResponse</td>
<td>方法</td>
<td>描述响应状态码等</td>
</tr>
</tbody>
</table>
</div>
<h2 id="controller示例"><a href="#controller示例" class="headerlink" title="controller示例"></a>controller示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tag(name=&quot;部门&quot;,description = &quot;部门的CRUD&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeptService deptService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Knife4j</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询&quot;,description = &quot;按照id查询部门&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询所有部门&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/depts&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">getDept</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.getDepts();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;保存部门&quot;,description = &quot;必须提交json&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveDept</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;</span><br><span class="line">        deptService.saveDept(dept);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;按照id删除部门&quot;,description = &quot;必须提交json&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/dept/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteDept</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="meta">@Parameter(description = &quot;部门id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        deptService.deleteDept(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分组设置"><a href="#分组设置" class="headerlink" title="分组设置"></a>分组设置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiUiConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">empApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;员工管理&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/emp/**&quot;</span>,<span class="string">&quot;/emps&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">deptApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;部门管理&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/dept/**&quot;</span>,<span class="string">&quot;/depts&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">docsOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;SpringBoot3-CRUD API&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;专门测试接口文件&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v0.0.1&quot;</span>)</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">                        .description(<span class="string">&quot;哈哈 Wiki Documentation&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h1><h2 id="方法一：webclient"><a href="#方法一：webclient" class="headerlink" title="方法一：webclient"></a>方法一：webclient</h2><p>编写WeatherService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getByWebClient</span><span class="params">(String city)</span>&#123;</span><br><span class="line">       <span class="comment">//远程调用阿里云API</span></span><br><span class="line">       <span class="comment">//1、创建WebClient</span></span><br><span class="line">       <span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.create();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2、准备数据</span></span><br><span class="line">       Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       params.put(<span class="string">&quot;area&quot;</span>,city);</span><br><span class="line">       <span class="comment">//3、定义发请求行为  CompletableFuture</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> client.get()</span><br><span class="line">               .uri(<span class="string">&quot;https://qryweather.market.alicloudapi.com/lundroid/queryweather?area=&#123;area&#125;&quot;</span>, params)</span><br><span class="line">               .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">               .header(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;APPCODE 9a0a550ada0c4656a5777f8ef674cbca&quot;</span>)</span><br><span class="line">               .retrieve()</span><br><span class="line">               .bodyToMono(String.class)</span><br><span class="line">               .block();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> json;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>WeatherController调用WeatherService的getByWebClient函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/weather&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">weather</span><span class="params">(<span class="meta">@RequestParam(&quot;city&quot;)</span>String city)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">weather</span> <span class="operator">=</span> weatherService.getByWebClient(city);</span><br><span class="line">        <span class="keyword">return</span> weather;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法二：HTTP-Interface"><a href="#方法二：HTTP-Interface" class="headerlink" title="方法二：HTTP Interface"></a>方法二：HTTP Interface</h2><p>Spring 允许我们通过定义接口的方式，给任意位置发送 http 请求，实现远程调用，可以用来简化 HTTP 远程访问。需要webflux场景才可</p>
<ol>
<li>定义配置类<code>AliyunApiConfiguration</code>，其中aliyun.appcode为阿里云的相关api的授权码，可在properties中设置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunApiConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    HttpServiceProxyFactory <span class="title function_">httpServiceProxyFactory</span><span class="params">(<span class="meta">@Value(&quot;$&#123;aliyun.appcode&#125;&quot;)</span> String appCode)</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建客户端</span></span><br><span class="line">        <span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">                .defaultHeader(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;APPCODE &quot;</span>+appCode)</span><br><span class="line">                .codecs(clientCodecConfigurer -&gt; &#123;</span><br><span class="line">                    clientCodecConfigurer</span><br><span class="line">                            .defaultCodecs()</span><br><span class="line">                            .maxInMemorySize(<span class="number">256</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">                    <span class="comment">//响应数据量太大有可能会超出BufferSize，所以这里设置的大一点</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//2、创建工厂</span></span><br><span class="line">        <span class="type">HttpServiceProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> HttpServiceProxyFactory</span><br><span class="line">                .builderFor(WebClientAdapter.create(client))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    WeatherInterface <span class="title function_">weatherInterface</span><span class="params">(HttpServiceProxyFactory httpServiceProxyFactory)</span>&#123;</span><br><span class="line">        <span class="comment">//3、获取代理对象</span></span><br><span class="line">        <span class="type">WeatherInterface</span> <span class="variable">weatherInterface</span> <span class="operator">=</span> httpServiceProxyFactory.createClient(WeatherInterface.class);</span><br><span class="line">        <span class="keyword">return</span> weatherInterface;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">aliyun.appcode</span>=<span class="string">9a0a550ada0c4656a5777f8ef674cbca</span></span><br></pre></td></tr></table></figure>
<ol>
<li>定义接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WeatherInterface</span> &#123;</span><br><span class="line">    <span class="meta">@GetExchange(url = &quot;https://qryweather.market.alicloudapi.com/lundroid/queryweather&quot;,accept = &quot;application/json&quot;)</span></span><br><span class="line">    String <span class="title function_">getWeather</span><span class="params">(<span class="meta">@RequestParam(&quot;area&quot;)</span> String city)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>controller调用相关服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WeatherService weatherService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/weather&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">weather</span><span class="params">(<span class="meta">@RequestParam(&quot;city&quot;)</span>String city)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">weather</span> <span class="operator">=</span> weatherService.weather(city);</span><br><span class="line">        <span class="keyword">return</span> weather;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>当有新的阿里云api时，可以复用配置代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AliyunApiConfiguration</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    ExpressApi <span class="title function_">expressApi</span><span class="params">(HttpServiceProxyFactory httpServiceProxyFactory)</span>&#123;</span><br><span class="line">        <span class="type">ExpressApi</span> <span class="variable">client</span> <span class="operator">=</span> httpServiceProxyFactory.createClient(ExpressApi.class);</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//WeatherController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExpressApi</span> &#123;</span><br><span class="line">    <span class="meta">@GetExchange(url = &quot;https://qryweather.market.alicloudapi.com/lundroid/queryweather&quot;,accept = &quot;application/json&quot;)</span></span><br><span class="line">    String <span class="title function_">getExpress</span><span class="params">(<span class="meta">@RequestParam(&quot;number&quot;)</span> String number)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="消息服务"><a href="#消息服务" class="headerlink" title="消息服务"></a>消息服务</h1><h2 id="kafka原理"><a href="#kafka原理" class="headerlink" title="kafka原理"></a>kafka原理</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/1613913/1683170677428-6ffa28b6-d522-435f-9e50-20fe3ddfd024.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_36%2Ctext_5bCa56GF6LC3IGF0Z3VpZ3UuY29t%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1125%2Climit_0" alt="image.png"></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>新建module，勾选</li>
</ol>
<ul>
<li>[x] Lombok</li>
<li>[x] Spring Web</li>
<li>[x] Spring for Apache Kafka</li>
</ul>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/12022_image-20240109203533200.png" alt="image-20240109203533200"></p>
<ol>
<li>配置kafka服务器</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span>=<span class="string">server_ip:9092</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在测试主程序中编写程序，需要修改hosts文件，文件地址：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hosts：</span><br><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure>
<p>:rage: 加入ip对应的名字，不是老师讲的kafka</p>
<p>修改hosts文件，先以管理员权限打开文本编辑器，再用文本编辑器打开hosts文件进行修改。</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/86312_image-20240109213939272.png" alt="image-20240109213939272"  /></p>
<h2 id="测试（异步）"><a href="#测试（异步）" class="headerlink" title="测试（异步）"></a>测试（异步）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        CompletableFuture[] futures = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">10000</span>];</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">CompletableFuture</span> <span class="variable">future</span> <span class="operator">=</span> kafkaTemplate.send(<span class="string">&quot;news&quot;</span>, <span class="string">&quot;pig&quot;</span>, <span class="string">&quot;你是猪&quot;</span>);</span><br><span class="line">            futures[i] = future;</span><br><span class="line">        &#125;</span><br><span class="line">        CompletableFuture.allOf(futures).join();</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">millis</span> <span class="operator">=</span> stopWatch.getTotalTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;10000消息发送完成：ms时间：&quot;</span> + millis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="kafka存入类测试"><a href="#kafka存入类测试" class="headerlink" title="kafka存入类测试"></a>kafka存入类测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CompletableFuture</span> <span class="variable">future</span> <span class="operator">=</span> kafkaTemplate.send(<span class="string">&quot;news&quot;</span>, <span class="string">&quot;person&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;hjaha@qq.com&quot;</span>));</span><br><span class="line">        future.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>需要进行序列化配置，默认是<code>Serializer</code>，改为json</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.producer.value-serializer</span>=<span class="string">org.springframework.kafka.support.serializer.JsonSerializer</span></span><br></pre></td></tr></table></figure>
<h2 id="KafkaListener监听"><a href="#KafkaListener监听" class="headerlink" title="KafkaListener监听"></a>KafkaListener监听</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHahaTopicListener</span> &#123;</span><br><span class="line">    <span class="comment">//默认的监听是从消息队列最后一个消息开始拿。新消息才能拿到</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;news&quot;, groupId = &quot;haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenRecords</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> record.key();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> record.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息：key【&quot;</span> + key + <span class="string">&quot;】 value【&quot;</span> + value + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拿到以前的完整消息;</span></span><br><span class="line">    <span class="meta">@KafkaListener(groupId = &quot;haha2&quot;,</span></span><br><span class="line"><span class="meta">            topicPartitions = &#123;</span></span><br><span class="line"><span class="meta">                    @TopicPartition(topic = &quot;news&quot;,</span></span><br><span class="line"><span class="meta">                            partitionOffsets = &#123;</span></span><br><span class="line"><span class="meta">                                    @PartitionOffset(partition = &quot;0&quot;, initialOffset = &quot;0&quot;)</span></span><br><span class="line"><span class="meta">                            &#125;)</span></span><br><span class="line"><span class="meta">            &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenAllRecords</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> record.key();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> record.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;=============收到消息：key【&quot;</span> + key + <span class="string">&quot;】 value【&quot;</span> + value + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boo312MessageApplication</span></span><br></pre></td></tr></table></figure>
<p>Kafka 的特点包括：</p>
<ul>
<li>高吞吐：Kafka 可以处理每秒数百万条消息。</li>
<li>低延迟：Kafka 可以将消息从生产者发送到消费者的延迟保持在毫秒级。</li>
<li>持久化：Kafka 将消息持久化到磁盘，即使生产者或消费者发生故障，消息也不会丢失。</li>
<li>扩展性：Kafka 可以水平扩展，以满足不断增长的需求。</li>
</ul>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_1</title>
    <url>/2024/01/18/redis/redis_1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="内容包括"><a href="#内容包括" class="headerlink" title="内容包括"></a>内容包括</h2><ul>
<li>docker启动redis</li>
<li>docker进入redis-cli</li>
<li>认识NoSql</li>
<li>redis常用命令</li>
</ul>
<span id="more"></span>
<h2 id="docker运行redis"><a href="#docker运行redis" class="headerlink" title="docker运行redis"></a>docker运行redis</h2><h3 id="yaml文件准备"><a href="#yaml文件准备" class="headerlink" title="yaml文件准备"></a>yaml文件准备</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hdb_redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="string">passwd</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">./redis_data:/data</span>  <span class="comment"># 将数据挂载到本地目录</span></span><br><span class="line">  <span class="attr">redis_backup:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&#x27;exec redis-server --requirepass passwd --save 3600 1&#x27;</span>  <span class="comment"># 每小时备份一次</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis_data:/data</span>  <span class="comment"># 使用相同的挂载点</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br></pre></td></tr></table></figure>
<p>确保yaml文件同目录下有<code>redis_data</code>文件夹，备份将在<code>redis_data</code>下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it hdb_redis redis-cli -a passwd BGSAVE</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure>
<p>停止服务而不删除相关容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.yml stop</span><br></pre></td></tr></table></figure>
<p>重新启动已经停止的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.yml start</span><br></pre></td></tr></table></figure>
<p>关闭通过 Docker Compose 启动的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.yml down</span><br></pre></td></tr></table></figure>
<h3 id="进入Redis终端"><a href="#进入Redis终端" class="headerlink" title="进入Redis终端"></a>进入Redis终端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec ：在运行的容器中执行命令</span><br><span class="line"># 语法</span><br><span class="line">-d :分离模式: 在后台运行</span><br><span class="line">-i :即使没有附加也保持STDIN 打开</span><br><span class="line">-t :分配一个伪终端</span><br></pre></td></tr></table></figure>
<p><code>redis-cli</code>表示运行一个redis客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 29f48e38c77b redis-cli</span><br><span class="line"><span class="comment"># 推荐</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it hdb_redis redis-cli</span><br></pre></td></tr></table></figure>
<p>da45019bf760是redis的容器id</p>
<p>退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctr+D</span><br></pre></td></tr></table></figure>
<h3 id="密码认证"><a href="#密码认证" class="headerlink" title="密码认证"></a>密码认证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth passwd</span><br></pre></td></tr></table></figure>
<h2 id="认识NoSQL"><a href="#认识NoSQL" class="headerlink" title="认识NoSQL"></a>认识NoSQL</h2><h3 id="结构化与非结构化"><a href="#结构化与非结构化" class="headerlink" title="结构化与非结构化"></a>结构化与非结构化</h3><ul>
<li>传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名.字段数据类型.字段约束等等信息，插入的数据必须遵守这些约束：</li>
<li>而NoSql则对数据库格式没有严格约束，往往形式松散，自由。</li>
</ul>
<h3 id="关联和非关联"><a href="#关联和非关联" class="headerlink" title="关联和非关联"></a>关联和非关联</h3><ul>
<li>传统数据库的表与表之间往往存在关联，例如外键</li>
<li>而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合</li>
</ul>
<h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><p>传统关系型数据库会基于Sql语句做查询，语法有统一标准；</p>
<p>而不同的非关系数据库查询语法差异极大，五花八门各种各样。</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>统关系型数据库能满足事务ACID的原则。</p>
<p>而非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。</p>
<blockquote>
<ol>
<li><strong>原子性 (Atomicity):</strong> 事务是原子的，要么全部执行，要么全部不执行。如果事务中的任何一部分操作失败，整个事务将被回滚到初始状态。</li>
<li><strong>一致性 (Consistency):</strong> 事务使数据库从一个一致的状态转移到另一个一致的状态。这意味着事务执行后，数据库必须仍然满足所有的完整性约束。</li>
<li><strong>隔离性 (Isolation):</strong> 多个事务可以并发执行，但其结果必须与按某种顺序串行执行它们的结果一致。隔离性确保一个事务的执行不会受到其他事务的干扰。</li>
<li><strong>持久性 (Durability):</strong> 一旦事务提交，其结果应该是永久性的，即使在系统故障的情况下也不会丢失。</li>
</ol>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/16/27857_Nosql.png" alt="Nosql"></p>
<h2 id="认识Redis"><a href="#认识Redis" class="headerlink" title="认识Redis"></a>认识Redis</h2><p>Redis诞生于2009年全称是<strong>Remote Dictionary Server</strong>，远程词典服务器，是一个基于<strong>内存</strong>的键值型NoSQL数据库</p>
<ul>
<li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li>
<li>单线程，每个命令具备原子性</li>
<li>低延迟，速度快（<strong>基于内存</strong>.IO多路复用.良好的编码-c语言）。</li>
<li>支持数据持久化（断电-定期备份磁盘）</li>
<li>支持主从集群.分片集群</li>
<li>支持多语言客户端</li>
</ul>
<h2 id="初始redis"><a href="#初始redis" class="headerlink" title="初始redis"></a>初始redis</h2><h3 id="设值取值"><a href="#设值取值" class="headerlink" title="设值取值"></a>设值取值</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> name jack</span><br><span class="line">get name</span><br></pre></td></tr></table></figure>
<h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="keyword">select</span> 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; <span class="built_in">set</span> age 24</span><br></pre></td></tr></table></figure>
<h2 id="redis命令文档"><a href="#redis命令文档" class="headerlink" title="redis命令文档"></a>redis命令文档</h2><p>Redis是典型的key-value数据库，key一般是字符串，而value包含很多不同的数据类型：</p>
<p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在<a href="https://redis.io/commands">官网</a>可以查看到不同的命令。</p>
<p>或者使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span> @<span class="built_in">hash</span></span><br></pre></td></tr></table></figure>
<h2 id="redis通用命令"><a href="#redis通用命令" class="headerlink" title="redis通用命令"></a>redis通用命令</h2><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p>
<ul>
<li>KEYS：查看符合模板的所有key</li>
<li>DEL：删除一个指定的key</li>
<li>EXISTS：判断key是否存在</li>
<li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li>
<li>TTL：查看一个KEY的剩余有效期</li>
</ul>
<h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不建议</span></span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<h3 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多键值对赋值</span></span><br><span class="line">mset k1 v1 k2 v2 k3 v3</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">4) <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="del-2"><a href="#del-2" class="headerlink" title="del 2"></a>del 2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量删除</span></span><br><span class="line">127.0.0.1:6379&gt; del k1 k2 k3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>
<h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Determines whether one or more keys exist.</span></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h3><p>设置key的过期时间（秒）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expire k1 20</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示-2表示已经删除</span></span><br><span class="line">127.0.0.1:6379&gt; TTl k1</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br></pre></td></tr></table></figure>
<p><code>-1</code>代表永久有效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; TTL age</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br></pre></td></tr></table></figure>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p>
<p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p>
<ul>
<li>string：普通字符串</li>
<li>int：整数类型，可以做自增、自减操作</li>
<li>float：浮点类型，可以做自增、自减操作</li>
</ul>
<p>不管是哪种格式，底层都是<strong>字节数组</strong>形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p>
<h3 id="String的常见命令"><a href="#String的常见命令" class="headerlink" title="String的常见命令"></a>String的常见命令</h3><p>String的常见命令有：</p>
<ul>
<li>SET：添加或者修改已经存在的一个String类型的键值对</li>
<li>GET：根据key获取String类型的value</li>
<li>MSET：批量添加多个String类型的键值对</li>
<li>MGET：根据多个key获取多个String类型的value</li>
<li>INCR：让一个整型的key自增1</li>
<li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li>
<li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li>
<li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li>
<li>SETEX：添加一个String类型的键值对，并且指定有效期</li>
</ul>
<h3 id="INCR"><a href="#INCR" class="headerlink" title="INCR"></a>INCR</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INCR age</span><br></pre></td></tr></table></figure>
<h3 id="INCRBY"><a href="#INCRBY" class="headerlink" title="INCRBY"></a>INCRBY</h3><p>自增3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCRBY age 3</span><br><span class="line">(<span class="built_in">integer</span>) 28</span><br><span class="line">127.0.0.1:6379&gt; INCRBY age 3</span><br><span class="line">(<span class="built_in">integer</span>) 31</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
<p>自减直接负数</p>
<h3 id="INCRBYFLOAT"><a href="#INCRBYFLOAT" class="headerlink" title="INCRBYFLOAT"></a>INCRBYFLOAT</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> score 4.5</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT score 3.4</span><br><span class="line"><span class="string">&quot;7.9&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里注意score最好介于-128~128之间，超过的话，incrbyfloat会发生位数异常</p>
</blockquote>
<h3 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a>SETNX</h3><p>添加一个String类型的键值对，前提是这个key不存在，否则不执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx name lush</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<h3 id="SETEX"><a href="#SETEX" class="headerlink" title="SETEX"></a>SETEX</h3><p>Sets the string value and expiration time of a key. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETEX name 30 jack</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 22</span><br></pre></td></tr></table></figure>
<h2 id="Key结构"><a href="#Key结构" class="headerlink" title="Key结构"></a>Key结构</h2><p><strong>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</strong></p>
<p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p>
<p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目名:业务名:类型:id</span><br></pre></td></tr></table></figure>
<p><strong>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>KEY</strong></th>
<th><strong>VALUE</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>heima:user:1</td>
<td>{“id”:1,  “name”: “Jack”, “age”: 21}</td>
</tr>
<tr>
<td>heima:product:1</td>
<td>{“id”:1,  “name”: “小米11”, “price”: 4999}</td>
</tr>
</tbody>
</table>
</div>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hdb:user:1 <span class="string">&#x27;&#123;&quot;id&quot;:1, &quot;name&quot;:&quot;Jack&quot;, &quot;age&quot;: 21&#125;&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hdb:user:2 <span class="string">&#x27;&#123;&quot;id&quot;:2, &quot;name&quot;:&quot;Rose&quot;, &quot;age&quot;: 18&#125;&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hdb:product:1 <span class="string">&#x27;&#123;&quot;id&quot;:1, &quot;name&quot;:&quot;小米11&quot;, &quot;price&quot;: 4999&#125;&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hdb:product:2 <span class="string">&#x27;&#123;&quot;id&quot;:2, &quot;name&quot;:&quot;荣耀6&quot;, &quot;price&quot;: 2999&#125;&#x27;</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/17/99830_image-20240117215605769.png" alt="image-20240117215605769" style="zoom:67%;" /></p>
<h2 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h2><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便</p>
<p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD。</p>
<blockquote>
<p>Create、Read、Update和Delete</p>
</blockquote>
<p><strong>Hash的常见命令有：</strong></p>
<ul>
<li><p>HSET key field value：添加或者修改hash类型key的field的值</p>
</li>
<li><p>HGET key field：获取一个hash类型key的field的值</p>
</li>
<li><p>HMSET：批量添加多个hash类型key的field的值</p>
</li>
<li><p>HMGET：批量获取多个hash类型key的field的值</p>
</li>
<li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p>
</li>
<li>HKEYS：获取一个hash类型的key中的所有的field</li>
<li>HINCRBY:让一个hash类型key的字段值自增并指定步长</li>
<li>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</li>
</ul>
<h3 id="HSET"><a href="#HSET" class="headerlink" title="HSET"></a>HSET</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset hdb:user:3 name lucy</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hset hdb:user:3 age 23</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="HGET"><a href="#HGET" class="headerlink" title="HGET"></a>HGET</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget hdb:user:3 age</span><br><span class="line"><span class="string">&quot;28&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="HMGET"><a href="#HMGET" class="headerlink" title="HMGET"></a>HMGET</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget hdb:user:3 age name</span><br><span class="line">1) <span class="string">&quot;28&quot;</span></span><br><span class="line">2) <span class="string">&quot;lucy&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall hdb:user:3</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;lucy&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;28&quot;</span></span><br><span class="line">5) <span class="string">&quot;sex&quot;</span></span><br><span class="line">6) <span class="string">&quot;girl&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys hdb:user:3</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;sex&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hvals hdb:user:3</span><br><span class="line">1) <span class="string">&quot;lucy&quot;</span></span><br><span class="line">2) <span class="string">&quot;28&quot;</span></span><br><span class="line">3) <span class="string">&quot;girl&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby"></a>hincrby</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby hdb:user:3 age 2</span><br><span class="line">(<span class="built_in">integer</span>) 30</span><br><span class="line">127.0.0.1:6379&gt; hincrby hdb:user:3 age 2</span><br><span class="line">(<span class="built_in">integer</span>) 32</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>特征也与LinkedList类似：</p>
<ul>
<li>有序</li>
<li>元素可以重复</li>
<li>插入和删除快</li>
<li>查询速度一般</li>
</ul>
<p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p>
<p>List的常见命令有：</p>
<ul>
<li>LPUSH key element … ：向列表左侧插入一个或多个元素</li>
<li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li>
<li>RPUSH key element … ：向列表右侧插入一个或多个元素</li>
<li>RPOP key：移除并返回列表右侧的第一个元素</li>
<li>LRANGE key star end：返回一段角标范围内的所有元素</li>
<li>BLPOP和BRPOP：（BLPOP）移除并返回列表中的第一个元素。否则会阻塞直到有元素可用。如果最后一个元素被弹出，则删除列表</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH <span class="built_in">users</span> 1 2 3 4 5</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; RPUSH animals 1 2 3 4 5</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LPOP <span class="built_in">users</span> 1</span><br><span class="line">1) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE <span class="built_in">users</span> 0 2</span><br><span class="line">1) <span class="string">&quot;4&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="BLPOP"><a href="#BLPOP" class="headerlink" title="BLPOP"></a>BLPOP</h3><p>没有deals，阻塞，等待100s</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BLPOP deals 100</span><br></pre></td></tr></table></figure>
<p>新建终端，push一个元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush deals egg</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p>查看原终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BLPOP deals 100</span><br><span class="line">1) <span class="string">&quot;deals&quot;</span></span><br><span class="line">2) <span class="string">&quot;egg&quot;</span></span><br><span class="line">(49.58s)</span><br></pre></td></tr></table></figure>
<p>如果最后一个元素被弹出，则删除列表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys deals</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure></p>
<h2 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p>
<ul>
<li><p>无序</p>
</li>
<li><p>元素不可重复</p>
</li>
<li><p>查找快</p>
</li>
<li><p>支持交集、并集、差集等功能</p>
</li>
</ul>
<p>Set的常见命令有：</p>
<ul>
<li>SADD key member … ：向set中添加一个或多个元素</li>
<li>SREM key member … : 移除set中的指定元素</li>
<li>SCARD key： 返回set中元素的个数</li>
<li>SISMEMBER key member：判断一个元素是否存在于set中</li>
<li>SMEMBERS：获取set中的所有元素</li>
<li>SINTER key1 key2 … ：求key1与key2的交集</li>
</ul>
<h3 id="SADD"><a href="#SADD" class="headerlink" title="SADD"></a>SADD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD s1 a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>
<h3 id="SMEMBERS"><a href="#SMEMBERS" class="headerlink" title="SMEMBERS"></a>SMEMBERS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS s1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="SREM"><a href="#SREM" class="headerlink" title="SREM"></a>SREM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SREM s1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="SISMEMBER"><a href="#SISMEMBER" class="headerlink" title="SISMEMBER"></a>SISMEMBER</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SISMEMBER s1 a</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<h3 id="SCARD"><a href="#SCARD" class="headerlink" title="SCARD"></a>SCARD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCARD s1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>
<h3 id="交集SINTER"><a href="#交集SINTER" class="headerlink" title="交集SINTER"></a>交集SINTER</h3><p>数据准备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD zs lisi wangwu zhouliu</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; SADD lisi wangwu mazi ergou</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SINTER zs lisi</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="差集SDIFF"><a href="#差集SDIFF" class="headerlink" title="差集SDIFF"></a>差集SDIFF</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SDIFF zs lisi</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhouliu&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="并集SUNION"><a href="#并集SUNION" class="headerlink" title="并集SUNION"></a>并集SUNION</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUNION zs lisi</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhouliu&quot;</span></span><br><span class="line">4) <span class="string">&quot;mazi&quot;</span></span><br><span class="line">5) <span class="string">&quot;ergou&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p>
<p>SortedSet具备下列特性：</p>
<ul>
<li>可排序</li>
<li>元素不重复</li>
<li>查询速度快</li>
</ul>
<p>因为SortedSet的可排序特性，<strong>经常被用来实现排行榜这样的功能</strong>。</p>
<p>SortedSet的常见命令有：</p>
<ul>
<li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li>
<li>ZREM key member：删除sorted set中的一个指定元素</li>
<li>ZSCORE key member : 获取sorted set中的指定元素的score值</li>
<li>ZRANK key member：获取sorted set 中的指定元素的排名</li>
<li>ZCARD key：获取sorted set中的元素个数</li>
<li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li>
<li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li>
<li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li>
<li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li>
<li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li>
</ul>
<p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p>
<ul>
<li><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p>
</li>
<li><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p>
</li>
</ul>
<h3 id="ZADD"><a href="#ZADD" class="headerlink" title="ZADD"></a>ZADD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD students 85 jack 89 lucy 82 rose 95 tom 78 jerry 92 amy 76 miles</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br></pre></td></tr></table></figure>
<h3 id="ZREM"><a href="#ZREM" class="headerlink" title="ZREM"></a>ZREM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREM students tom</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h3 id="ZSCORE"><a href="#ZSCORE" class="headerlink" title="ZSCORE"></a>ZSCORE</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore students amy</span><br><span class="line"><span class="string">&quot;92&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="ZRANK"><a href="#ZRANK" class="headerlink" title="ZRANK"></a>ZRANK</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/18/65612_image-20240118105909641.png" alt="image-20240118105909641" style="zoom: 80%;" /></p>
<p>从低到高排名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANK students amy</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>
<p>从高到底排名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANK students amy</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<h3 id="ZCARD"><a href="#ZCARD" class="headerlink" title="ZCARD"></a>ZCARD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZCARD students</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure>
<h3 id="ZCOUNT"><a href="#ZCOUNT" class="headerlink" title="ZCOUNT"></a>ZCOUNT</h3><p>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZCOUNT students 0 90</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>
<h3 id="ZINCRBY"><a href="#ZINCRBY" class="headerlink" title="ZINCRBY"></a>ZINCRBY</h3><p>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZINCRBY students 2  amy</span><br><span class="line"><span class="string">&quot;94&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="ZRANGE"><a href="#ZRANGE" class="headerlink" title="ZRANGE"></a>ZRANGE</h3><p>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素（升序）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGE students 0 3</span><br><span class="line">1) <span class="string">&quot;amy&quot;</span></span><br><span class="line">2) <span class="string">&quot;lucy&quot;</span></span><br><span class="line">3) <span class="string">&quot;jack&quot;</span></span><br><span class="line">4) <span class="string">&quot;rose&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="ZRANGEBYSCORE"><a href="#ZRANGEBYSCORE" class="headerlink" title="ZRANGEBYSCORE"></a>ZRANGEBYSCORE</h3><p>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</p>
<p>查找80分以下的同学</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE students 0 80</span><br><span class="line">1) <span class="string">&quot;miles&quot;</span></span><br><span class="line">2) <span class="string">&quot;jerry&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 数据访问</title>
    <url>/2024/01/16/springboot3/springboot3_%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes-尚硅谷</a></p>
<span id="more"></span>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdb2205</span><br></pre></td></tr></table></figure>
<h2 id="新建module"><a href="#新建module" class="headerlink" title="新建module"></a>新建module</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/03/61239_image-20240103152054170.png" alt="image-20240103152054170"></p>
<h2 id="整合SSM场景"><a href="#整合SSM场景" class="headerlink" title="整合SSM场景"></a>整合SSM场景</h2><ol>
<li>创建SSM整合项目</li>
<li>配置数据源</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">hdb2205</span></span><br></pre></td></tr></table></figure>
<p>安装MyBatisX 插件，帮我们生成Mapper接口的xml文件即可</p>
<ol>
<li><code>Boot305SsmApplication</code>加入<code>@MapperScan</code>注释</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com/hdb/boot/boot3/ssm/mapper&quot;)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2、配置整合MyBatis</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="comment"># 打开驼峰命名规则，mysql和java中的变量名字命名规则不同</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><ol>
<li><strong>导入</strong> <code>mybatis-spring-boot-starter</code></li>
<li>配置<strong>数据源</strong>信息</li>
<li>配置mybatis的<code>**mapper接口扫描**</code>与<code>**xml映射文件扫描**</code></li>
<li>编写bean，mapper，生成xml，编写sql 进行crud。<strong>事务等操作依然和Spring中用法一样</strong></li>
<li><p>效果：</p>
</li>
<li><ol>
<li>所有sql写在xml中</li>
<li>所有<code>mybatis配置</code>写在<code>application.properties</code>下面</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 web开发</title>
    <url>/2024/01/16/springboot3/springboot3_web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes</a></p>
<span id="more"></span>
<h2 id="xmind文件打开网址"><a href="#xmind文件打开网址" class="headerlink" title="xmind文件打开网址"></a>xmind文件打开网址</h2><p><a href="https://mubu.com/app/edit/home/1IVQRB_zQ2b#m">幕布</a></p>
<h2 id="关闭占用端口的程序"><a href="#关闭占用端口的程序" class="headerlink" title="关闭占用端口的程序"></a>关闭占用端口的程序</h2><p>查看占用端口的程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr 8080</span><br></pre></td></tr></table></figure>
<p>使用命令关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill -PID 进程号 -F</span><br></pre></td></tr></table></figure>
<h2 id="springboot3-识别不了新module"><a href="#springboot3-识别不了新module" class="headerlink" title="springboot3 识别不了新module"></a>springboot3 识别不了新module</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><ol>
<li>Remove Module</li>
<li>选中未识别的module</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/30/60877_image-20231130103414289.png" alt="image-20231130103414289"></p>
<ol>
<li><code>import module from external model----&gt;maven</code></li>
</ol>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><ol>
<li>右击 项目名，选择“ Add Framework Support”</li>
<li>选中<code>maven</code></li>
</ol>
<h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用</strong></p>
<p><strong>特性：</strong></p>
<ul>
<li><p>快速创建独立 Spring 应用</p>
</li>
<li><ul>
<li>SSM：导包、写配置、启动运行</li>
</ul>
</li>
<li><p>直接嵌入Tomcat、Jetty or Undertow（无需部署 war 包）【Servlet容器】</p>
</li>
<li><ul>
<li>linux  java tomcat mysql： war 放到 tomcat 的 webapps下</li>
<li>jar： java环境；  java -jar</li>
</ul>
</li>
<li><p><strong>重点</strong>：提供可选的starter，简化应用<strong>整合</strong></p>
</li>
<li><ul>
<li><strong>场景启动器</strong>（starter）：web、json、邮件、oss（对象存储）、异步、定时任务、缓存…</li>
<li>导包一堆，控制好版本。</li>
<li>为每一种场景准备了一个依赖； <strong>web-starter。mybatis-starter</strong></li>
</ul>
</li>
<li><p><strong>重点：</strong>按需自动配置 Spring 以及 第三方库</p>
</li>
<li><ul>
<li>如果这些场景我要使用（生效）。这个场景的所有配置都会自动配置好。</li>
<li><strong>约定大于配置</strong>：每个场景都有很多默认配置。</li>
<li>自定义：配置文件中修改几项就可以</li>
</ul>
</li>
<li><p>提供生产级特性：如 监控指标、健康检查、外部化配置等</p>
</li>
<li><ul>
<li>监控指标、健康检查（k8s）、外部化配置</li>
</ul>
</li>
<li><p>无代码生成、无xml</p>
</li>
</ul>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol>
<li>创建新module</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/31077_image-20231122105332075.png" alt="image-20231122105332075"></p>
<ol>
<li>继承spring-boot-starter-parent，pom文件导入，刷新</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    所有springboot项目都必须继承自 spring-boot-starter-parent --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--        web开发的场景启动器 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/69206_image-20231122110019745.png" alt="image-20231122110019745"></p>
<ol>
<li>编写代码</li>
</ol>
<p>主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">//这是一个SpringBoot应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>编写controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>导入打包插件，并清空和打包</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/64700_image-20231122111309675.png" alt="image-20231122111309675" style="zoom:50%;" /></p>
<ol>
<li>找到打包文件，cmd命令输入<code>java -jar demo.jar</code>运行</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/33036_image-20231122112346584.png" alt="image-20231122112346584" style="zoom:50%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/13158_image-20231122112612576.png" alt="image-20231122112612576" style="zoom: 33%;" /></p>
<ol>
<li>修改端口8888，添加配置文件<code>application.properties</code>(模拟linux场景)</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/67131_image-20231122113212064.png" alt="image-20231122113212064"></p>
<p><img src="C:\data\mysoftware\Typora\typoraPicture\image-20231122113233472.png" alt="image-20231122113233472" style="zoom:50%;" /></p>
<p>端口变为8888</p>
<blockquote>
<p>windows场景下，idea的resource资源里添加<code>application.properties</code>（集中配置）</p>
</blockquote>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/82336_image-20231123095704294.png" alt="image-20231123095704294" style="zoom:50%;" /></p>
<h2 id="Spring-Initializr-创建向导"><a href="#Spring-Initializr-创建向导" class="headerlink" title="Spring Initializr 创建向导"></a>Spring Initializr 创建向导</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/21135_image-20231123112601446.png" alt="image-20231123112601446" style="zoom:50%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/77224_image-20231123100919524.png" alt="image-20231123100919524" style="zoom:50%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/20035_image-20231123100938497.png" alt="image-20231123100938497" style="zoom:50%;" /></p>
<h2 id="自定义依赖版本号"><a href="#自定义依赖版本号" class="headerlink" title="自定义依赖版本号"></a>自定义依赖版本号</h2><ul>
<li><p>利用maven的就近原则</p>
</li>
<li><ul>
<li>直接在<strong>导入依赖的时候声明版本</strong></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;8.0.31&lt;/version&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三方的jar包</p>
<ul>
<li>boot父项目没有管理的需要自行声明好</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="springboot的自动配置机制"><a href="#springboot的自动配置机制" class="headerlink" title="springboot的自动配置机制"></a>springboot的自动配置机制</h2><ol>
<li>springboot导入场景，容器中就会自动配置好这个场景的核心组件。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> SpringApplication.run(Boot302DemoApplication.class, args);</span><br><span class="line">        String[] names = ioc.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>默认的包扫描规则</li>
</ol>
<ul>
<li><code>@SpringBootApplication</code> 标注的类就是主程序类</li>
<li><p><strong>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</strong></p>
</li>
<li><p>@SpringBootApplication(scanBasePackages = “com.hdb”)</p>
</li>
<li><p><code>@ComponentScan(&quot;com.hdb&quot;)</code> 直接指定扫描的路径</p>
</li>
</ul>
<ol>
<li>配置默认值</li>
</ol>
<ul>
<li><strong>配置文件</strong>的所有配置项是和某个<strong>类的对象</strong>值进行一一绑定的。</li>
<li><p>绑定了配置文件中每一项值的类： <strong>属性类</strong>。</p>
</li>
<li><p><strong>按需加载自动配置</strong></p>
</li>
</ul>
<blockquote>
<p>导入场景<code>spring-boot-starter-web</code>，场景启动器除了会导入相关功能依赖，导入一个<code>spring-boot-starter</code>，是所有<code>starter</code>的<code>starter</code>，基础核心starter。<code>spring-boot-starter</code>导入了一个包 <code>spring-boot-autoconfigure</code>。包里面都是各种场景的<code>AutoConfiguration</code><strong>自动配置类</strong>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code>这个包，但是不是全都开启的。</p>
</blockquote>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p>组件默认是单实例的，使用<code>@Scope(&quot;prototype&quot;)</code>表面多实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">   <span class="meta">@Bean(&quot;userhaha&quot;)</span><span class="comment">//替代以前的Bean标签。 组件在容器中的名字默认是方法名，可以直接修改注解的值</span></span><br><span class="line">   <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setId(<span class="number">1L</span>);</span><br><span class="line">       user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>SpringBootConfiguration和Configuration差别不大，为了便于区分</p>
<h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(FastsqlException.class)</span></span><br></pre></td></tr></table></figure>
<p>使用@Import 导入第三方的组件,给容器中放指定类型的组件，组件的名字默认是全类名</p>
<h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><p><strong>@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</strong></p>
<p><strong>@ConditionalOnMissingClass：如果类路径中不存在这个类，则触发指定行为</strong></p>
<p><strong>@ConditionalOnBean：如果容器中存在这个Bean（组件），则触发指定行为</strong></p>
<p><strong>@ConditionalOnMissingBean：如果容器中不存在这个Bean（组件），则触发指定行为</strong></p>
<h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p> <strong>声明组件的属性和配置文件哪些前缀开始项进行绑定</strong></p>
<ol>
<li>@ConfigurationProperties(prefix = “pig”)使得通过配置文件可以给实列赋值（在Appconfig和Pig.java中均可加入）</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/13940_image-20231124110420990.png" alt="image-20231124110420990" style="zoom:50%;" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Appconfig.class </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pig <span class="title function_">pig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>@EnableConfigurationProperties：快速注册注解：</strong>在配置文件中标注</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/21048_image-20231124111538865.png" alt="image-20231124111538865" style="zoom:80%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/15073_image-20231124111604817.png" alt="image-20231124111604817" style="zoom:50%;" /></p>
<h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/51687_image-20231124105349873.png" alt="image-20231124105349873" style="zoom: 33%;" /></p>
<h2 id="自动setter-getter—-gt-Data"><a href="#自动setter-getter—-gt-Data" class="headerlink" title="自动setter/getter—&gt;@Data"></a>自动setter/getter—&gt;@Data</h2><p>pom.xml中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        自动生成构造器、getter/setter、自动生成Builder模式等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>类中加入注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="properties的复杂对象标识"><a href="#properties的复杂对象标识" class="headerlink" title="properties的复杂对象标识"></a>properties的复杂对象标识</h2><p>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//自动生成JavaBean属性的getter/setter</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor //自动生成无参构造器</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor //自动生成全参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Boolean like;</span><br><span class="line">    <span class="keyword">private</span> Child child; <span class="comment">//嵌套对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; dogs; <span class="comment">//数组（里面是对象）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Cat&gt; cats; <span class="comment">//表示Map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件<code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">person.name</span>=<span class="string">张三</span></span><br><span class="line"><span class="attr">person.age</span>=<span class="string">18</span></span><br><span class="line"><span class="attr">person.birthDay</span>=<span class="string">2010/10/12 12:12:12</span></span><br><span class="line"><span class="attr">person.like</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">person.child.name</span>=<span class="string">李四</span></span><br><span class="line"><span class="attr">person.child.age</span>=<span class="string">12</span></span><br><span class="line"><span class="attr">person.child.birthDay</span>=<span class="string">2018/10/12</span></span><br><span class="line"><span class="attr">person.child.text[0]</span>=<span class="string">abc</span></span><br><span class="line"><span class="attr">person.child.text[1]</span>=<span class="string">def</span></span><br><span class="line"><span class="attr">person.dogs[0].name</span>=<span class="string">小黑</span></span><br><span class="line"><span class="attr">person.dogs[0].age</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">person.dogs[1].name</span>=<span class="string">小白</span></span><br><span class="line"><span class="attr">person.dogs[1].age</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">person.cats.c1.name</span>=<span class="string">小蓝</span></span><br><span class="line"><span class="attr">person.cats.c1.age</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">person.cats.c2.name</span>=<span class="string">小灰</span></span><br><span class="line"><span class="attr">person.cats.c2.age</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure>
<p>配置文件二：<code>application.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">birthDay:</span> <span class="number">2010</span><span class="string">/10/10</span> <span class="number">12</span><span class="string">:12:12</span></span><br><span class="line">  <span class="attr">like:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">child:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">李四</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">birthDay:</span> <span class="number">2018</span><span class="string">/10/10</span></span><br><span class="line"><span class="comment">#    数组的两种表示</span></span><br><span class="line">    <span class="attr">text:</span> [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>]</span><br><span class="line">  <span class="attr">dogs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小黑</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小白</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#  map的两种表示</span></span><br><span class="line">  <span class="attr">cats:</span></span><br><span class="line">    <span class="attr">c1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小蓝</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">c2:</span> &#123;<span class="attr">name:</span> <span class="string">小绿</span>,<span class="attr">age:</span> <span class="number">2</span>&#125; <span class="comment">#对象也可用&#123;&#125;表示</span></span><br></pre></td></tr></table></figure>
<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>以后每次勾选lombok，自动设置是set/get方法</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/30/22457_image-20231130100501188.png" alt="image-20231130100501188" style="zoom:50%;" /></p>
<p><strong>SpringBoot怎么把日志默认配置好的</strong></p>
<p>1、每个<code>starter</code>场景，都会导入一个核心场景<code>spring-boot-starter</code></p>
<p>2、核心场景引入了日志的所用功能<code>spring-boot-starter-logging</code></p>
<p>3、默认使用了<code>logback + slf4j</code> 组合作为默认底层日志</p>
<p>4、<code>日志是系统一启动就要用</code>，<code>xxxAutoConfiguration</code>是系统启动好了以后放好的组件，后来用的。</p>
<p>5、日志是利用<strong>监听器机制</strong>配置好的。<code>ApplicationListener</code>。</p>
<p>6、日志所有的配置都可以通过修改配置文件实现。以<code>logging</code>开始的所有配置。</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/30/68896_image.png" alt="image"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2023-11-30T10:30:46.701+08:00  INFO 7012 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]</span><br><span class="line">2023-11-30T10:30:46.707+08:00  INFO 7012 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br></pre></td></tr></table></figure>
<h3 id="修改日志格式"><a href="#修改日志格式" class="headerlink" title="修改日志格式"></a>修改日志格式</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;15&#125; ===&gt; %msg%n</span></span><br><span class="line"><span class="comment">#2023-11-30 10:45:00.046 INFO  [main] o.s.b.w.e.t.TomcatWebServer ===&gt; Tomcat initialized with port 8080 (http)</span></span><br></pre></td></tr></table></figure>
<p>只修改时间</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.pattern.dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 2023-11-30 10:51:33  INFO 20376 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]</span></span><br></pre></td></tr></table></figure>
<h3 id="插入日志"><a href="#插入日志" class="headerlink" title="插入日志"></a>插入日志</h3><h4 id="通过日志类"><a href="#通过日志类" class="headerlink" title="通过日志类"></a>通过日志类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>使用<code>@Slf4j</code>和默认的log</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;嘿嘿嘿&quot;</span>);</span><br><span class="line"><span class="comment">//        logger.info(&quot;哈哈哈&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul>
<li><p>由低到高：<code>ALL,TRACE, DEBUG, INFO, WARN, ERROR,FATAL,OFF</code>；</p>
</li>
<li><ul>
<li><strong>只会打印指定级别及以上级别的日志</strong></li>
<li>ALL：打印所有日志</li>
<li>TRACE：追踪框架详细流程日志，一般不使用</li>
<li>DEBUG：开发调试细节日志</li>
<li>INFO：关键、感兴趣信息日志</li>
<li>WARN：警告但不是错误的信息日志，比如：版本过时</li>
<li>ERROR：业务错误日志，比如出现各种异常</li>
<li>FATAL：致命错误日志，比如jvm系统崩溃</li>
<li>OFF：<strong>关闭所有日志记录</strong></li>
</ul>
</li>
</ul>
<h4 id="修改日志默认级别"><a href="#修改日志默认级别" class="headerlink" title="修改日志默认级别"></a>修改日志默认级别</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认所有日志没有精确指定级别就使用root的默认级别(info)</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">debug</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#精确调整某个包下的日志级别</span></span><br><span class="line"><span class="attr">logging.level.com.atguigu.logging.controller</span>=<span class="string">warn</span></span><br></pre></td></tr></table></figure>
<h4 id="日志分组"><a href="#日志分组" class="headerlink" title="日志分组"></a>日志分组</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.group.abc</span>=<span class="string">com.atguigu.logging.controller,com.atguigu.logging.service,com.aaa,com.bbb</span></span><br><span class="line"><span class="attr">logging.level.abc</span>=<span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging.level.sql</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>
<h4 id="指定日志文件的路径"><a href="#指定日志文件的路径" class="headerlink" title="指定日志文件的路径"></a>指定日志文件的路径</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.file.path</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>
<h4 id="指定日志文件的名"><a href="#指定日志文件的名" class="headerlink" title="指定日志文件的名"></a>指定日志文件的名</h4><p>指定日志文件的名： <strong>filename 和 path的配置同时存在只看filename</strong></p>
<p>1、只写名字： 就生成到当前项目同位置的 my.log</p>
<p>2、<strong>写名字+路径：生成到指定位置的指定文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.file.name</span>=<span class="string">demo.log</span></span><br></pre></td></tr></table></figure>
<h2 id="文件归档与滚动切割"><a href="#文件归档与滚动切割" class="headerlink" title="文件归档与滚动切割"></a>文件归档与滚动切割</h2><p>归档：每天的日志单独存到一个文档中。</p>
<p>切割：每个文件10MB，超过大小切割成另外一个文件。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#日志归档、切割</span></span><br><span class="line"><span class="attr">logging.logback.rollingpolicy.file-name-pattern</span>=<span class="string">$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz</span></span><br><span class="line"><span class="comment">#存档前，每个日志文件的最大大小</span></span><br><span class="line"><span class="attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="string">1MB</span></span><br></pre></td></tr></table></figure>
<p>上述皆为默认</p>
<h2 id="自定义日志"><a href="#自定义日志" class="headerlink" title="自定义日志"></a>自定义日志</h2><p><code>resource</code>下配置<code>logback-spring.xml</code>，会自动识别</p>
<h1 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h1><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>SpringBoot 已经默认配置好了<strong>Web开发</strong>场景常用功能。我们直接使用即可。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方式</th>
<th>用法</th>
<th>效果</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>全自动</strong></td>
<td>直接编写控制器逻辑</td>
<td></td>
<td>全部使用<strong>自动配置默认效果</strong></td>
</tr>
<tr>
<td><strong>手自一体</strong></td>
<td><code>@Configuration</code> +   配置<code>**WebMvcConfigurer**</code>+ <em>配置 WebMvcRegistrations</em></td>
<td><strong>不要标注</strong> <code>@**EnableWebMvc**</code></td>
<td><strong>保留自动配置效果</strong> <strong>手动设置部分功能</strong> 定义MVC底层组件</td>
</tr>
<tr>
<td><strong>全手动</strong></td>
<td><code>@Configuration</code> +   配置<code>**WebMvcConfigurer**</code></td>
<td><strong>标注</strong> <code>@**EnableWebMvc**</code></td>
<td><strong>禁用自动配置效果</strong> <strong>全手动设置</strong></td>
</tr>
</tbody>
</table>
</div>
<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><h3 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h3><p>静态资源映射规则在 WebMvcAutoConfiguration 中进行了定义：</p>
<ol>
<li><code>/webjars/**</code> 的所有路径 资源都在 <code>classpath:/META-INF/resources/webjars/</code></li>
<li><code>/**</code> 的所有路径 资源都在 <code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code></li>
</ol>
<blockquote>
<p>所有静态资源都定义了缓存规则。【浏览器访问过一次，就会缓存一段时间】，但此功能参数无默认值</p>
</blockquote>
<h3 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h3><p>在静态资源目录下找 favicon.ico，放入static目录下，网页自动变成对应ico，记住<code>ctr + F5</code>刷新缓存</p>
<h3 id="缓存实验"><a href="#缓存实验" class="headerlink" title="缓存实验"></a>缓存实验</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启静态资源映射规则</span></span><br><span class="line"><span class="attr">spring.web.resources.add-mappings</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置缓存</span></span><br><span class="line"><span class="comment">#spring.web.resources.cache.period=3600</span></span><br><span class="line"><span class="comment">##缓存详细合并项控制，覆盖period配置：</span></span><br><span class="line"><span class="comment">## 浏览器第一次请求服务器，服务器告诉浏览器此资源缓存7200秒，7200秒以内的所有此资源访问不用发给服务器请求，7200秒以后发请求给服务器</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="string">7200</span></span><br></pre></td></tr></table></figure>
<h3 id="静态资源自定义配置"><a href="#静态资源自定义配置" class="headerlink" title="静态资源自定义配置"></a>静态资源自定义配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 共享缓存</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.cache-public</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自定义静态资源文件夹位置</span></span><br><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/a/,classpath:/b/,classpath:/static/</span></span><br><span class="line"><span class="comment">### 2.1. 自定义webjars路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.webjars-path-pattern</span>=<span class="string">/wj/**</span></span><br><span class="line"><span class="comment">### 2.2. 静态资源访问路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br></pre></td></tr></table></figure>
<h3 id="代码方式静态资源自定义配置"><a href="#代码方式静态资源自定义配置" class="headerlink" title="代码方式静态资源自定义配置"></a>代码方式静态资源自定义配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//保留以前规则</span></span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己写新的规则。</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>,<span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自己的规则，保留<code>/static/下</code>访问，同时支持自定义下<code>/a</code>、<code>/b</code>的访问，浏览器直接输入文件名，或者<code>static/3.jpg</code></p>
</blockquote>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/14/37416_image-20231214203646707.png" alt="image-20231214203646707"></p>
<h4 id="为什么容器中放一个WebMvcConfigurer就能配置底层行为"><a href="#为什么容器中放一个WebMvcConfigurer就能配置底层行为" class="headerlink" title="为什么容器中放一个WebMvcConfigurer就能配置底层行为"></a>为什么容器中放一个WebMvcConfigurer就能配置底层行为</h4><ol>
<li>WebMvcAutoConfiguration 是一个自动配置类，它里面有一个 <code>EnableWebMvcConfiguration</code></li>
<li><code>EnableWebMvcConfiguration</code>继承与 <code>DelegatingWebMvcConfiguration</code>，这两个都生效</li>
<li><code>DelegatingWebMvcConfiguration</code>利用 DI 把容器中 所有 <code>WebMvcConfigurer</code>注入进来</li>
<li>别人调用 <code>DelegatingWebMvcConfiguration</code> 的方法配置底层规则，而它调用所有 <code>WebMvcConfigurer</code>的配置底层方法。</li>
</ol>
<h2 id="PathPatternParser风格路径"><a href="#PathPatternParser风格路径" class="headerlink" title="PathPatternParser风格路径"></a>PathPatternParser风格路径</h2><ul>
<li><p>默认使用新版 <code>PathPatternParser</code>进行路径匹配<em>，</em>不能匹配 <code>**</code> 在中间的情况，剩下的和 <code>antPathMatcher</code>语法兼容</p>
</li>
<li><p>中间有<code>**</code> ，报错，<code>Fix this pattern in your application or switch to the legacy parser implementation with &#39;spring.mvc.pathmatch.matching-strategy=ant_path_matcher&#39;.</code></p>
<blockquote>
<p>spring.mvc.pathmatch.matching-strategy=ant_path_matcher</p>
</blockquote>
</li>
</ul>
<h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/14/85200_image-1702559859264-1.png" alt="image" style="zoom: 80%;" /></p>
<p>  1.1. 基于请求头内容协商：<strong>（默认开启）</strong><br>    1.1.1. 客户端向服务端发送请求，携带HTTP标准的Accept请求头。<br>      1.1.1.1. Accept: application/json、text/xml、text/yaml<br>      1.1.1.2. 服务端根据客户端请求头期望的数据类型进行动态返回<br>  1.2. 基于请求参数内容协商：<strong>（需要开启）</strong><br>    1.2.1. 发送请求 GET /projects/spring-boot?<code>format=json</code><br>    1.2.2. 匹配到 @GetMapping(“/projects/spring-boot”)<br>    1.2.3. 根据参数协商，优先返回 json 类型数据【需要开启参数匹配设置】<br>    1.2.4. 发送请求 GET /projects/spring-boot?format=xml,优先返回 xml 类型数据</p>
<ol>
<li><p>引入支持写出xml内容依赖</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标注注解</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JacksonXmlRootElement</span>  <span class="comment">// 可以写出为xml文档</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>开启基于请求参数的内容协商</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启基于请求参数的内容协商功能。 默认参数名：format</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定内容协商时使用的参数名。默认是 format</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/14/16124_image-20231214214334717.png" alt="image-20231214214334717"></p>
<h3 id="自定义内容返回"><a href="#自定义内容返回" class="headerlink" title="自定义内容返回"></a>自定义内容返回</h3><p><code>@ResponseBody</code>由<code>HttpMessageConverter</code>处理</p>
<ol>
<li><p>如果controller方法的返回值标注了 <code>@ResponseBody</code>注解</p>
</li>
<li><ol>
<li>请求进来先来到<code>DispatcherServlet</code>的<code>doDispatch()</code>进行处理</li>
<li>找到一个 <code>HandlerAdapter</code>适配器。利用适配器执行目标方法</li>
<li><code>RequestMappingHandlerAdapter</code>来执行，调用<code>invokeHandlerMethod（）</code>来执行目标方法</li>
<li>目标方法执行之前，准备好两个东西</li>
</ol>
</li>
<li><ol>
<li><ol>
<li><code>HandlerMethodArgumentResolver</code>：参数解析器，确定目标方法每个参数值</li>
<li><code>HandlerMethodReturnValueHandler</code>：返回值处理器，确定目标方法的返回值改怎么处理</li>
</ol>
</li>
</ol>
</li>
<li><ol>
<li><code>RequestMappingHandlerAdapter</code> 里面的<code>invokeAndHandle()</code>真正执行目标方法</li>
<li>目标方法执行完成，会返回<strong>返回值对象</strong></li>
<li><strong>找到一个合适的返回值处理器</strong> <code>HandlerMethodReturnValueHandler</code></li>
<li>最终找到 <code>RequestResponseBodyMethodProcessor</code>能处理 标注了 <code>@ResponseBody</code>注解的方法</li>
<li><code>RequestResponseBodyMethodProcessor</code> 调用<code>writeWithMessageConverters</code>,利用<code>MessageConverter</code>把返回值写出去</li>
</ol>
</li>
</ol>
<h3 id="使用yaml返回"><a href="#使用yaml返回" class="headerlink" title="使用yaml返回"></a>使用yaml返回</h3><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>把对象写出成YAML（<strong>展示，可忽略</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setId(<span class="number">1L</span>);</span><br><span class="line">        person.setUserName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        person.setEmail(<span class="string">&quot;aaa@qq.com&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">18</span>);</span><br><span class="line"><span class="comment">//        不写yaml文件开头</span></span><br><span class="line">        <span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>编写配置，新增一种内容形式</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增一种媒体类型</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br></pre></td></tr></table></figure>
<p>增加<code>HttpMessageConverter</code>组件，专门负责把对象写出为yaml格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">                <span class="comment">//自己写新的规则。</span></span><br><span class="line">                registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                        .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>, <span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                        .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span><span class="comment">//配置一个能把对象转为yaml的messageConverter</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">                <span class="comment">//这里是springboot默认配置的，如果不加@Bean注解，会报错。</span></span><br><span class="line">                converters.add(<span class="keyword">new</span> <span class="title class_">MyYamlHttpMessageConverter</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyYamlHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title class_">AbstractHttpMessageConverter</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//把对象转成yaml</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyYamlHttpMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//告诉SpringBoot这个MessageConverter支持哪种媒体类型  //媒体类型</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">MediaType</span>(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;yaml&quot;</span>, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line">        <span class="built_in">this</span>.mapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">//只要是对象类型，不是基本类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">readInternal</span><span class="params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//@ResponseBody 把对象怎么写出去</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">writeInternal</span><span class="params">(Object methodReturnValue, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class="line">        <span class="comment">//try-with写法，自动关流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">body</span> <span class="operator">=</span> outputMessage.getBody()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.mapper.writeValue(body, methodReturnValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>配置媒体类型支持: </p>
</li>
<li><ul>
<li><code>spring.mvc.contentnegotiation.media-types.yaml=text/yaml</code></li>
</ul>
</li>
<li><p>编写对应的<code>HttpMessageConverter</code>，要告诉Boot这个支持的媒体类型</p>
</li>
<li><ul>
<li>按照<code>MyYamlHttpMessageConverter</code>的示例</li>
</ul>
</li>
<li><p>把MessageConverter组件加入到底层</p>
</li>
<li><ul>
<li>容器中放一个<code>WebMvcConfigurer</code> 组件，并配置底层的<code>MessageConverter</code></li>
</ul>
</li>
</ul>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/1613913/1681354523290-b89d7e0d-b9aa-40f5-8d22-d3d09d02b136.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_5bCa56GF6LC3IGF0Z3VpZ3UuY29t%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png"></p>
<h3 id="thymeleaf初试"><a href="#thymeleaf初试" class="headerlink" title="thymeleaf初试"></a>thymeleaf初试</h3><p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WelcomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;well&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String name, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>welcome.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>span 标签的作用是用于显示文本内容，并可以通过 th:text 指令将变量的值替换为文本内容。</p>
</blockquote>
<h3 id="thymeleaf基础语法"><a href="#thymeleaf基础语法" class="headerlink" title="thymeleaf基础语法"></a>thymeleaf基础语法</h3><ol>
<li><code>th:xxx</code>：动态渲染指定的 html 标签属性值、或者th指令（遍历、判断等）</li>
</ol>
<p>● th:text：将一切内容都识别为纯文本，不会对 HTML 标签进行解析。<br>  ○ th:utext：会对 HTML 标签进行解析，并将其生效。。<br>● th:属性：标签指定属性渲染<br>● th:attr：标签任意属性渲染<br>● th:ifth:each…：其他th指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/18/27187_image-20231218105441046.png" alt="image-20231218105441046"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:任意html属性</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;imgUrl&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;4.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;imgUrl&quot;</span>,<span class="string">&quot;static/3.jpg&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;width: 400px&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th：其他指令</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;imgUrl&#125;&quot;</span> <span class="attr">th:style</span>=<span class="string">&quot;$&#123;style&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;show&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;show&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h3 id="自动添加根路径"><a href="#自动添加根路径" class="headerlink" title="自动添加根路径"></a>自动添加根路径</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目的根路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/demo</span></span><br></pre></td></tr></table></figure>
<p>在浏览器输入url：<code>/demo/well</code>后，自动在路径下加载<code>/demo/static/3.jpg</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">2.jpg  @&#123;&#125; 专门用来取各种路径</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/3.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:300px;&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/3.jpg&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        List&lt;Person&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>, <span class="string">&quot;张三1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">15</span>, <span class="string">&quot;pm&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3L</span>, <span class="string">&quot;张三2&quot;</span>, <span class="string">&quot;zs2@qq.com&quot;</span>, <span class="number">16</span>, <span class="string">&quot;pm&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">4L</span>, <span class="string">&quot;张三333&quot;</span>, <span class="string">&quot;zs3@qq.com&quot;</span>, <span class="number">17</span>, <span class="string">&quot;pm&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">7L</span>, <span class="string">&quot;张三444&quot;</span>, <span class="string">&quot;zs4@qq.com&quot;</span>, <span class="number">18</span>, <span class="string">&quot;admin&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">8L</span>, <span class="string">&quot;张三5&quot;</span>, <span class="string">&quot;zs5@qq.com&quot;</span>, <span class="number">19</span>, <span class="string">&quot;hr&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        model.addAttribute(<span class="string">&quot;persons&quot;</span>,list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int i = 10/0;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>角色<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>状态信息<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;person,stats:$&#123;persons&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;person.email&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;person.age&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.role&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            index:[[$&#123;stats.index&#125;]]<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            count:[[$&#123;stats.count&#125;]]<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            size(总数量):[[$&#123;stats.size&#125;]]<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            current(当前对象): [[$&#123;stats.current&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            even(true)/odd(false): [[$&#123;stats.even&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            first: [[$&#123;stats.first&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            last: [[$&#123;stats.last&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/20/32173_image-20231220110146251.png" alt="image-20231220110146251" style="zoom: 67%;" /></p>
<blockquote>
<p>可以在bootstrap上复制渲染的css，js链接，点击docss查找</p>
</blockquote>
<p><strong>iterStat 有以下属性：</strong></p>
<ul>
<li>index：当前遍历元素的索引，从0开始</li>
<li>count：当前遍历元素的索引，从1开始</li>
<li>size：需要遍历元素的总数量</li>
<li>current：当前正在遍历的元素对象</li>
<li>even/odd：是否偶数/奇数行</li>
<li>first：是否第一个元素</li>
<li>last：是否最后一个元素</li>
</ul>
<h4 id="th-switch"><a href="#th-switch" class="headerlink" title="th:switch"></a>th:switch</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;person.role&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;pm&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>项目经理<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;hr&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>人事<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="th-if"><a href="#th-if" class="headerlink" title="th:if"></a>th:if</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#strings.isEmpty(person.email)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;联系不上&#x27;&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(person.email)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.email&#125;&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h4><ul>
<li>片段</li>
<li>遍历</li>
<li>判断</li>
</ul>
<h4 id="对象选择"><a href="#对象选择" class="headerlink" title="对象选择"></a>对象选择</h4><p>用<code>*</code>选择遍历的对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;person,stats:$&#123;persons&#125;&quot;</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;person&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td th:text=&quot;$&#123;person.userName&#125;&quot;&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要在遍历那里加入 <code>th:object=&quot;$&#123;person&#125;</code>，然后用<code>*</code>代替：<code>th:text=&quot;*&#123;userName&#125;&quot;</code></p>
<h3 id="模板布局"><a href="#模板布局" class="headerlink" title="模板布局"></a>模板布局</h3><ul>
<li>定义模板： <code>th:fragment</code></li>
</ul>
<p><strong>commom.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取的判断，名字叫 myheader--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:fragment</span>=<span class="string">&quot;myheader&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p-3 text-bg-dark&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>引用模板：<code>~&#123;templatename::selector&#125;</code></li>
</ul>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导航  使用公共部分进行替换--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  ~&#123; 模板名 :: 片段名&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;common::myheader&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="热启动"><a href="#热启动" class="headerlink" title="热启动"></a>热启动</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--热启动功能 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>Spring Boot 在类路径根下查找<code>messages</code>资源绑定文件。文件名为：<code>messages.properties</code></p>
<p>多语言可以定义多个消息文件，命名为messages_区域代码.properties。如：</p>
<ul>
<li>messages.properties：默认</li>
<li>messages_zh_CN.properties：中文环境</li>
<li>messages_en_US.properties：英语环境</li>
</ul>
<p>在程序中可以自动注入 MessageSource组件，获取国际化的配置项值</p>
<p>在页面中可以使用表达式  <code>#&#123;&#125;</code>获取国际化的配置项值</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/25/99634_image-20231225111916158.png" alt="image-20231225111916158"></p>
<p><strong>message.properties</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/25/54508_image-20231225111952638.png" alt="image-20231225111952638"></p>
<p><strong>messages_zh_CN.properties</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/25/39480_image-20231225112104173.png" alt="image-20231225112104173"></p>
<p><strong>common.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--国际化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-light me-2&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;sign&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/svg/1613913/1681723795095-828d2034-1e6c-4d98-8e47-573dd6b5463b.svg" alt="未命名绘图.svg" style="zoom:67%;" /></p>
<h3 id="默认机制"><a href="#默认机制" class="headerlink" title="默认机制"></a>默认机制</h3><p><strong>错误处理的自动配置</strong>都在<code>ErrorMvcAutoConfiguration</code>中，两大核心机制：</p>
<ul>
<li><ol>
<li>SpringBoot 会<strong>自适应**</strong>处理错误<strong>，</strong>响应页面<strong>或</strong>JSON数据**</li>
</ol>
</li>
<li><ol>
<li><strong>SpringMVC的错误处理机制</strong>依然保留，<strong>MVC处理不了</strong>，才会<strong>交给boot进行处理</strong></li>
</ol>
</li>
</ul>
<ul>
<li><p>发生错误以后，转发给/error路径，SpringBoot在底层写好一个 BasicErrorController的组件，专门处理这个请求</p>
</li>
<li><p>错误页面是这么解析到的</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、解析错误的自定义视图地址</span></span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="comment">//2、如果解析不到错误页面的地址，默认的错误页就是 error</span></span><br><span class="line"><span class="keyword">return</span> (modelAndView != <span class="literal">null</span>) ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br></pre></td></tr></table></figure>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol>
<li><p><strong>解析一个错误页</strong></p>
</li>
<li><p>a. 如果发生了500、404、503、403 这些错误</p>
</li>
<li><ol>
<li><ol>
<li>如果有<strong>模板引擎</strong>，默认在 <code>classpath:/templates/error/**精确码.html**</code></li>
<li>如果没有模板引擎，在静态资源文件夹下找  <code>**精确码.html**</code></li>
</ol>
</li>
</ol>
</li>
<li><p>b. 如果匹配不到<code>精确码.html</code>这些精确的错误页，就去找<code>5xx.html</code>，<code>4xx.html</code><strong>模糊匹配</strong></p>
</li>
<li><ol>
<li><ol>
<li>如果有模板引擎，默认在 <code>classpath:/templates/error/5xx.html</code></li>
<li>如果没有模板引擎，在静态资源文件夹下找  <code>5xx.html</code></li>
</ol>
</li>
</ol>
</li>
<li><p>如果模板引擎路径<code>templates</code>下有 <code>error.html</code>页面，就直接渲染</p>
</li>
</ol>
<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><ol>
<li><code>ServletWebServerFactoryAutoConfiguration</code> 自动配置了嵌入式容器场景</li>
<li>绑定了<code>ServerProperties</code>配置类，所有和服务器有关的配置 <code>server</code></li>
<li><p><code>ServletWebServerFactoryAutoConfiguration</code> 导入了 嵌入式的三大服务器 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code></p>
</li>
<li><ol>
<li>导入 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code> 都有条件注解。系统中有这个类才行（也就是导了包）</li>
<li>默认  <code>Tomcat</code>配置生效。给容器中放 TomcatServletWebServerFactory</li>
<li>都给容器中 <code>ServletWebServerFactory</code>放了一个 <strong>web服务器工厂（造web服务器的）</strong></li>
<li><strong>web服务器工厂 都有一个功能，</strong><code>getWebServer</code>获取web服务器</li>
<li>TomcatServletWebServerFactory 创建了 tomcat。</li>
</ol>
</li>
<li><p>ServletWebServerFactory 什么时候会创建 webServer出来。</p>
</li>
<li><code>ServletWebServerApplicationContext</code>ioc容器，启动的时候会调用创建web服务器</li>
<li>Spring<strong>容器刷新（启动）</strong>的时候，会预留一个时机，刷新子容器。<code>onRefresh()</code></li>
<li>refresh() 容器刷新 十二大步的刷新子容器会调用 <code>onRefresh()</code>；</li>
</ol>
<blockquote>
<p>Web场景的Spring容器启动，在onRefresh的时候，会调用创建web服务器的方法。</p>
<p>Web服务器的创建是通过WebServerFactory搞定的。容器中又会根据导了什么包条件注解，启动相关的 服务器配置，默认<code>EmbeddedTomcat</code>会给容器中放一个 <code>TomcatServletWebServerFactory</code>，导致项目启动，自动创建出Tomcat。</p>
</blockquote>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 基础特性</title>
    <url>/2024/01/16/springboot3/springboot3_%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="自定义-banner"><a href="#自定义-banner" class="headerlink" title="自定义 banner"></a>自定义 banner</h2><ol>
<li>类路径添加banner.txt或设置spring.banner.location就可以定制 banner</li>
<li>推荐网站：<a href="https://www.bootschool.net/ascii">Spring Boot banner 在线生成工具，制作下载英文 banner.txt，修改替换 banner.txt 文字实现自定义，个性化启动 banner-bootschool.net</a></li>
</ol>
<span id="more"></span>
<h2 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h2><p>1、标识环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）、区分出几个环境： dev（开发环境）、test（测试环境）、prod（生产环境）</span><br><span class="line">2）、指定每个组件在哪个环境下生效； default环境：默认环境</span><br><span class="line">	通过： @Profile(&#123;&quot;test&quot;&#125;)标注</span><br><span class="line">	组件没有标注@Profile代表任意时候都生效</span><br><span class="line">3）、默认只有激活指定的环境，这些组件才会生效。</span><br></pre></td></tr></table></figure>
<p>2、激活环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置文件激活：spring.profiles.active=dev；</span><br><span class="line">命令行激活： java -jar xxx.jar  --spring.profiles.active=dev</span><br><span class="line">集成环境如下图</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/04/72330_image-20240104164250109.png" alt="image-20240104164250109" style="zoom: 50%;" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--spring.profiles.active=dev</span><br></pre></td></tr></table></figure>
<p>3、环境包含</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#包含指定环境，不管你激活哪个环境，这个都要有。总是要生效的环境</span></span><br><span class="line"><span class="attr">spring.profiles.include</span>=<span class="string">prod</span></span><br></pre></td></tr></table></figure>
<h3 id="最佳实战"><a href="#最佳实战" class="headerlink" title="最佳实战"></a>最佳实战</h3><ul>
<li><strong>生效的环境</strong> = <strong>激活的环境/默认环境</strong>  + <strong>包含的环境</strong></li>
<li><p>项目里面这么用</p>
</li>
<li><ul>
<li>基础的配置<code>mybatis</code>、<code>log</code>、<code>xxx</code>：写到<strong>包含环境中</strong></li>
<li>需要动态切换变化的 <code>db</code>、<code>redis</code>：写到<strong>激活的环境中</strong></li>
</ul>
</li>
</ul>
<h3 id="Profile-分组"><a href="#Profile-分组" class="headerlink" title="Profile 分组"></a>Profile 分组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring.profiles.group.haha=db,<span class="built_in">log</span></span><br><span class="line">spring.profiles.group.hehe=mq</span><br></pre></td></tr></table></figure>
<h2 id="profile配置文件"><a href="#profile配置文件" class="headerlink" title="profile配置文件"></a>profile配置文件</h2><p>3、配置文件怎么使用Profile功能</p>
<p>1）、application.properties： 主配置文件。任何情况下都生效</p>
<p>2）、其他Profile环境下命名规范：  application-{profile标识}.properties：</p>
<p>比如：application-dev.properties</p>
<p>3）、激活指定环境即可：  配置文件激活、命令行激活</p>
<p>4）、效果：</p>
<p><strong>项目的所有生效配置项 = 激活环境配置文件的所有项 + 主配置文件和激活文件不冲突的所有项</strong></p>
<p><strong>如果发生了配置冲突，以激活的环境配置文件为准。</strong></p>
<p>application-{profile标识}.properties 优先级高于 application.properties</p>
<p>主配置和激活的配置都生效，优先以激活的配置为准</p>
<h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p>命令行<code>&gt;</code>配置文件<code>&gt;</code>springapplication配置</p>
<p><strong>配置文件优先级</strong>如下：(<strong>后面覆盖前面</strong>)</p>
<ol>
<li><strong>jar 包内</strong>的application.properties/yml</li>
<li><strong>jar 包内</strong>的application-{profile}.properties/yml</li>
<li><strong>jar 包外</strong>的application.properties/yml</li>
<li><strong>jar 包外</strong>的application-{profile}.properties/yml</li>
</ol>
<p>最终效果：优先级由高到低，前面覆盖后面</p>
<p>命令行 &gt; 包外config直接子目录 &gt; 包外config目录 &gt; 包外根目录 &gt; 包内目录</p>
<p><img src="C:\data\mysoftware\Typora\typoraPicture\未命名绘图.svg" alt="未命名绘图"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/svg/1613913/1682073869709-2cba18c8-55bd-4bf1-a9df-ac784e30d89a.svg" alt="未命名绘图.svg"></p>
<h2 id="属性占位符"><a href="#属性占位符" class="headerlink" title="属性占位符"></a>属性占位符</h2><p>配置文件中可以使用 <code>$&#123;name:default&#125;</code>形式取出之前配置过的值。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.name</span>=<span class="string">MyApp</span></span><br><span class="line"><span class="attr">app.description</span>=<span class="string">$&#123;app.name&#125; is a Spring Boot application written by $&#123;username:Unknown&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;app.name:中国mooc&#125;&quot;)</span></span><br><span class="line">String appName;</span><br></pre></td></tr></table></figure>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>@SpringBootTest</p>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建小技巧</title>
    <url>/2024/01/16/tips/blogs/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h2><p>只需要输入命令：<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;</code></p>
<span id="more"></span>
<h3 id="博客预览"><a href="#博客预览" class="headerlink" title="博客预览"></a>博客预览</h3><p>加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
<p>实现预览分割</p>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>picture</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 核心原理</title>
    <url>/2024/01/16/springboot3/springboot3_%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes</a></p>
<span id="more"></span>
<h2 id="事件和监听器"><a href="#事件和监听器" class="headerlink" title="事件和监听器"></a>事件和监听器</h2><ol>
<li><p>自定义<code>SpringApplicationRunListener</code>来<strong>监听事件</strong>；</p>
</li>
<li><ol>
<li>编写<code>SpringApplicationRunListener</code> <strong>实现类</strong></li>
<li>在 <code>META-INF/spring.factories</code> 中配置 <code>org.springframework.boot.SpringApplicationRunListener=自己的Listener</code>，还可以指定一个<strong>有参构造器</strong>，接受两个参数<code>(SpringApplication application, String[] args)</code></li>
</ol>
</li>
<li><pre><code class="lang-properties"># spring.factories
org.springframework.boot.SpringApplicationRunListener=com.hdb.core.listener.MyAppListener
</code></pre>
</li>
<li><ol>
<li>springboot 在<code>spring-boot.jar</code>中配置了默认的 事件监听器</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Listener 先要从 META-INF/spring.factories 读到</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1、引导： 利用 BootstrapContext 引导整个项目启动</span></span><br><span class="line"><span class="comment"> *      starting：              应用开始，SpringApplication的run方法一调用，只要有了 BootstrapContext 就执行</span></span><br><span class="line"><span class="comment"> *      environmentPrepared：   环境准备好（把启动参数等绑定到环境变量中），但是ioc还没有创建；【调一次】</span></span><br><span class="line"><span class="comment"> * 2、启动：</span></span><br><span class="line"><span class="comment"> *      contextPrepared：       ioc容器创建并准备好，但是sources（主配置类）没加载。并关闭引导上下文；组件都没创建  【调一次】</span></span><br><span class="line"><span class="comment"> *      contextLoaded：         ioc容器加载。主配置类加载进去了。但是ioc容器还没刷新（我们的bean没创建）。</span></span><br><span class="line"><span class="comment"> *      =======截止以前，ioc容器里面还没造bean呢=======</span></span><br><span class="line"><span class="comment"> *      started：               ioc容器刷新了（所有bean造好了），但是 runner 没调用。</span></span><br><span class="line"><span class="comment"> *      ready:                  ioc容器刷新了（所有bean造好了），所有runner调用完了。</span></span><br><span class="line"><span class="comment"> * 3、运行</span></span><br><span class="line"><span class="comment"> *     以前步骤都正确执行，代表容器running。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="生命周期全流程"><a href="#生命周期全流程" class="headerlink" title="生命周期全流程"></a>生命周期全流程</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/04/28084_image-1704377032144-1.png" alt="image"></p>
<h2 id="事件触发时机"><a href="#事件触发时机" class="headerlink" title="事件触发时机"></a>事件触发时机</h2><ul>
<li><p><strong>ApplicationListener：    感知全阶段：基于事件机制，感知事件。 一旦到了哪个阶段可以做别的事</strong></p>
</li>
<li><ul>
<li><code>@Bean</code>或<code>@EventListener</code>： <code>事件驱动</code></li>
<li><code>SpringApplication.addListeners(…)</code>或 <code>SpringApplicationBuilder.listeners(…)</code></li>
<li><code>META-INF/spring.factories</code></li>
</ul>
</li>
<li><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/05/68286_image-1704437922998-1.png" alt="image"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====事件====到达====&quot;</span>+event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">com.hdb.core.listener.MyListener</span></span><br></pre></td></tr></table></figure>
<p>应用事件发送顺序如下：</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/05/52391_image 2.png" alt="image 2"></p>
<h2 id="SpringBoot-事件驱动开发"><a href="#SpringBoot-事件驱动开发" class="headerlink" title="SpringBoot 事件驱动开发"></a>SpringBoot 事件驱动开发</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/05/31052_image3.png" alt="image3"></p>
<h3 id="事件发布者"><a href="#事件发布者" class="headerlink" title="事件发布者"></a>事件发布者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventPublisher</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span> &#123;</span><br><span class="line">    ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有事件都可以发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">//调用底层API发送事件</span></span><br><span class="line">        applicationEventPublisher.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会被自动调用，把真正发事件的底层组组件给我们注入进来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationEventPublisher event publisher to be used by this object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="登录成功事件"><a href="#登录成功事件" class="headerlink" title="登录成功事件"></a>登录成功事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录成功事件。所有事件都推荐继承 ApplicationEvent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  代表是谁登录成了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginSuccessEvent</span><span class="params">(UserEntity source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="service监听"><a href="#service监听" class="headerlink" title="service监听"></a>service监听</h3><p>方法一实现ApplicationListener接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span>  <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;LoginSuccessEvent&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAccountScore</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        System.out.println(username +<span class="string">&quot; 加了1分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(LoginSuccessEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====  AccountService  收到事件 =====&quot;</span>);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) event.getSource();</span><br><span class="line">        addAccountScore(source.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二，<code>@EventListener</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(LoginSuccessEvent loginSuccessEvent)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===== CouponService ====感知到事件&quot;</span>+loginSuccessEvent);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) loginSuccessEvent.getSource();</span><br><span class="line">        sendCoupon(source.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCoupon</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot; 随机得到了一张优惠券&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CouponService couponService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysService sysService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;passwd&quot;)</span>String passwd)</span>&#123;</span><br><span class="line">        <span class="comment">//业务处理登录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;业务处理登录完成....&quot;</span>);</span><br><span class="line">        <span class="comment">//TODO 发送事件.</span></span><br><span class="line">        <span class="comment">//1、创建事件信息</span></span><br><span class="line">        <span class="type">LoginSuccessEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginSuccessEvent</span>(<span class="keyword">new</span> <span class="title class_">UserEntity</span>(username, passwd));</span><br><span class="line">        <span class="comment">//2、发送事件</span></span><br><span class="line">        eventPublisher.sendEvent(event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> username+<span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>在Java中，<strong>SPI</strong>的实现方式是通过在<code>META-INF/services</code>目录下创建一个以服务接口全限定名为名字的文件，文件中包含实现该服务接口的类的全限定名。当应用程序启动时，Java的SPI机制会自动扫描classpath中的这些文件，并根据文件中指定的类名来加载实现类。</p>
<p>在SpringBoot中，<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></p>
<h2 id="功能开关"><a href="#功能开关" class="headerlink" title="功能开关"></a>功能开关</h2><ul>
<li><p>自动配置：全部都配置好，什么都不用管。   自动批量导入</p>
</li>
<li><ul>
<li>项目一启动，spi文件中指定的所有都加载。</li>
</ul>
</li>
<li><p><code>@EnableXxxx</code>：手动控制哪些功能的开启； 手动导入。</p>
</li>
<li><ul>
<li>开启xxx功能</li>
<li>都是利用 @Import 把此功能要用的组件导入进去</li>
</ul>
</li>
</ul>
<h2 id="理解-SpringBootApplication"><a href="#理解-SpringBootApplication" class="headerlink" title="理解@SpringBootApplication"></a>理解@SpringBootApplication</h2><p><code>@SpringBootConfiguration</code></p>
<p>就是： @Configuration ，容器中的组件，配置类。spring ioc启动就会加载创建这个类对象</p>
<p><code>@AutoConfigurationPackage</code>：扫描主程序包：加载自己的组件</p>
<blockquote>
<ul>
<li>利用 <code>@Import(AutoConfigurationPackages.Registrar.class)</code> 想要给容器中导入组件。</li>
<li>把主程序所在的<strong>包</strong>的所有组件导入进来。</li>
</ul>
</blockquote>
<p><code>@Import(AutoConfigurationImportSelector.class)</code>：加载所有自动配置类：加载starter导入的组件</p>
<p><code>@ComponentScan</code><br>组件扫描：排除一些组件（哪些不要）<br>排除前面已经扫描进来的配置类、和自动配置类。</p>
<h2 id="完整启动加载流程"><a href="#完整启动加载流程" class="headerlink" title="完整启动加载流程"></a>完整启动加载流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/svg/1613913/1682569555020-b6cbc750-3171-44c6-810f-1c59e590b792.svg" alt="自动配置进阶原理.svg"></p>
<h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h2><h3 id="1-配置处理器（省略）"><a href="#1-配置处理器（省略）" class="headerlink" title="1. 配置处理器（省略）"></a>1. 配置处理器（省略）</h3><p>导入配置处理器，配置文件自定义的properties配置都会有提示</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>2023版默认已经有提示了</p>
</blockquote>
<h3 id="2-业务代码"><a href="#2-业务代码" class="headerlink" title="2. 业务代码"></a>2. 业务代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;robot&quot;)</span>  <span class="comment">//此属性类和配置文件指定前缀绑定</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-基本抽取"><a href="#3-1-基本抽取" class="headerlink" title="3.1 基本抽取"></a>3.1 基本抽取</h3><ul>
<li>创建starter项目，把公共代码需要的所有依赖导入</li>
</ul>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/08/22745_image-20240108195339109.png" alt="image-20240108195339109" style="zoom:67%;" /></p>
<ul>
<li>把公共代码复制进来</li>
<li><p>自己写一个 <code>RobotAutoConfiguration</code>，给容器中导入这个场景需要的所有组件</p>
</li>
<li><ul>
<li>为什么这些组件默认不会扫描进去？</li>
<li><strong>starter所在的包和引入它的项目的主程序所在的包不是父子层级</strong></li>
</ul>
</li>
<li><p>别人引用这个<code>starter</code>，直接导入这个 <code>RobotAutoConfiguration</code>,就能把这个场景的组件导入进来</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--        自定义starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hdb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot3-08-robot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>RobotAutoConfiguration</code>用<code>Import</code>导入了相关的组件，Boot306FeaturesApplication通过<code>Import</code>导入了<code>RobotAutoConfiguration</code>就可以使用robot相关服务了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>导入了(&#123;RobotController.class, RobotProperties.class, RobotService.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(RobotAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boot306FeaturesApplication</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-使用-EnableXxx机制"><a href="#3-2-使用-EnableXxx机制" class="headerlink" title="3.2 使用@EnableXxx机制"></a>3.2 使用@EnableXxx机制</h3><p>在robot-starter的包里再写一个申明接口，模仿<code>EnableWebMvc</code>写法，在Boot306FeaturesApplication上添加注释<code>@EnableRobot</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;RobotAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRobot &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/08/32500_image-20240108200942226.png" alt="image-20240108200942226" style="zoom:67%;" /></p>
<h3 id="3-3-完全自动配置"><a href="#3-3-完全自动配置" class="headerlink" title="3.3 完全自动配置"></a>3.3 完全自动配置</h3><ul>
<li>依赖SpringBoot的SPI机制</li>
<li>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports 文件中编写好我们自动配置类的全类名即可</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># org.springframework.boot.autoconfigure.AutoConfiguration.imports </span></span><br><span class="line"><span class="attr">com.hdb.boot3.starter.robot.RobotAutoConfiguration</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>git小技巧</title>
    <url>/2024/01/16/tips/git/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="git设置代理"><a href="#git设置代理" class="headerlink" title="git设置代理"></a>git设置代理</h2><span id="more"></span>
<h3 id="git中设置代理"><a href="#git中设置代理" class="headerlink" title="git中设置代理"></a>git中设置代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<h3 id="git取消代理"><a href="#git取消代理" class="headerlink" title="git取消代理"></a>git取消代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<h3 id="查询是否使用"><a href="#查询是否使用" class="headerlink" title="查询是否使用"></a>查询是否使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy </span><br><span class="line">git config --global https.proxy </span><br></pre></td></tr></table></figure>
<h2 id="git更新命令"><a href="#git更新命令" class="headerlink" title="git更新命令"></a>git更新命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-git-for-windows</span><br></pre></td></tr></table></figure>
<h3 id="idea中配置代理（可选？）"><a href="#idea中配置代理（可选？）" class="headerlink" title="idea中配置代理（可选？）"></a>idea中配置代理（可选？）</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/27/42136_image-20231127202015854.png" alt="image-20231127202015854" style="zoom: 67%;" /></p>
<p>7890是clash的端口</p>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>clion小技巧</title>
    <url>/2024/01/16/tips/clion/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="How-to-link-ws2-32-in-Clion"><a href="#How-to-link-ws2-32-in-Clion" class="headerlink" title="How to link ws2_32 in Clion"></a>How to link ws2_32 in Clion</h2><p>The following CMakeLists.txt compiled error-less. Only 1 line is really required: <code>link_libraries(ws2_32 wsock32)</code></p>
<span id="more"></span>]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>clion</tag>
      </tags>
  </entry>
  <entry>
    <title>idea小技巧</title>
    <url>/2024/01/18/tips/idea/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>idea一些小技巧和设置</p>
<span id="more"></span>
<h2 id="保存自动格式化"><a href="#保存自动格式化" class="headerlink" title="保存自动格式化"></a>保存自动格式化</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/18/76210_image-20240118190445354.png" alt="image-20240118190445354" style="zoom: 50%;" /></p>
<h2 id="idea中配置代理"><a href="#idea中配置代理" class="headerlink" title="idea中配置代理"></a>idea中配置代理</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/27/42136_image-20231127202015854.png" alt="image-20231127202015854" style="zoom: 67%;" /></p>
<p>7890是clash的端口</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTRL +ALT + t</span><br></pre></td></tr></table></figure>
<h3 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CTRL + I</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">CTRL + O</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>word小技巧</title>
    <url>/2024/01/17/tips/word/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>关于word写作时的一些小技巧记录。</p>
<span id="more"></span>
<h2 id="word交叉引用多个参考文献"><a href="#word交叉引用多个参考文献" class="headerlink" title="word交叉引用多个参考文献"></a>word交叉引用多个参考文献</h2><p>1、在交叉应用多个文件后：<code>[4][5][6][7]</code></p>
<p>2、选中参考文献，右击选择切换域代码</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/17/85877_image-20240117163758364.png" alt="image-20240117163758364"></p>
<p>3、在第一篇文献后添加 <code>\#“[0”</code>，最后一篇添加 <code>\#“0]”</code>，位于中间的文献添加 <code>#“”</code>，如上图</p>
<p>4、更新域</p>
<p>5、手动添加<code>-</code></p>
]]></content>
      <categories>
        <category>word</category>
      </categories>
      <tags>
        <tag>文书</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录-数组-链表-哈希表-指针-字符串-栈和队列-二叉树1</title>
    <url>/2024/01/16/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%951/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p><strong>本节包含：</strong></p>
<ul>
<li><strong>数组</strong></li>
<li><strong>链表</strong></li>
<li><strong>哈希表</strong></li>
<li><strong>字符串</strong></li>
<li><strong>双指针</strong></li>
<li><strong>栈和队列</strong></li>
<li><strong>二叉树（部分）</strong></li>
</ul>
<span id="more"></span>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span></span><br><span class="line"><span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[right]) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">displacement</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i+displacement &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] = nums[i + displacement];</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">                ++displacement;</span><br><span class="line">                <span class="keyword">if</span>(i+displacement&lt;nums.length)&#123;</span><br><span class="line">                    <span class="comment">//未考虑nums[i + displacement]=val</span></span><br><span class="line">                    nums[i] = nums[i + displacement];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length - displacement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用while循环"><a href="#使用while循环" class="headerlink" title="使用while循环"></a>使用while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(nums[i] == val) &#123;</span><br><span class="line">                ++displacement;</span><br><span class="line">                <span class="keyword">if</span>(i+displacement&lt;nums.length)&#123;</span><br><span class="line">                    nums[i] = nums[i + displacement];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用快慢指针"><a href="#使用快慢指针" class="headerlink" title="使用快慢指针"></a>使用快慢指针</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElementFastLowPoint</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (fastIndex = <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p>
<h3 id="法一：中间向两边"><a href="#法一：中间向两边" class="headerlink" title="法一：中间向两边"></a>法一：中间向两边</h3><p>找到平方值最小的数的index，向左右两边遍历比较</p>
<h3 id="法二：两边向中间遍历"><a href="#法二：两边向中间遍历" class="headerlink" title="法二：两边向中间遍历"></a>法二：两边向中间遍历</h3><p>比较左右两边的平方值，res[]从最后开始填充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sortedSquaresTwo(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r= nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span>  <span class="operator">=</span> nums.length-<span class="number">1</span>;<span class="comment">//新数组从最后开始填充</span></span><br><span class="line">        <span class="type">int</span> []res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>((nums[l]*nums[l])&lt;=nums[r]*nums[r])&#123;</span><br><span class="line">                res[k] = nums[r]*nums[r];</span><br><span class="line">                k--;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res[k] = nums[l]*nums[l];</span><br><span class="line">                k--;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p>
<p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> </p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p>
<p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p>
<p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）—-&gt;i++。</p>
<p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引——&gt;j++。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 滑动窗口起始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 滑动窗口数值之和</span></span><br><span class="line">        <span class="type">int</span> subStrLen;<span class="comment">// 滑动窗口的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="comment">// 注意这里使用while，每次更新 i（起始位置），并不断比较子序列是否符合条件</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                subStrLen = j - i + <span class="number">1</span>;</span><br><span class="line">                res = subStrLen &lt; res ? subStrLen : res;</span><br><span class="line">                sum -= nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res == Integer.MAX_VALUE)</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h2><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>循环不变量原则</strong></p>
<p>模拟顺时针画矩阵的过程:</p>
<ul>
<li>填充上行从左到右</li>
<li>填充右列从上到下</li>
<li>填充下行从右到左</li>
<li>填充左列从下到上</li>
</ul>
<p>由外向内一圈一圈这么画下去。</p>
<p>这里一圈下来，我们要画每四条边，这四条边怎么画，每画一条边都要坚持一致的左闭右开，或者左开右闭的原则，这样这一圈才能按照统一的规则画下来。</p>
<p>按照左闭右开的原则代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//转的圈数</span></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">while</span> (loop++ &lt; n / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//上：从左向右填充</span></span><br><span class="line">            <span class="keyword">for</span> (j = start; j &lt; n - loop; j++) &#123;</span><br><span class="line">                res[start][j] = value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右：从上往下填充</span></span><br><span class="line">            <span class="keyword">for</span> (i = start; i &lt; n - loop; i++) &#123;</span><br><span class="line">                res[i][j] = value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下：从右往左填充</span></span><br><span class="line">            <span class="keyword">for</span> (; j &gt; loop - <span class="number">1</span>; j--) &#123;</span><br><span class="line">                res[i][j] = value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (; i &gt; loop - <span class="number">1</span>; i--) &#123;</span><br><span class="line">                res[i][j] = value++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            res[start][start] = value;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="comment">//判断头节点是否是val，一定要先判断空，不然后报错</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p.next != <span class="literal">null</span> &amp;&amp; p.next.val == val) &#123;</span><br><span class="line">                p.next = p.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>两个指针，同时还要单独考虑头节点删除，其余情况下直接返回原头节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="comment">//删除的前指针和最终将会指向最后一个节点的指针</span></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> head;</span><br><span class="line">       pre.next = head;</span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">       <span class="comment">//pre和tail拉开间隔n</span></span><br><span class="line">       <span class="keyword">while</span> (tail!=<span class="literal">null</span> &amp;&amp; count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           tail = tail.next;</span><br><span class="line">           count--;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//指针一直相对距离不变，tali变为尾节点</span></span><br><span class="line">       <span class="keyword">while</span> (tail.next != <span class="literal">null</span>)&#123;</span><br><span class="line">           tail = tail.next;</span><br><span class="line">           pre = pre.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//删除头节点</span></span><br><span class="line">       <span class="keyword">if</span>(pre.next==head)</span><br><span class="line">       &#123;</span><br><span class="line">           head =head.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//删除del节点</span></span><br><span class="line">       pre.next = pre.next.next;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> head;</span><br></pre></td></tr></table></figure>
<h3 id="代码随想录解题思路"><a href="#代码随想录解题思路" class="headerlink" title="代码随想录解题思路"></a>代码随想录解题思路</h3><p>定义了一个虚拟头节点<code>dummyNode</code>，返回的头节点是<code>dummyNode.next</code></p>
<h2 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h2><p>题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。 如图所示：</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220925103433.png" alt="img"></p>
<p>那么相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。</p>
<p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 = slow指针走过的节点数 * 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(x + y) * 2 = x + y + n (y + z)</span><br></pre></td></tr></table></figure>
<p>两边消掉一个（x+y）: <code>x + y = n (y + z)</code></p>
<p>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。</p>
<p>所以要求x ，将x单独放在左面：<code>x = n (y + z) - y</code> ,</p>
<p>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：<code>x = (n - 1) (y + z) + z</code> 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p>
<p>这个公式说明什么呢？</p>
<p>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。</p>
<p>当 n为1的时候，公式就化解为 <code>x = z</code>，</p>
<p>这就意味着，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p>
<p>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。</p>
<p>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p>
<p>那么 n如果大于1是什么情况呢，就是fast指针在环形转n圈之后才遇到 slow指针。</p>
<p>其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p>
<h3 id="自己的方法"><a href="#自己的方法" class="headerlink" title="自己的方法"></a>自己的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">low</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="literal">null</span> &amp;&amp; fast.next.next != <span class="literal">null</span> &amp;&amp; fast != low) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            low = low.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast.next == <span class="literal">null</span> || fast.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        low = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != low) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            low = low.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>判断太多，内存占用过多</p>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;<span class="comment">// 有环</span></span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> fast;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="comment">// 两个指针，从头结点和相遇结点，各走一步，直到相遇，相遇点即为环入口</span></span><br><span class="line">                <span class="keyword">while</span> (index1 != index2) &#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p>
<h2 id="三种哈希结构"><a href="#三种哈希结构" class="headerlink" title="三种哈希结构"></a>三种哈希结构</h2><ul>
<li>数组</li>
<li>set （集合）</li>
<li>map(映射)</li>
</ul>
<blockquote>
<p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>映射</th>
<th>底层实现</th>
<th>是否有序</th>
<th>数值是否可以重复</th>
<th>能否更改数值</th>
<th>查询效率</th>
<th>增删效率</th>
</tr>
</thead>
<tbody>
<tr>
<td>std::map</td>
<td>红黑树</td>
<td>key有序</td>
<td>key不可重复</td>
<td>key不可修改</td>
<td>O(logn)</td>
<td>O(logn)</td>
</tr>
<tr>
<td>std::multimap</td>
<td>红黑树</td>
<td>key有序</td>
<td>key可重复</td>
<td>key不可修改</td>
<td>O(log n)</td>
<td>O(log n)</td>
</tr>
<tr>
<td>std::unordered_map</td>
<td>哈希表</td>
<td>key无序</td>
<td>key不可重复</td>
<td>key不可修改</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
</div>
<p>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p>
<p>在map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p>
<h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><p><strong>而且如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</strong></p>
<p>此时就要使用另一种结构体了，set </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">       <span class="keyword">if</span> (nums1 == <span class="literal">null</span> || nums1.length == <span class="number">0</span> || nums2 == <span class="literal">null</span> || nums2.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       Set&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">           set1.add(i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">           <span class="keyword">if</span> (set1.contains(i))</span><br><span class="line">           &#123;</span><br><span class="line">               res.add(i);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> res.stream().mapToInt(x -&gt; x).toArray();</span><br></pre></td></tr></table></figure>
<h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>
<p><strong>「快乐数」</strong> 定义为：</p>
<ul>
<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>
<li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li>
<li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li>
</ul>
<p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p>
<h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题目使用哈希法，来判断这个sum是否重复出现，如果重复了就是return false， 否则一直找到sum为1为止。</p>
<h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><p>给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。</p>
<h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>首先定义 一个Map，key放a和b两数之和，value 放a和b两数之和出现的次数。</li>
<li>遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。</li>
<li>定义int变量count，用来统计 a+b+c+d = 0 出现的次数。</li>
<li>在遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。</li>
<li>最后返回统计值 count 就可以了</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> sum;</span><br><span class="line">       Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> j : nums2) &#123;</span><br><span class="line">               sum = i + j;</span><br><span class="line">               <span class="comment">//如果map中存在sum这个键，则返回map中对应的键对应的值，如果不存在，则返回0</span></span><br><span class="line">               map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i : nums3) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> j : nums4) &#123;</span><br><span class="line">               sum =<span class="number">0</span>- i - j;</span><br><span class="line">               res = res+ map.getOrDefault(sum,<span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="赎金信"><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h2><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p>
<p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p>
<p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li>
<li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li>
</ul>
<h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为题目说只有小写字母，那可以采用空间换取时间的哈希策略，用一个长度为26的数组来记录magazine里字母出现的次数。然后依次读取ransomNote的字母次数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ransomNote.length() &gt; magazine.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] records = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;</span><br><span class="line">            records[magazine.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;</span><br><span class="line">            records[ransomNote.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> record : records) &#123;</span><br><span class="line">            <span class="keyword">if</span>(record&lt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>字符串转化为字符数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray())&#123;</span><br><span class="line">           record[c - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。</p>
<p>依然还是在数组中找到 abc 使得a + b +c =0，我们这里相当于 a = nums[i]，b = nums[left]，c = nums[right]。</p>
<ul>
<li>如果nums[i] + nums[left] + nums[right] &gt; 0 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些。</li>
<li>如果 nums[i] + nums[left] + nums[right] &lt; 0 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。</li>
</ul>
<p><img src="https://code-thinking.cdn.bcebos.com/gifs/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.gif" alt="15.三数之和"></p>
<h3 id="难点一：a的去重"><a href="#难点一：a的去重" class="headerlink" title="难点一：a的去重"></a>难点一：a的去重</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去除num[i]重复的三元组</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>错误示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123; <span class="comment">// 去重操作</span></span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三元组中出现重复元素的情况直接pass掉了，如&#123;-1，-1，2&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="难点二：bc去重"><a href="#难点二：bc去重" class="headerlink" title="难点二：bc去重"></a>难点二：bc去重</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">right--;</span><br><span class="line">left++;</span><br></pre></td></tr></table></figure>
<h3 id="总的代码"><a href="#总的代码" class="headerlink" title="总的代码"></a>总的代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//去除num[i]重复的三元组</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//采用双指针，left=i+1，right从末尾开始排</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                temp = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//将三元组加入res，并尝试找剩下的符合的三元组</span></span><br><span class="line">                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符反转"><a href="#字符反转" class="headerlink" title="字符反转"></a>字符反转</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须<strong><a href="https://baike.baidu.com/item/原地算法">原地</a>修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p>
<h3 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            tmp = s[i];</span><br><span class="line">            s[i] = s[r - i];</span><br><span class="line">            s[r - i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">           s[l] ^= s[r];  <span class="comment">//构造 a ^ b 的结果，并放在 a 中</span></span><br><span class="line">           s[r] ^= s[l];  <span class="comment">//将 a ^ b 这一结果再 ^ b ，存入b中，此时 b = a, a = a ^ b</span></span><br><span class="line">           s[l] ^= s[r];  <span class="comment">//a ^ b 的结果再 ^ a ，存入 a 中，此时 b = a, a = b 完成交换</span></span><br><span class="line">           l++;</span><br><span class="line">           r--;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h2 id="翻转字符串里的单词"><a href="#翻转字符串里的单词" class="headerlink" title="翻转字符串里的单词"></a>翻转字符串里的单词</h2><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p>
<p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p>
<p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p>
<p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>
<h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><ul>
<li>移除多余空格</li>
<li>将整个字符串反转</li>
<li>将每个单词反转</li>
</ul>
<h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><p>创建新字符数组填充。时间复杂度O(n)</p>
<p>从后往前找到单词，需要两个指针，新的数组将单词从0开始装入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] originArray = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] newArray = <span class="keyword">new</span> <span class="title class_">char</span>[originArray.length + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//newArray position</span></span><br><span class="line">        <span class="comment">//从orinArray最右边开始从左遍历，将单词一个一个读入到newArray</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> originArray.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> left, right;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//去除右边空格</span></span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; originArray[i] == <span class="string">&#x27; &#x27;</span>) i--;</span><br><span class="line">            right = i;</span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; originArray[i] != <span class="string">&#x27; &#x27;</span>) i--;</span><br><span class="line">            left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = left; j &lt;= right; j++) &#123;</span><br><span class="line">                newArray[pos++] = originArray[j];</span><br><span class="line">                <span class="comment">//很关键，这里每次都给一个但单词加一个空格，</span></span><br><span class="line">                <span class="comment">//若String最前面是空格，for循环条件left=0，right=-1</span></span><br><span class="line">                <span class="keyword">if</span> (j == right)</span><br><span class="line">                    newArray[pos++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        现在pos由于最后++是包含最后一个空格加1的位置处，pos-2+1=pos-1才是字符串的长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(newArray, <span class="number">0</span>, pos-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="前缀表"><a href="#前缀表" class="headerlink" title="前缀表"></a>前缀表</h2><p>KMP（Knuth-Morris-Pratt）算法是一种用于在<strong>文本中查找子串</strong>的字符串匹配算法。该算法的核心思想是利用已经匹配过的部分信息来避免不必要的字符比较，从而提高匹配效率。KMP算法的一个关键部分是构建和使用”前缀表”（prefix table）或称为”部分匹配表”（partial match table）。</p>
<p>前缀是指不包含最后一个字符的<strong>所有</strong>以第一个字符开头的连续子串；后缀是指不包含第一个字符的<strong>所有</strong>以最后一个字符结尾的连续子串</p>
<p><img src="C:\data\mysoftware\Typora\typoraPicture\KMP8-1700019395365-3-1700019524869-5.png" alt="KMP8"></p>
<p><strong>初始化：j指向前缀末尾位置，i指向后缀末尾位置。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>[] next, String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s.charAt(j) != s.charAt(i)) </span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(j) == s.charAt(i)) </span><br><span class="line">                j++;</span><br><span class="line">            next[i] = j; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];</span><br><span class="line">        getNext(next, needle);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//匹配的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; haystack.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j)) j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) j++;</span><br><span class="line">            <span class="keyword">if</span> (j == needle.length()) <span class="keyword">return</span> i - needle.length() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><ol>
<li>java中栈的初始化</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack&lt;Integer&gt;  stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;()；</span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>push，pop，peek，isEmpty</code>函数</p>
</li>
<li><p>封装栈之间的转移函数</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inToOut</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (stackOut.empty()) &#123;</span><br><span class="line">           <span class="keyword">while</span> (!stackIn.empty()) &#123;</span><br><span class="line">               stackOut.push(stackIn.pop());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h2><ol>
<li><p><strong>队列是先进先出，两个队列之间直接转移数据，数据的排序不变</strong></p>
</li>
<li><p>一个队列的方法是每次将队尾元素平移到队首</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveSize_1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queue.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           queue.offer(queue.poll());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>peek方法需要注意，调用<code>moveSize_1</code>后，留存第一个结果后需要再次移动一次复原队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        moveSize_1();</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> queue.peek();</span><br><span class="line">        queue.offer(queue.poll());</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>队列初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p><code>offer(element)</code>: 该方法用于将指定的元素插入到队列的末尾（类似于<code>add</code>方法），如果队列已满则返回<code>false</code>，否则返回<code>true</code>。</p>
<p><code>add(element)</code>: 将元素添加到链表的末尾。</p>
<p><code>size()</code>: 获取链表中元素的数量。</p>
<p><code>clear()</code>: 清空链表中的所有元素。</p>
<p><code>toArray()</code>: 将链表转换为数组。</p>
<p><code>peek()</code>: 该方法返回队列的头部（第一个元素），但不移除该元素。如果队列为空，则返回<code>null</code>。</p>
<p><code>poll</code>是一个用于队列操作的方法，它用于检索并删除队列的头部（第一个元素）。如果队列为空，则<code>poll</code>方法返回<code>null</code>。</p>
<p>使用迭代器（<code>Iterator</code>）进行遍历。</p>
</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = linkedList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>每个右括号都有一个对应的相同类型的左括号。</li>
</ol>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>往栈中只压入压入左括号，匹配到右括号时必须与栈顶元素相同，否则<code>return false</code>，最后查看栈是否为空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            c = transParentheis(s.charAt(i));</span><br><span class="line">            <span class="comment">//左括号压入栈</span></span><br><span class="line">            <span class="keyword">if</span> (c != s.charAt(i))</span><br><span class="line">                stack.push(c);</span><br><span class="line">                <span class="comment">//匹配到右括号，弹出栈</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; stack.peek() == c)</span><br><span class="line">                stack.pop();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> Character <span class="title function_">transParentheis</span><span class="params">(Character s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span> -&gt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span> -&gt; <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span> -&gt; <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; s;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047.删除字符串中的所有相邻重复项"></a>1047.删除字符串中的所有相邻重复项</h2><p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p>
<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>
<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ol>
<li>用栈，判断栈顶和新加入的元素是否相同，但是多了一步将栈转化为字符串</li>
<li>直接用字符串</li>
<li>用双指针</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; s.length())&#123;</span><br><span class="line">            <span class="comment">// 直接用fast指针覆盖slow指针的值</span></span><br><span class="line">            ch[slow] = ch[fast];</span><br><span class="line">            <span class="comment">// 遇到前后相同值的，就跳过，即slow指针后退一步，下次循环就可以直接被覆盖掉了</span></span><br><span class="line">            <span class="keyword">if</span>(slow &gt; <span class="number">0</span> &amp;&amp; ch[slow] == ch[slow - <span class="number">1</span>])&#123;</span><br><span class="line">                slow--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch,<span class="number">0</span>,slow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h2><p>逆波兰表达式：是一种后缀表达式，所谓后缀就是指运算符写在后面。</p>
<p>平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。</p>
<p>该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。</p>
<p>逆波兰表达式主要有以下两个优点：</p>
<ul>
<li>去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。</li>
<li>适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li>
</ul>
<p><strong>其实逆波兰表达式相当于是二叉树中的后序遍历</strong></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><img src="https://code-thinking.cdn.bcebos.com/gifs/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.gif" alt="150.逆波兰表达式求值"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Deque&lt;Integer&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            stackOperation(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stackOperation</span><span class="params">(String c)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span> -&gt; stack.push(stack.pop() + stack.pop());</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span> -&gt; stack.push(-stack.pop() + stack.pop());</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span> -&gt; stack.push(stack.pop() * stack.pop());</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                stack.push(num2 / num1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> -&gt; stack.push(Integer.valueOf(c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Deque详解"><a href="#Deque详解" class="headerlink" title="Deque详解"></a>Deque详解</h2><p><a href="https://blog.csdn.net/devnn/article/details/82716447">参考博客</a></p>
<p>Deque有三种用途：</p>
<ol>
<li>普通队列(一端进另一端出:<br><code>Queue queue = new LinkedList()</code>或<code>Deque deque = new LinkedList()</code></li>
<li>双端队列(两端都可进出)<br><code>Deque deque = new LinkedList()</code></li>
<li>堆栈<br><code>Deque deque = new LinkedList()</code></li>
</ol>
<p>Deque接口扩展(继承)了 <code>Queue</code> 接口。在将双端队列用作队列时，将得到 FIFO（先进先出）行为。将元素添加到双端队列的末尾，从双端队列的开头移除元素。从 Queue 接口继承的方法完全等效于 Deque 方法，如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>Queue方法</strong></th>
<th style="text-align:center"><strong>等效Deque方法</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">add(e)</td>
<td style="text-align:center">addLast(e)</td>
</tr>
<tr>
<td style="text-align:center">offer(e)</td>
<td style="text-align:center">offerLast(e)</td>
</tr>
<tr>
<td style="text-align:center">remove()</td>
<td style="text-align:center">removeFirst()</td>
</tr>
<tr>
<td style="text-align:center">poll()</td>
<td style="text-align:center">pollFirst()</td>
</tr>
<tr>
<td style="text-align:center">element()</td>
<td style="text-align:center">getFirst()</td>
</tr>
<tr>
<td style="text-align:center">peek()</td>
<td style="text-align:center">peekFirst()</td>
</tr>
</tbody>
</table>
</div>
<p>双端队列也可用作 LIFO（后进先出）堆栈。应优先使用此接口而不是遗留 <code>Stack</code> 类。在将双端队列用作堆栈时，元素被推入双端队列的开头并从双端队列开头弹出。堆栈方法完全等效于 Deque 方法，如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>堆栈方法</strong></th>
<th><strong>等效Deque方法</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>push(e)</td>
<td>addFirst(e)</td>
</tr>
<tr>
<td>pop()</td>
<td>removeFirst()</td>
</tr>
<tr>
<td>peek()</td>
<td>peekFirst()</td>
</tr>
</tbody>
</table>
</div>
<h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239.滑动窗口最大值"></a>239.滑动窗口最大值</h2><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p>
<p>返回 <em>滑动窗口中的最大值</em> 。</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol>
<li>我们需要一个队列，这个队列呢，放进去窗口里的元素，然后随着窗口的移动，队列也一进一出，每次移动之后，队列告诉我们里面的最大值是什么。</li>
<li>队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素就可以了，同时保证队列里的元素<strong>数值是由大到小</strong>的。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">poll</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!queue.isEmpty() &amp;&amp; val == queue.getFirst())</span><br><span class="line">            queue.pollFirst();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//push(value)：如果push的元素value大于入口元素的数值，那么就将队列入口的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; queue.peekLast() &lt; val) &#123;</span><br><span class="line">            queue.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        queue.addLast(val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="前K个高频元素"><a href="#前K个高频元素" class="headerlink" title="前K个高频元素"></a>前K个高频元素</h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>用小根堆求解前k个最大值</p>
<p>采用优先队列实现小根堆</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue&lt;<span class="type">int</span>[]&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(pair -&gt; pair[<span class="number">1</span>]));</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">PriorityQueue&lt;<span class="type">int</span>[]&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt((pair1,pair2)-&gt;pair1[<span class="number">1</span>]-pair2[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure>
<p>若想初始化大根堆，则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue&lt;<span class="type">int</span>[]&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1,pair2)-&gt;pair2[<span class="number">1</span>]-pair1[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>
<p><code>int[]</code>第一个值存<code>nums[i]</code>即key，第二个值存次数，即<code>value</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet())</span><br></pre></td></tr></table></figure>
<p>迭代取map中的<code>&lt;key,value&gt;</code></p>
<p><strong>PriorityQueue常用函数</strong></p>
<ul>
<li><code>add(E e)</code> 或 <code>offer(E e)</code>：向队列中添加元素。</li>
<li><code>poll()</code>：检索并删除队列中的最小元素。</li>
<li><code>peek()</code>：检索但不删除队列中的最小元素。</li>
<li><code>remove(Object o)</code>：从队列中删除指定的元素。</li>
<li><code>size()</code>：返回队列中的元素个数。</li>
</ul>
<h2 id="二叉树理论"><a href="#二叉树理论" class="headerlink" title="二叉树理论"></a>二叉树理论</h2><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/18/99820_20200806185805576.png" alt="20200806185805576" style="zoom:50%;" /></p>
<p>这棵二叉树为满二叉树，也可以说深度为k，有2^k-1个节点的二叉树。</p>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/18/19370_20200920221638903.png" alt="20200920221638903" style="zoom:50%;" /></p>
<h3 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h3><p>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/21/45815_20200806190511967.png" alt="20200806190511967"></p>
<h3 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h3><p><strong>二叉树可以链式存储，也可以顺序存储。</strong></p>
<p>那么链式存储方式就用指针， 顺序存储的方式就是用数组。</p>
<p>用数组来存储二叉树如何遍历的呢？</p>
<p><strong>如果父节点的数组下标是 i，那么它的左孩子就是 i <em> 2 + 1，右孩子就是 i </em> 2 + 2。</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/21/13082_20200920200429452.png" alt="20200920200429452" style="zoom:50%;" /></p>
<h2 id="前序遍历（递归）"><a href="#前序遍历（递归）" class="headerlink" title="前序遍历（递归）"></a>前序遍历（递归）</h2><p>节点为空，返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        preorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode treeNode, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        res.add(treeNode.val);</span><br><span class="line">        preorder(treeNode.left, res);</span><br><span class="line">        preorder(treeNode.right, res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="二叉树的统一迭代法"><a href="#二叉树的统一迭代法" class="headerlink" title="二叉树的统一迭代法"></a>二叉树的统一迭代法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历（迭代法），栈进入顺序：右左前null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> res</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><h3 id="BFS-迭代方式"><a href="#BFS-迭代方式" class="headerlink" title="BFS-迭代方式"></a>BFS-迭代方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFun02</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;  <span class="comment">// 如果节点为空，则直接返回</span></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  <span class="comment">// 创建一个队列，用于层序遍历树</span></span><br><span class="line">    queue.offer(node);  <span class="comment">// 将根节点加入队列</span></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;  <span class="comment">// 队列不为空时循环</span></span><br><span class="line">        List&lt;Integer&gt; levelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 创建一个列表，用于存储当前层的节点值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.size();  <span class="comment">// 获取当前层的节点数量</span></span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;  <span class="comment">// 当前层的节点遍历</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> queue.poll();  <span class="comment">// 从队列中取出一个节点</span></span><br><span class="line">            levelList.add(tmpNode.val);  <span class="comment">// 将节点的值添加到当前层的列表中</span></span><br><span class="line">            <span class="keyword">if</span> (tmpNode.left != <span class="literal">null</span>) queue.offer(tmpNode.left);  <span class="comment">// 如果有左子节点，则将左子节点加入队列</span></span><br><span class="line">            <span class="keyword">if</span> (tmpNode.right != <span class="literal">null</span>) queue.offer(tmpNode.right);  <span class="comment">// 如果有右子节点，则将右子节点加入队列</span></span><br><span class="line">            len--;  <span class="comment">// 节点数量减一</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.add(levelList);  <span class="comment">// 将当前层的节点值列表添加到结果中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DFS-递归方式"><a href="#DFS-递归方式" class="headerlink" title="DFS-递归方式"></a>DFS-递归方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFunc01</span><span class="params">(TreeNode node, Integer deep)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">       deep++;</span><br><span class="line">       <span class="keyword">if</span> (res.size() &lt; deep) &#123;<span class="comment">//为二叉树每一层分配空间存储</span></span><br><span class="line">           List&lt;Integer&gt; levelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">           res.add(levelList);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//对应层存储元素</span></span><br><span class="line">       res.get(deep - <span class="number">1</span>).add(node.val);</span><br><span class="line"></span><br><span class="line">       checkFunc01(node.left, deep);</span><br><span class="line">       checkFunc01(node.right, deep);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="层序遍历2"><a href="#层序遍历2" class="headerlink" title="层序遍历2"></a>层序遍历2</h2><p>给你二叉树的根节点 <code>root</code> ，返回其节点值 <strong>自底向上的层序遍历</strong> 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>
<h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//法一，用Collections.reverse方法反转</span><br><span class="line">Collections.reverse(res);</span><br></pre></td></tr></table></figure>
<h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h3><p>在<code>BFS-迭代方式</code>的函数基础上，将res的每层数据插入的顺序变为头插入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFun02Dual</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;  <span class="comment">// 如果节点为空，则直接返回</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  <span class="comment">// 创建一个队列，用于层序遍历树</span></span><br><span class="line">        queue.offer(node);  <span class="comment">// 将根节点加入队列</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;  <span class="comment">// 队列不为空时循环</span></span><br><span class="line">            List&lt;Integer&gt; levelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 创建一个列表，用于存储当前层的节点值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.size();  <span class="comment">// 获取当前层的节点数量</span></span><br><span class="line">            <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;  <span class="comment">// 当前层的节点遍历</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> queue.poll();  <span class="comment">// 从队列中取出一个节点</span></span><br><span class="line">                levelList.add(tmpNode.val);  <span class="comment">// 将节点的值添加到当前层的列表中</span></span><br><span class="line">                <span class="keyword">if</span> (tmpNode.left != <span class="literal">null</span>) queue.offer(tmpNode.left);  <span class="comment">// 如果有左子节点，则将左子节点加入队列</span></span><br><span class="line">                <span class="keyword">if</span> (tmpNode.right != <span class="literal">null</span>) queue.offer(tmpNode.right);  <span class="comment">// 如果有右子节点，则将右子节点加入队列</span></span><br><span class="line">                len--;  <span class="comment">// 节点数量减一</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每层倒叙插入</span></span><br><span class="line">            res.add(<span class="number">0</span>, levelList);  <span class="comment">// 将当前层的节点值列表添加到结果中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="N叉树的层序遍历"><a href="#N叉树的层序遍历" class="headerlink" title="N叉树的层序遍历"></a>N叉树的层序遍历</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>采用递归方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">levelOrderN</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        recursiveNTree(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recursiveNTree</span><span class="params">(Node node, Integer deep)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        deep++;</span><br><span class="line">        <span class="keyword">if</span> (resList.size() &lt; deep) &#123;</span><br><span class="line">            List&lt;Integer&gt; curLevel = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            resList.add(curLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加入当前的节点</span></span><br><span class="line">        resList.get(deep - <span class="number">1</span>).add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历子节点</span></span><br><span class="line">        <span class="keyword">for</span> (Node child : node.children) &#123;</span><br><span class="line">            recursiveNTree(child, deep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a>104. 二叉树的最大深度</h2><p>推荐方法，递归法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>左子树和右子树的最大深度 <em>l</em> 和 <em>r</em>，那么该二叉树的最大深度即为</p>
<script type="math/tex; mode=display">
m a x ( l , r ) + 1</script>]]></content>
      <categories>
        <category>code_Musing</category>
      </categories>
      <tags>
        <tag>arrays</tag>
        <tag>linkList</tag>
        <tag>hashMap</tag>
        <tag>point</tag>
        <tag>String</tag>
        <tag>Stack</tag>
        <tag>Queue</tag>
        <tag>binaryTree</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm小技巧</title>
    <url>/2024/01/16/tips/pycharm/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<span id="more"></span>
<h2 id="开启show-comand-queue-gt-gt-gt"><a href="#开启show-comand-queue-gt-gt-gt" class="headerlink" title="开启show comand queue(&gt;&gt;&gt;)"></a>开启show comand queue(&gt;&gt;&gt;)</h2><p><code>Build, Execution, Deployment</code>-&gt;<code>Console</code> -&gt;<code>Command queue for Python Console</code></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/03/21/69433_image-20240321195659243.png" alt="image-20240321195659243"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/10/23/43666_image-20231023163651677.png" alt="image-20231023163651677" style="zoom: 50%;" /></p>
<h2 id="查看模型结构"><a href="#查看模型结构" class="headerlink" title="查看模型结构"></a>查看模型结构</h2><p>法一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      (11): RobertaLayer(</span><br><span class="line">        (attention): RobertaAttention(</span><br><span class="line">          (self): RobertaSelfAttention(</span><br><span class="line">            (query): Linear(in_features=768, out_features=768, bias=True)</span><br><span class="line">            (key): Linear(in_features=768, out_features=768, bias=True)</span><br><span class="line">            (value): Linear(in_features=768, out_features=768, bias=True)</span><br><span class="line">            (dropout): Dropout(p=0.1, inplace=False)</span><br><span class="line">          )</span><br><span class="line">          (output): RobertaSelfOutput(</span><br><span class="line">            (dense): Linear(in_features=768, out_features=768, bias=True)</span><br><span class="line">            (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)</span><br><span class="line">            (dropout): Dropout(p=0.1, inplace=False)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">        (intermediate): RobertaIntermediate(</span><br><span class="line">          (dense): Linear(in_features=768, out_features=3072, bias=True)</span><br><span class="line">          (intermediate_act_fn): GELUActivation()</span><br><span class="line">        )</span><br><span class="line">        (output): RobertaOutput(</span><br><span class="line">          (dense): Linear(in_features=3072, out_features=768, bias=True)</span><br><span class="line">          (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)</span><br><span class="line">          (dropout): Dropout(p=0.1, inplace=False)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  (pooler): RobertaPooler(</span><br><span class="line">    (dense): Linear(in_features=768, out_features=768, bias=True)</span><br><span class="line">    (activation): Tanh()</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>法二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name, parameters <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&#x27;:&#x27;</span>, parameters.size())</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encoder.layer.11.attention.self.query.bias : torch.Size([768])</span><br><span class="line">encoder.layer.11.attention.self.key.weight : torch.Size([768, 768])</span><br><span class="line">encoder.layer.11.attention.self.key.bias : torch.Size([768])</span><br><span class="line">encoder.layer.11.attention.self.value.weight : torch.Size([768, 768])</span><br><span class="line">encoder.layer.11.attention.self.value.bias : torch.Size([768])</span><br><span class="line">encoder.layer.11.attention.output.dense.weight : torch.Size([768, 768])</span><br><span class="line">encoder.layer.11.attention.output.dense.bias : torch.Size([768])</span><br><span class="line">encoder.layer.11.attention.output.LayerNorm.weight : torch.Size([768])</span><br><span class="line">encoder.layer.11.attention.output.LayerNorm.bias : torch.Size([768])</span><br><span class="line">encoder.layer.11.intermediate.dense.weight : torch.Size([3072, 768])</span><br><span class="line">encoder.layer.11.intermediate.dense.bias : torch.Size([3072])</span><br><span class="line">encoder.layer.11.output.dense.weight : torch.Size([768, 3072])</span><br><span class="line">encoder.layer.11.output.dense.bias : torch.Size([768])</span><br><span class="line">encoder.layer.11.output.LayerNorm.weight : torch.Size([768])</span><br><span class="line">encoder.layer.11.output.LayerNorm.bias : torch.Size([768])</span><br><span class="line">pooler.dense.weight : torch.Size([768, 768])</span><br><span class="line">pooler.dense.bias : torch.Size([768])</span><br></pre></td></tr></table></figure>
<h2 id="关闭占用端口的程序"><a href="#关闭占用端口的程序" class="headerlink" title="关闭占用端口的程序"></a>关闭占用端口的程序</h2><p>查看占用端口的程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr 8080</span><br></pre></td></tr></table></figure>
<p>使用命令关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill -PID 进程号 -F</span><br></pre></td></tr></table></figure>
<h2 id="plt-imshow不显示图片"><a href="#plt-imshow不显示图片" class="headerlink" title="plt.imshow不显示图片"></a>plt.imshow不显示图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pylab</span><br><span class="line">f = <span class="string">&quot;data/tmp/Cats_Test49.jpg&quot;</span></span><br><span class="line">f2 = <span class="string">&quot;data/tmp/golf.jpg&quot;</span></span><br><span class="line">im = plt.imread(f)</span><br><span class="line">im2 = plt.imread(f2)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.imshow(im)</span><br><span class="line">plt.title(<span class="string">&quot;dogs&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.imshow(im2)</span><br><span class="line">plt.title(<span class="string">&quot;golf&quot;</span>)</span><br><span class="line">pylab.show()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_实战篇_短信登录</title>
    <url>/2024/01/18/redis/redis%E5%AE%9E%E6%88%98%E7%AF%871/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul>
<li>前后端项目导入与部署</li>
<li>基于Session实现登录流程</li>
<li>基于redis实现登录流程</li>
</ul>
<span id="more"></span>
<h1 id="短息登录"><a href="#短息登录" class="headerlink" title="短息登录"></a>短息登录</h1><h2 id="配置准备"><a href="#配置准备" class="headerlink" title="配置准备"></a>配置准备</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redisdb</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/redisdb?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxx</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">time-between-eviction-runs:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># JSON处理时忽略非空字段</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.hmdp.entity</span> <span class="comment"># 别名扫描包</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hmdp:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
<h2 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h2><ol>
<li>部署ngix文件夹</li>
<li>在文件夹下打开终端</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start .\nginx.exe</span><br></pre></td></tr></table></figure>
<ol>
<li>打开chrome浏览器，在空白页面点击鼠标右键，选择检查，即可打开开发者工具</li>
<li>打开手机模式</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/19/82038_image-20240119101138767.png" alt="image-20240119101138767"></p>
<ol>
<li>选择一款手机模式</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/19/22649_image-20240119101305874.png" alt="image-20240119101305874" style="zoom:67%;" /></p>
<ol>
<li>访问8080端口进入app界面</li>
<li>关闭前端</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill /F /IM nginx.exe</span><br></pre></td></tr></table></figure>
<h2 id="基于Session实现登录流程"><a href="#基于Session实现登录流程" class="headerlink" title="基于Session实现登录流程"></a>基于Session实现登录流程</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/19/19398_1653066208144.png" alt="1653066208144"></p>
<h2 id="实现发送短信验证码功能"><a href="#实现发送短信验证码功能" class="headerlink" title="实现发送短信验证码功能"></a>实现发送短信验证码功能</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.校验手机号</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">// 2.如果不符合，返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.符合，生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 4.保存验证码到 session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        <span class="comment">// 5.发送验证码</span></span><br><span class="line">        log.debug(<span class="string">&quot;发送短信验证码成功，验证码：&#123;&#125;&quot;</span>, code);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第五步由于第三方接口的原因，没有实际发送短信</p>
<h2 id="短信验证码登录、注册】"><a href="#短信验证码登录、注册】" class="headerlink" title="短信验证码登录、注册】"></a>短信验证码登录、注册】</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.校验手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">// 2、如果不符合，返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.校验验证码</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">cacheCode</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">        <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.toString().equals(code)) &#123;</span><br><span class="line">            <span class="comment">// 不一致，报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 6.不存在，创建新用户并保存</span></span><br><span class="line">            user = createUserWithPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setPhone(phone);</span><br><span class="line">        user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="登录拦截功能"><a href="#登录拦截功能" class="headerlink" title="登录拦截功能"></a>登录拦截功能</h2><h3 id="拦截器代码"><a href="#拦截器代码" class="headerlink" title="拦截器代码"></a>拦截器代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//1.获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2.获取session中的用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="comment">//4.不存在，拦截，返回401状态码</span></span><br><span class="line">              response.setStatus(<span class="number">401</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.存在，保存用户信息到Threadlocal</span></span><br><span class="line">        UserHolder.saveUser((User)user);</span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置让拦截器生效"><a href="#配置让拦截器生效" class="headerlink" title="配置让拦截器生效"></a>配置让拦截器生效</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="隐藏用户敏感信息"><a href="#隐藏用户敏感信息" class="headerlink" title="隐藏用户敏感信息"></a>隐藏用户敏感信息</h3><p>我们通过浏览器观察到此时用户的全部信息都在，这样极为不靠谱，所以我们应当在返回用户信息之前，将用户的敏感信息进行隐藏，采用的核心思路就是书写一个UserDto对象，这个UserDto对象就没有敏感信息了，我们在返回前，将有用户敏感信息的User对象转化成没有敏感信息的UserDto对象，那么就能够避免这个尴尬的问题了</p>
<p><strong>在登录方法处修改</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//7.保存用户信息到session中</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, BeanUtils.copyProperties(user,UserDTO.class));</span><br></pre></td></tr></table></figure>
<p><strong>在拦截器处：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.存在，保存用户信息到Threadlocal</span></span><br><span class="line">UserHolder.saveUser((UserDTO) user);</span><br></pre></td></tr></table></figure>
<p><strong>在UserHolder处：将user对象换成UserDTO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDTO user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基于Redis实现短信登录"><a href="#基于Redis实现短信登录" class="headerlink" title="基于Redis实现短信登录"></a>基于Redis实现短信登录</h2><h3 id="session共享问题"><a href="#session共享问题" class="headerlink" title="session共享问题"></a>session共享问题</h3><p><strong>核心思路分析：</strong></p>
<p>每个tomcat中都有一份属于自己的session,假设用户第一次访问第一台tomcat，并且把自己的信息存放到第一台服务器的session中，但是第二次这个用户访问到了第二台tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的session，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是session拷贝，就是说虽然每个tomcat上都有不同的session，但是每当任意一台服务器的session修改时，都会同步给其他的Tomcat服务器的session，这样的话，就可以实现session的共享了</p>
<p>但是这种方案具有两个大问题</p>
<p>1、每台服务器中都有完整的一份session数据，服务器压力过大。</p>
<p>2、session拷贝数据时，可能会出现延迟</p>
<p>所以咱们后来采用的方案都是基于redis来完成，我们把session换成redis，redis数据本身就是共享的，就可以避免session共享的问题了</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/02/21128_1653069893050-1706863382239-1.png" alt="1653069893050"></p>
<h3 id="整体访问流程"><a href="#整体访问流程" class="headerlink" title="整体访问流程"></a>整体访问流程</h3><p>当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到redis，并且生成token作为redis的key，当我们校验用户是否登录时，会去携带着token进行访问，从redis中取出token对应的value，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到threadLocal中，并且放行。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/02/92077_image-20240202163831342.png" alt="image-20240202163831342"></h2><h3 id="设计key的具体细节"><a href="#设计key的具体细节" class="headerlink" title="设计key的具体细节"></a>设计key的具体细节</h3><p>如果我们采用<code>phone：手机号</code>这个的数据来存储当然是可以的，但是如果把这样的敏感数据存储到redis中并且从页面中带过来毕竟不太合适，所以我们在后台生成一个随机串token，然后让前端带来这个token就能完成我们的整体逻辑了。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/27/91177_1653320822964.png" alt="1653320822964" style="zoom: 50%;" /></p>
<h4 id="发送code-保存到redis"><a href="#发送code-保存到redis" class="headerlink" title="发送code 保存到redis"></a>发送code 保存到redis</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.校验手机号</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">// 2.如果不符合，返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.符合，生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 4.保存验证码到 redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 5.发送验证码</span></span><br><span class="line">        log.debug(<span class="string">&quot;发送短信验证码成功，验证码：&#123;&#125;&quot;</span>, code);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>在7.2中将查询到的hash数据转为UserDTO时，需要将id（Long型）手动转化为String类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.校验手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">// 2、如果不符合，返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.从redis获取验证码并校验</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">        <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.equals(code)) &#123;</span><br><span class="line">            <span class="comment">// 不一致，报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 6.不存在，创建新用户并保存</span></span><br><span class="line">            user = createUserWithPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7.保存用户信息到 redis中</span></span><br><span class="line">        <span class="comment">// 7.1.随机生成token，作为登录令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 7.2.将User对象转为HashMap存储</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">        Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">                CopyOptions.create()</span><br><span class="line">                        .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">                        .setFieldValueEditor((fieldName, filedValue) -&gt; filedValue.toString()));</span><br><span class="line">        <span class="comment">// 7.3.存储 LOGIN_USER_KEY:&quot;login:token:&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">        <span class="comment">// 7.4.设置token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>StringRedisTemplate需要手动注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>(stringRedisTemplate))</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">//不存在，拦截，返回401状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.基于TOKEN获取redis中的用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截，返回401状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.将查询到的hash数据转为UserDTO</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 6.存在，保存用户信息到 ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">// 7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 8.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>只有访问到拦截路径才会刷新</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/27/66997_1653320764547.png" alt="1653320764547"></p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//登录拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">                ).order(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//拦截所有，token刷新拦截器</span></span><br><span class="line">        <span class="comment">//order越大，执行越后</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_实战篇_商户查询缓存</title>
    <url>/2024/02/29/redis/redis%E5%AE%9E%E6%88%98%E7%AF%872/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul>
<li>缓存</li>
<li>商铺查询（单一）</li>
<li>商铺类型查询（List）</li>
<li>缓存穿透</li>
<li>数据库和缓存不一致</li>
<li>缓存穿透</li>
<li>缓存雪崩</li>
<li>缓存击穿</li>
<li>封装redis工具类</li>
</ul>
<span id="more"></span>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><strong>缓存(</strong>Cache),就是数据交换的<strong>缓冲区</strong>,俗称的缓存就是<strong>缓冲区内的数据</strong>,一般从数据库中获取,存储于本地代码。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>降低后端负载</li>
<li>提高读写效率，降低响应时间</li>
</ul>
<h3 id="缓存的成本"><a href="#缓存的成本" class="headerlink" title="缓存的成本"></a>缓存的成本</h3><ul>
<li>数据一致性成本</li>
<li>代码维护成本</li>
<li>运维成本</li>
</ul>
<h1 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/27/68828_1653322097736.png" alt="1653322097736" style="zoom: 45%;" /></p>
<h2 id="商铺查询"><a href="#商铺查询" class="headerlink" title="商铺查询"></a>商铺查询</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>从redis查询商铺缓存</li>
<li>判断是否存在</li>
<li>存在，直接返回</li>
<li>不存在，根据1d查询数据库</li>
<li>不存在，返回错误</li>
<li>存在，写入redis</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="keyword">implements</span> <span class="title class_">IShopService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//CACHE_SHOP_KEY---&gt;&quot;cache:shop:&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">         <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.不存在，根据1d查询数据库</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，写入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop));</span><br><span class="line">        <span class="comment">//7.返回</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="作业-shoptype缓存"><a href="#作业-shoptype缓存" class="headerlink" title="作业 shoptype缓存"></a>作业 shoptype缓存</h2><h3 id="controller源码"><a href="#controller源码" class="headerlink" title="controller源码"></a>controller源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">       List&lt;ShopType&gt; typeList = typeService</span><br><span class="line">               .query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">       <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopTypeMapper, ShopType&gt; <span class="keyword">implements</span> <span class="title class_">IShopTypeService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryByRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">shopTypeListJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_TYPE_LIST);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopTypeListJson)) &#123;</span><br><span class="line">            List&lt;ShopType&gt; shopTypeLists = JSONUtil.toList(shopTypeListJson, ShopType.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shopTypeLists);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;ShopType&gt; shopTypeLists = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (shopTypeLists.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;没有店铺类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_TYPE_LIST, JSONUtil.toJsonStr(shopTypeLists));</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shopTypeLists);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p>缓存更新是redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们向redis插入太多数据，此时就可能会导致缓存中的数据过多，所以redis会对部分数据进行更新，或者把他叫为淘汰更合适。</p>
<p><strong>内存淘汰：</strong>redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p>
<p><strong>超时剔除：</strong>当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p>
<p><strong>主动更新：</strong>我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/28/80353_1653322506393.png" alt="1653322506393" style="zoom:40%;" /></p>
<h2 id="数据库和缓存不一致采用什么方案"><a href="#数据库和缓存不一致采用什么方案" class="headerlink" title="数据库和缓存不一致采用什么方案"></a>数据库和缓存不一致采用什么方案</h2><p><strong>Cache Aside Pattern 人工编码方式</strong>：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案</p>
<ul>
<li><p>删除缓存还是更新缓存？</p>
<ul>
<li>更新缓存：每次更新数据库都更新缓存，无效写操作较多</li>
<li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存</li>
</ul>
</li>
<li><p>如何保证缓存与数据库的操作的同时成功或失败？</p>
<ul>
<li>单体系统，将缓存与数据库操作放在一个事务</li>
<li>分布式系统，利用TCC等分布式事务方案</li>
</ul>
</li>
</ul>
<ul>
<li><p>先操作缓存还是先操作数据库？</p>
<ul>
<li><p>先删除缓存，再操作数据库</p>
</li>
<li><p>先操作数据库，再删除缓存</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/29/26130_1653323595206.png" alt="1653323595206" style="zoom:50%;" /></p>
<p>更新数据库业务耗时更长，查询和写入redis缓存可能在更新数据库前完成</p>
<p>写入缓存时间短，再次期间更新数据库和删除缓存的可能性小</p>
<h3 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h3><p><strong>设置超时</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
<p><strong>updata代码</strong>：先操作数据库，再删除缓存</p>
<p><code>ShopServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1.更新数据库</span></span><br><span class="line">        updateById(shop);</span><br><span class="line">        <span class="comment">// 2.删除缓存</span></span><br><span class="line">        stringRedisTemplate.delete(CACHE_SHOP_KEY + shop.getId());</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这段代码中的 <code>@Transactional</code> 注解用于标识这个方法应该在一个事务中执行。事务是数据库操作的一种机制，它确保了一组数据库操作要么全部成功执行，要么全部失败回滚，以保持数据的一致性和完整性。</p>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透 ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p>
<p>常见的解决方案有两种：</p>
<ul>
<li>缓存空对象<ul>
<li>优点：实现简单，维护方便</li>
<li>缺点：<ul>
<li>额外的内存消耗</li>
<li>可能造成短期的不一致</li>
</ul>
</li>
</ul>
</li>
<li>布隆过滤<ul>
<li>优点：内存占用较少，没有多余key</li>
<li>缺点：<ul>
<li>实现复杂</li>
<li>存在误判可能</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/28/94607_1653326156516.png" alt="1653326156516" style="zoom: 67%;" /></p>
<h3 id="代码实现-缓存空对象"><a href="#代码实现-缓存空对象" class="headerlink" title="代码实现-缓存空对象"></a>代码实现-缓存空对象</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/28/77659_1653327124561.png" alt="1653327124561" style="zoom: 45%;" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="comment">//CACHE_SHOP_KEY---&gt;&quot;cache:shop:&quot;</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">       <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="comment">//2.判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">           <span class="comment">//3.存在，直接返回</span></span><br><span class="line">           <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">           <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//空字符串</span></span><br><span class="line">       <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//返回错误信息</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//4.不存在，根据1d查询数据库</span></span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">       <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">       <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//将空值写入redis</span></span><br><span class="line">           stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//6.存在，写入redis</span></span><br><span class="line">       stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">       <span class="comment">//7.返回</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p>
<p>解决方案：</p>
<ul>
<li><strong>给不同的Key的TTL添加随机值</strong></li>
<li>利用Redis集群提高服务的可用性</li>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存</li>
</ul>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿问题也叫热点Key问题，就是一个被<strong>高并发访问</strong>并且<strong>缓存重建业务较复杂</strong>的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>
<p>常见的解决方案有两种：</p>
<ul>
<li>互斥锁</li>
<li>逻辑过期</li>
</ul>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/28/96191_1653328288627.png" alt="1653328288627" style="zoom:67%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/28/59776_1653328663897.png" alt="1653328663897" style="zoom:67%;" /></p>
<blockquote>
<p>我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p>
<p>这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。</p>
</blockquote>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/28/88931_1653357860001.png" alt="1653357860001" style="zoom: 50%;" /></p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p><code>ShopServiceImpl</code></p>
<p>isLock那里一定要return</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">       <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">           Result.fail(<span class="string">&quot;店铺不存在！！！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="comment">//CACHE_SHOP_KEY---&gt;&quot;cache:shop:&quot;</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">       <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="comment">//2.判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">           <span class="comment">//3.存在，直接返回</span></span><br><span class="line">           <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//空字符串</span></span><br><span class="line">       <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//返回错误信息</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 4.实现缓存重构</span></span><br><span class="line">       <span class="comment">//4.1 获取互斥锁</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;lock:shop:&quot;</span> + id;</span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">           <span class="comment">// 4.2 判断否获取成功</span></span><br><span class="line">           <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">               <span class="comment">//4.3 失败，则休眠重试</span></span><br><span class="line">               Thread.sleep(<span class="number">50</span>);</span><br><span class="line">               <span class="comment">//这里一定要return，否则会多次查询数据库</span></span><br><span class="line">               <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//4.4 成功，根据id查询数据库</span></span><br><span class="line">           shop = getById(id);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//模拟重建延迟</span></span><br><span class="line">           Thread.sleep(<span class="number">200</span>);</span><br><span class="line">           <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">           <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//将空值写入redis</span></span><br><span class="line">               stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//6.存在，写入redis</span></span><br><span class="line">           stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//7.释放互斥锁</span></span><br><span class="line">           unLock(lockKey);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//8.返回</span></span><br><span class="line">       <span class="keyword">return</span> shop;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">       <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 1.更新数据库</span></span><br><span class="line">       updateById(shop);</span><br><span class="line">       <span class="comment">// 2.删除缓存</span></span><br><span class="line">       stringRedisTemplate.delete(CACHE_SHOP_KEY + shop.getId());</span><br><span class="line">       <span class="keyword">return</span> Result.ok();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">       <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">       stringRedisTemplate.delete(key);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/02/29/21339_1653360308731.png" alt="1653360308731" style="zoom: 55%;" /></p>
<p>思路分析：当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p><strong>封装过期时间和店铺数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expireSeconds)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询商铺数据</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//2.封装逻辑过期时间</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(shop);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">        <span class="comment">//3.写入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用逻辑过期解决缓存击穿</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//CACHE_SHOP_KEY---&gt;&quot;cache:shop:&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">//3.未命中</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">// 5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 5.1.未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.2.已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">// 6.缓存重建</span></span><br><span class="line">        <span class="comment">// 6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">// 6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.saveShop2Redis(id, <span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    unLock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//8.返回</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="封装redis工具类"><a href="#封装redis工具类" class="headerlink" title="封装redis工具类"></a>封装redis工具类</h3><p>善于利用泛型，函数式编程</p>
<p>R是返回类型，ID不确定类型，不知道具体的数据库搜索函数，采用函数式编程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将空值写入redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.存在，写入redis</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>调用封装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> cacheClient</span><br><span class="line">                .queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, <span class="built_in">this</span>::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> cacheClient</span><br><span class="line">    .queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, id2 -&gt; getById(id2), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录-二叉树2</title>
    <url>/2024/03/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%952%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p><strong>本节包括：</strong></p>
<ul>
<li>二叉树（部分）</li>
</ul>
<span id="more"></span>
<h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h2><p>给定一个二叉树，检查它是否是镜像对称的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A((1))</span><br><span class="line">    B((2))</span><br><span class="line">    C((2))</span><br><span class="line">    D((3))</span><br><span class="line">    E((4))</span><br><span class="line">    F((4))</span><br><span class="line">    G((3))</span><br><span class="line">    A --&gt; B</span><br><span class="line">    A --&gt; C</span><br><span class="line">    B --&gt; D</span><br><span class="line">    B --&gt; E</span><br><span class="line">    C --&gt; F</span><br><span class="line">    C --&gt; G</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于二叉树是否对称，要比较的是根节点的左子树与右子树是不是相互翻转的，理解这一点就知道了<strong>其实我们要比较的是两个树（这两个树是根节点的左右子树）</strong>，所以在递归遍历的过程中，也是要同时遍历两棵树。</p>
<p>要比较两个节点数值相不相同，首先要把两个节点为空的情况弄清楚！否则后面比较数值的时候就会操作空指针了。</p>
<p>节点为空的情况有：（<strong>注意我们比较的其实不是左孩子和右孩子，所以如下我称之为左节点右节点</strong>）</p>
<ul>
<li>左节点为空，右节点不为空，不对称，return false</li>
<li>左不为空，右为空，不对称 return false</li>
<li>左右都为空，对称，返回true</li>
</ul>
<p>此时已经排除掉了节点为空的情况，那么剩下的就是左右节点不为空：</p>
<ul>
<li>左右都不为空，比较节点数值，不相同就return false</li>
</ul>
<p>此时左右节点不为空，且数值也不相同的情况我们也处理了。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsSymmetricTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> compare(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">        <span class="comment">//首先排除空节点的情况</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 排除了空节点，再排除数值不相同的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left.val != right.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//比较外层和内层</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">outside</span> <span class="operator">=</span> compare(left.left, right.right);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">inside</span> <span class="operator">=</span> compare(left.right, right.left);</span><br><span class="line">        <span class="keyword">return</span> outside &amp;&amp; inside;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><p>推荐方法，递归法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>左子树和右子树的最大深度 <em>l</em> 和 <em>r</em>，那么该二叉树的最大深度即为</p>
<script type="math/tex; mode=display">
m a x ( l , r ) + 1</script><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p>不能简单粗暴的求<code>Math.min(minDepth(root.left),minDepth(root.right))+1</code></p>
<p>因为当左右子树一空一不空的时候，该节点并不是叶子节点，应当选取不为空的分叉继续递归求二叉树的最小深度。</p>
<h3 id="正确解法一：递归"><a href="#正确解法一：递归" class="headerlink" title="正确解法一：递归"></a>正确解法一：递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1、到达叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> minDepth(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> minDepth(root.right);</span><br><span class="line">        <span class="comment">//2、左右子树有一个为空，选择不为空的的分支，l和r其中国一个必为0</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> || root.right == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> l + r + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//3、左右子树均不为空，子树最短路径+1</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(l, r) + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>情况1和二可以合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> minDepth(root.left);</span><br><span class="line">       <span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> minDepth(root.right);</span><br><span class="line">       <span class="comment">//1.如果左孩子和右孩子有为空的情况，直接返回m1+m2+1</span></span><br><span class="line">       <span class="comment">//2.如果都不为空，返回较小深度+1</span></span><br><span class="line">       <span class="keyword">return</span> root.left == <span class="literal">null</span> || root.right == <span class="literal">null</span> ? m1 + m2 + <span class="number">1</span> : Math.min(m1,m2) + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="正确解法二：层序遍历"><a href="#正确解法二：层序遍历" class="headerlink" title="正确解法二：层序遍历"></a>正确解法二：层序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                cur = queue.poll();</span><br><span class="line">                <span class="comment">//如果当前节点的左右孩子都为空，直接返回最小深度</span></span><br><span class="line">                <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) queue.offer(cur.left);</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) queue.offer(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h2><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>前序遍历，左右子树翻转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvertBinTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        preOrderInvertTree(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrderInvertTree</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        swapChild(node);</span><br><span class="line">        preOrderInvertTree(node.left);</span><br><span class="line">        preOrderInvertTree(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swapChild</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> node.right;</span><br><span class="line">        node.right = node.left;</span><br><span class="line">        node.left = tmpNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h2><p>给你一棵 <strong>完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p>
<blockquote>
<p>先求它的左子树的节点数量，再求右子树的节点数量，最后取总和再加一 （加1是因为算上当前中间节点）就是目前节点为根节点的节点数量。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>比较每一个节点的左右子树的高度差是否大于1</p>
<h3 id="错误解法"><a href="#错误解法" class="headerlink" title="错误解法"></a>错误解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxDepthBalance(root) != -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepthBalance</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(maxDepthBalance(node.left) - maxDepthBalance(node.right)) &gt; <span class="number">1</span> ? -<span class="number">1</span> : Math.max(maxDepthBalance(node.left), maxDepthBalance(node.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>没有考虑到<code>maxDepthBalance(node.left) - maxDepthBalance(node.right)</code>其中或许已经存在-1这种结果而不是真实的高度了</p>
<h3 id="正确解法"><a href="#正确解法" class="headerlink" title="正确解法"></a>正确解法</h3><p>如果当前传入节点为根节点的二叉树已经不是二叉平衡树了，还返回高度的话就没有意义了。</p>
<p>所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> maxDepthBalance(root) != -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepthBalance</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> maxDepthBalance(node.left);</span><br><span class="line">       <span class="keyword">if</span> (leftDepth == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> maxDepthBalance(node.right);</span><br><span class="line">       <span class="keyword">if</span> (rightDepth == -<span class="number">1</span>)</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (Math.abs(leftDepth - rightDepth) &gt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257.二叉树的所有路径"></a>257.二叉树的所有路径</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>采用采用递归和回溯的方法求取所有路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="comment">//traversal方法</span></span><br><span class="line">    List&lt;Integer&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//已经遍历的节点</span></span><br><span class="line">    traversal(root, paths, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode node, List&lt;Integer&gt; paths, List&lt;String&gt; res)</span> &#123;</span><br><span class="line">        paths.add(node.val);<span class="comment">//加入当前节点到路径</span></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; paths.size() - <span class="number">1</span>; i++) &#123;<span class="comment">// 将paths里记录的路径转为string格式</span></span><br><span class="line">                sb.append(paths.get(i)).append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(paths.get(paths.size() - <span class="number">1</span>));<span class="comment">//加上最后一个节点（单独处理）</span></span><br><span class="line">            res.add(sb.toString());<span class="comment">//加入一个叶子节点的路径</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历左右节点路径，并回溯</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            traversal(node.left, paths, res);</span><br><span class="line">            paths.remove(paths.size() - <span class="number">1</span>);<span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            traversal(node.right, paths, res);</span><br><span class="line">            paths.remove(paths.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>采用不断生长公共子节点的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        growthTraversal(root, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">growthTraversal</span><span class="params">(TreeNode node, String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s).append(node.val).toString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s).append(node.val).append(<span class="string">&quot;-&gt;&quot;</span>).toString();</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        growthTraversal(node.left, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        growthTraversal(node.right, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><blockquote>
<p>使用StringBuilder进行字符串拼接通常比直接使用字符串相加的方式更高效。这是因为StringBuilder是可变的，允许在同一对象上进行多次追加操作，而不会每次都创建一个新的字符串对象。</p>
</blockquote>
<h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h2><p>给定二叉树的根节点 <code>root</code> ，返回所有左叶子之和。</p>
<h3 id="法一-基于DFS"><a href="#法一-基于DFS" class="headerlink" title="法一 基于DFS"></a>法一 基于DFS</h3><p>基于深度层序遍历，累加左叶子之和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    levelOrder(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLeaf(node.left)) &#123;</span><br><span class="line">            res += node.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        levelOrder(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        levelOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h2><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p>
<p>假设二叉树中至少有一个节点。</p>
<p><strong>示例 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg" alt="img" style="zoom:67%;" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,null,5,6,null,null,7]</span><br><span class="line">输出: 7</span><br></pre></td></tr></table></figure>
<h3 id="法一-基于广度优先遍历"><a href="#法一-基于广度优先遍历" class="headerlink" title="法一 基于广度优先遍历"></a>法一 基于广度优先遍历</h3><p>不断更新每一层的节点的最左边的的节点值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindBottomLeftValue</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        BFSFindBottomLeftValue(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BFSFindBottomLeftValue</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) res = tmp.val;</span><br><span class="line">                <span class="keyword">if</span> (tmp.left != <span class="literal">null</span>) queue.offer(tmp.left);</span><br><span class="line">                <span class="keyword">if</span> (tmp.right != <span class="literal">null</span>) queue.offer(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="法二-基于深度优先搜索-递归"><a href="#法二-基于深度优先搜索-递归" class="headerlink" title="法二 基于深度优先搜索-递归"></a>法二 基于深度优先搜索-递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindBottomLeftValueRecursive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">Deep</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        preOrderFindLeftBottomValue(root, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrderFindLeftBottomValue</span><span class="params">(TreeNode node, <span class="type">int</span> deep)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deep &gt; Deep) &#123;</span><br><span class="line">                Deep = deep;</span><br><span class="line">                value = node.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        preOrderFindLeftBottomValue(node.left, deep + <span class="number">1</span>);</span><br><span class="line">        preOrderFindLeftBottomValue(node.right, deep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112.路径总和"></a>112.路径总和</h2><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>
<h3 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>找到所有路径，然后求和</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasPathSum</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        getPath(root, path);</span><br><span class="line">        <span class="keyword">return</span> compareSum(paths, targetSum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPath</span><span class="params">(TreeNode node, List&lt;Integer&gt; path)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 创建 path 的副本</span></span><br><span class="line">        List&lt;Integer&gt; copyOfPath = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path);</span><br><span class="line">        copyOfPath.add(node.val);</span><br><span class="line">        <span class="comment">//叶子节点，加入路径</span></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            paths.add(copyOfPath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右节点，继续向下遍历</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) getPath(node.left, copyOfPath);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) getPath(node.right, copyOfPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareSum</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; paths, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; sums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; path : paths) &#123;</span><br><span class="line">            <span class="comment">//求每条路径和</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmpSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : path) &#123;</span><br><span class="line">                tmpSum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmpSum == targetSum) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h3><h4 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 叶子节点直接在这里结束。因为传入null，一定就是false，那整颗树就一定是false</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> targetSum == root.val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">newTargetSum</span> <span class="operator">=</span> targetSum - root.val;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leftHasPathSum</span> <span class="operator">=</span> hasPathSum(root.left, newTargetSum);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rightHasPathSum</span> <span class="operator">=</span> hasPathSum(root.right, newTargetSum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leftHasPathSum || rightHasPathSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h2><p>给定一个不重复的整数数组 <code>nums</code> 。 <strong>最大二叉树</strong> 可以用下面的算法从 <code>nums</code> 递归地构建:</p>
<ol>
<li>创建一个根节点，其值为 <code>nums</code> 中的最大值。</li>
<li>递归地在最大值 <strong>左边</strong> 的 <strong>子数组前缀上</strong> 构建左子树。</li>
<li>递归地在最大值 <strong>右边</strong> 的 <strong>子数组后缀上</strong> 构建右子树。</li>
</ol>
<p>返回 <code>nums</code> 构建的 <strong>最大二叉树</strong> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructMaximumBinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildHelper(nums, <span class="number">0</span>, nums.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">buildHelper</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">//叶子节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line">        <span class="keyword">if</span> (right - left == <span class="number">1</span>) &#123;</span><br><span class="line">            node.val = nums[left];</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空叶子</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归构建左子树、右子树</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> getMaxIndex(nums, left, right);</span><br><span class="line">        node.val = nums[maxIndex];</span><br><span class="line">        node.left = buildHelper(nums, left, maxIndex);</span><br><span class="line">        node.right = buildHelper(nums, maxIndex + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取局部数组的最大值索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMaxIndex</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; maxValue) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">                maxValue = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h2><p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p>
<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p>
<p>返回合并后的二叉树。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">if</span> (root2 == <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line">        root1.val += root2.val;</span><br><span class="line">        root1.left = mergeTrees(root1.left, root2.left);</span><br><span class="line">        root1.right = mergeTrees(root1.right, root2.right);</span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h2><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p>
<p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root.val == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> searchBST(root.left, val);</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归，利用二叉搜索树特点，优化</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root.val == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h2><p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p>
<p><strong>有效</strong>二叉搜索树定义如下：</p>
<ul>
<li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li>
<li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li>
<li>所有左子树和右子树自身必须也是二叉搜索树。</li>
</ul>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>中序遍历二叉树，如果不是递增的就不是二叉搜索树</p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ol>
<li>中序遍历，递归法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       inOrder(root.left);</span><br><span class="line">       queue.offer(root.val);</span><br><span class="line">       inOrder(root.right);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>左边数值&gt;=右边数值均为false</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node1 &gt;= node2) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>变量不能作为for循环的边界</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">queueSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queueSize - <span class="number">1</span>; i++) </span><br></pre></td></tr></table></figure>
<h3 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    inOrder(root);</span><br><span class="line">    <span class="type">int</span> <span class="variable">queueSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queueSize - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">node1</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node2</span> <span class="operator">=</span> queue.peek();</span><br><span class="line">        <span class="keyword">if</span> (node1 &gt;= node2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root.left);</span><br><span class="line">    queue.offer(root.val);</span><br><span class="line">    inOrder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推荐代码-中序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="variable">pre</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!isValidBST(root.left)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre &gt; root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root.val;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h2><p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 <strong>树中任意两不同节点值之间的最小差值</strong> 。</p>
<p>差值是一个正数，其数值等于两值之差的绝对值。</p>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>中序遍历，求得到的数组两点间的绝对值最小值</p>
<h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><ol>
<li>成员变量一定要初始化，不然会是空</li>
<li>初始最小值一定要设的足够大</li>
</ol>
<h3 id="总代码-1"><a href="#总代码-1" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    inOrder(root);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="type">int</span> <span class="variable">minAbsDis</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> list.get(i + <span class="number">1</span>) - list.get(i);</span><br><span class="line">        <span class="keyword">if</span> (minAbsDis &gt; tmp) &#123;</span><br><span class="line">            minAbsDis = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minAbsDis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root.left);</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    inOrder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h2><p>给你一个含重复值的二叉搜索树(BST)的根节点root,，找出并返回BST中的所有众数(即，出现频率最高的元素)。<br>如果树中有不止一个众数，可以按任意顺序返回。<br>假定BST满足如下定义：</p>
<ol>
<li>结点左子树中所含节点的值小于等于当前节点的值</li>
<li>结点右子树中所含节点的值大于等于当前节点的值</li>
<li>左子树和右子树都是二叉搜索树</li>
</ol>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><ul>
<li>中序遍历</li>
<li>弄一个指针指向前一个节点，这样每次cur（当前节点）才能和pre（前一个节点）作比较。</li>
<li>而且初始化的时候pre = NULL，这样当pre为NULL时候，我们就知道这是比较的第一个元素。</li>
<li>与前一个节点数值不同，新值count = 1</li>
<li>与前一个节点数值相同，count加1</li>
<li>频率count 等于 maxCount（最大频率），当然要把这个元素加入到结果集中</li>
<li>count&gt;maxCount,清除以前的众数，添加当前元素</li>
<li>指针后移</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindMode2</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; resList;</span><br><span class="line">    <span class="type">int</span> maxCount;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    TreeNode pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        maxCount = <span class="number">0</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        pre = <span class="literal">null</span>;</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[resList.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; resList.size(); i++) &#123;</span><br><span class="line">            res[i] = resList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inOrder(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">nodeValue</span> <span class="operator">=</span> root.val;</span><br><span class="line">        <span class="comment">//相同数值，增加频数</span></span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; nodeValue == pre.val) &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//第一次出现</span></span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == maxCount) resList.add(nodeValue);</span><br><span class="line">        <span class="keyword">if</span> (count &gt; maxCount) &#123;</span><br><span class="line">            maxCount = count;</span><br><span class="line">            resList.clear();</span><br><span class="line">            resList.add(nodeValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后移前指针</span></span><br><span class="line">        pre = root;</span><br><span class="line"></span><br><span class="line">        inOrder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p><a href="https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。</p>
<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>情况一：如果找到一个节点，发现左子树出现结点p，右子树出现节点q，或者 左子树出现结点q，右子树出现节点p，那么该节点就是节点p和q的最近公共祖先。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922173502.png" alt="img" style="zoom:50%;" /></p>
<p>情况二：节点本身p(q)，它拥有一个子孙节点q(p)</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922173530.png" alt="img" style="zoom:50%;" /></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/03/05/69347_Snipaste_2024-03-05_20-12-07.png" alt="Snipaste_2024-03-05_20-12-07" style="zoom: 50%;" /></p>
<p>情况一二代码的实现逻辑一样，即：<strong>如果递归遍历遇到q，就将q返回，遇到p 就将p返回，那么如果左右子树的返回值都不为空，说明此时的中节点，一定是q 和p 的最近祖先。</strong></p>
<p><strong>注意：利用后续遍历</strong></p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LowestCommonAncestor2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == p || root == q || root == <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235.二叉搜索树的最近公共祖先"></a>235.二叉搜索树的最近公共祖先</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p><a href="https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>我们从根节点搜索，第一次遇到cur节点是数值在[q, p]区间中，即节点5，此时可以说明 q 和 p 一定分别存在于节点5的左子树，和右子树中。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h2><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。</p>
<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>根据二叉搜索树的特性，不断递归，找到可以插入的叶子节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; val &amp;&amp; root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            insertIntoBST(root.left, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; val &amp;&amp; root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            insertIntoBST(root.right, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) &#123;</span><br><span class="line">            root.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; val) &#123;</span><br><span class="line">            root.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>简化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="comment">// 如果当前节点为空，也就意味着val找到了合适的位置，此时创建节点直接返回。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; val)&#123;</span><br><span class="line">        root.right = insertIntoBST(root.right, val); <span class="comment">// 递归创建右子树</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val)&#123;</span><br><span class="line">        root.left = insertIntoBST(root.left, val); <span class="comment">// 递归创建左子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450.删除二叉搜索树中的节点"></a>450.删除二叉搜索树中的节点</h2><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>
<h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><ul>
<li>第一种情况：没找到删除的节点，遍历到空节点直接返回了</li>
<li>找到删除的节点<ul>
<li>第二种情况：左右孩子都为空（叶子节点），直接删除节点， 返回NULL为根节点</li>
<li>第三种情况：删除节点的左孩子为空，右孩子不为空，删除节点，右孩子补位，返回右孩子为根节点</li>
<li>第四种情况：删除节点的右孩子为空，左孩子不为空，删除节点，左孩子补位，返回左孩子为根节点</li>
<li>第五种情况：左右孩子节点都不为空，则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。</li>
</ul>
</li>
</ul>
<p><img src="https://code-thinking.cdn.bcebos.com/gifs/450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.gif" alt="450.删除二叉搜索树中的节点"></p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">//没有找到，返回空指针</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//当前节点为删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">            <span class="comment">//删除的节点左右子树至少有一个为空,3种情况</span></span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="literal">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">                <span class="comment">//左右子树均不为空，当前节点左子树插入右子树的最左端叶子节点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">insertPos</span> <span class="operator">=</span> root.right;</span><br><span class="line">                <span class="keyword">while</span> (insertPos.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    insertPos = insertPos.left;</span><br><span class="line">                &#125;</span><br><span class="line">                insertPos.left = root.left;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除节点在左边</span></span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; key) root.left = deleteNode(root.left, key);</span><br><span class="line">        <span class="comment">//删除节点在右边</span></span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; key) root.right = deleteNode(root.right, key);</span><br><span class="line">        <span class="comment">//返回根节点</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a>669. 修剪二叉搜索树</h2><p>给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201014173219142.png" alt="669.修剪二叉搜索树1" style="zoom:50%;" /></p>
<h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><ol>
<li>修剪的操作并不是在终止条件上进行的，所以就是遇到空节点返回就可以了。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>确定单层递归的逻辑：</li>
</ol>
<ul>
<li>如果root（当前节点）的元素小于low的数值，那么应该递归右子树，并返回右子树符合条件的头结点。</li>
<li>如果root(当前节点)的元素大于high的，那么应该递归左子树，并返回左子树符合条件的头结点。</li>
</ul>
<ol>
<li><p>接下来要将下一层处理完左子树的结果赋给root-&gt;left，处理完右子树的结果赋给root-&gt;right。</p>
</li>
<li><p>最后返回root节点</p>
</li>
</ol>
<h3 id="代码实现-递归"><a href="#代码实现-递归" class="headerlink" title="代码实现-递归"></a>代码实现-递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//当前节点小于low，判断当前右子树是否有在[low,high]区间的节点</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; low) &#123;</span><br><span class="line">        <span class="keyword">return</span> trimBST(root.right, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前节点大于high，判断当前左子树是否有在[low,high]区间的节点</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span> trimBST(root.left, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    root.left = trimBST(root.left, low, high);<span class="comment">// root-&gt;left接入符合条件的左孩子</span></span><br><span class="line">    root.right = trimBST(root.right, low, high);<span class="comment">// root-&gt;right接入符合条件的右孩子</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码实现-迭代-了解"><a href="#代码实现-迭代-了解" class="headerlink" title="代码实现-迭代-了解"></a>代码实现-迭代-了解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//iteration</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">null</span> &amp;&amp; (root.val &lt; low || root.val &gt; high))&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val &lt; low)</span><br><span class="line">                root = root.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//deal with root&#x27;s left sub-tree, and deal with the value smaller than low.</span></span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curr.left != <span class="literal">null</span> &amp;&amp; curr.left.val &lt; low)&#123;</span><br><span class="line">                curr.left = curr.left.right;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//go back to root;</span></span><br><span class="line">        curr = root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//deal with root&#x27;s righg sub-tree, and deal with the value bigger than high.</span></span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curr.right != <span class="literal">null</span> &amp;&amp; curr.right.val &gt; high)&#123;</span><br><span class="line">                curr.right = curr.right.left;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code_Musing</category>
      </categories>
      <tags>
        <tag>binaryTree</tag>
        <tag>traversal</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程基础</title>
    <url>/2024/03/06/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul>
<li>JUC</li>
<li>进程线程</li>
<li>线程常用方法</li>
<li>线程的6种状态</li>
<li>线程状态切换</li>
<li>Callable接口</li>
</ul>
<span id="more"></span>
<h2 id="什么是J-U-C"><a href="#什么是J-U-C" class="headerlink" title="什么是J.U.C"></a>什么是J.U.C</h2><p>JUC是<code>java.util.concurrent</code>包的缩写，包结构如下，说⽩了就是<strong>并发场景进⾏多线程编程</strong>的⼯具<br>类。</p>
<p>怎么让程序尽量通过<strong>有限的硬件</strong>，⾼效的处理请求，并且保证程序“<strong>线程安全</strong>”⽽这涉及到的知识点⾮常的庞⼤。</p>
<h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><p>在操作系统中，<strong>进程是基本的资源分配单位</strong>，操作系统通过进程来管理计算机的资源，如CPU、内存、磁盘等。每个进程都有⼀个唯⼀的<strong>进程标识符</strong>（PID），⽤于区分不同的进程。<br>通俗说法：可看做是正在执⾏的程序如 QQ.exe</p>
<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>底层⻆度：<strong>线程是操作系统中的基本执⾏单元</strong>（能够直接执⾏的最⼩代码块），它是进程中的⼀个实<br>体，是<strong>CPU调度和分派的基本单位</strong>。⼀个进程可以包含多个线程，每个线程都可以独⽴执⾏不同的任<br>务，但它们共享进程的资源。</p>
<h2 id="并⾏、并发、串⾏"><a href="#并⾏、并发、串⾏" class="headerlink" title="并⾏、并发、串⾏"></a>并⾏、并发、串⾏</h2><p><strong>并发</strong>是指多个任务在<strong>同一时间段内</strong>交替执行。这些任务可能会在同一个处理器上通过<strong>时间片轮转</strong>或者通过操作系统的调度器分配资源交替执行。</p>
<p><strong>并行</strong>是指在<strong>同一时刻</strong>，多个任务同时执行。这些任务可以在多个处理器上同时执行。并行的主要目的是提高系统的整体性能和吞吐量。</p>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><ol>
<li>通过继承Thread，重写run</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol>
<li>通过实现Runnable</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// new Runnable匿名内部类</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;线程Runnable&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;线程Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="线程常⽤⽅法"><a href="#线程常⽤⽅法" class="headerlink" title="线程常⽤⽅法"></a>线程常⽤⽅法</h2><h3 id="线程原理"><a href="#线程原理" class="headerlink" title="线程原理"></a>线程原理</h3><p>都会调用start方法，然后执行我们的<strong>start0</strong>这个原生本地方法，底层是c/c++代码，执行后回调run方法，run方法有一个Runnable类型的target判断，不为空执行Runnable.run,继承Thread方法的话直接执行run。</p>
<h3 id="start-与-run"><a href="#start-与-run" class="headerlink" title="start 与 run"></a>start 与 run</h3><p><strong>类型</strong><br>run⽅法是同步⽅法，⽽start⽅法是异步⽅法。<br><strong>作⽤</strong><br>run⽅法的作⽤是存放任务代码，⽽start的⽅法呢是启动线程<br><strong>线程数量⽅⾯</strong><br>执⾏run⽅法它不会产⽣新线程，⽽执⾏start⽅法会产⽣新线程，<br><strong>调⽤次数</strong><br>run⽅法可以被执⾏⽆数次，⽽star⽅法只能被执⾏⼀次，原因就在于线程不能被重复启动。</p>
<h3 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;睡眠完毕&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">// 线程中断</span></span><br><span class="line"><span class="comment">//        t1.interrupt();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p><strong>在循环访问锁的过程中，可以加⼊sleep让线程阻塞时间，防⽌⼤量占⽤cpu资源。</strong></p>
<p>比如Tomcat</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    awaitThread = currentThread;</span><br><span class="line">    <span class="keyword">while</span> (!stopAwait) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            <span class="comment">// continue and check the flag</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    awaitThread = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="yeild"><a href="#yeild" class="headerlink" title="yeild"></a>yeild</h3><p>提示线程调度器尽⼒让出当前线程对CPU的使⽤</p>
<ul>
<li>Thread.yield()方法作用是：暂停当前正在执行的线程对象（及放弃当前拥有的cu资源)，并执行其他线程。</li>
<li><strong>yield()做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会</strong>。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，<strong>实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Task2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;B:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>sleep()和yield()的区别 sleep()使当前线程进⼊停滞状态，所以执⾏sleep()的线程在指定的时间内肯定不会被执⾏； yield()只是使当前线程重新回到可执⾏状态，所以执⾏yield()的线程有可能在进⼊到可执⾏状态后⻢上⼜被执⾏。</p>
</blockquote>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread1.setPriority(Thread.MAX_PRIORITY);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NORM_PRIORITY</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h3 id="线程打断"><a href="#线程打断" class="headerlink" title="线程打断"></a>线程打断</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interrupt</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p><strong>实例⽅法</strong>interrupt()仅仅是设置线程的中断状态为true，不会停⽌线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 定时监控系统...</span></span><br><span class="line">            System.out.println(<span class="string">&quot;定时监控...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">定时监控...</span><br><span class="line">定时监控...</span><br><span class="line">定时监控...</span><br><span class="line">定时监控...</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">interrupted</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p><strong>静态⽅法</strong>，判断线程是否被中断，并清除当前中断状态<br>也就是说这个⽅法做了两件事：<br>1、返回当前线程的中断状态<br>2、将当前线程的中断状态设为false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Thread thread = new Thread(() -&gt; &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            // 每隔1s 将时间片清除</span><br><span class="line">            try &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(1L);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                // 当出现InterruptedException  会清除中断标记      false</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                // 再次加上中断标记</span><br><span class="line">                Thread.currentThread().interrupt();      // true</span><br><span class="line">            &#125;</span><br><span class="line">            //  如果中断的标记为true</span><br><span class="line">            // 获取线程中断标记，  并且会清除标记</span><br><span class="line">            System.out.println(Thread.currentThread().isInterrupted());</span><br><span class="line">            if (Thread.interrupted()) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().isInterrupted());</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 定时监控系统...</span><br><span class="line">            System.out.println(&quot;定时监控...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程的合并join"><a href="#线程的合并join" class="headerlink" title="线程的合并join"></a>线程的合并join</h3><p>Thread中， <code>join()</code>⽅法的作⽤是调⽤线程等待该线程完成后，才能继续往下运⾏。</p>
<p>join是Thread类的⼀个⽅法，启动线程后直接调⽤，即join()的作⽤是：“等待该线程终⽌”，这⾥需要<br>理解的就是该线程是指的<strong>主线程等待⼦线程的终⽌</strong>。也就是在⼦线程调⽤了join()⽅法后⾯的代码，只有<br>等到⼦线程结束了才能执⾏。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1.start();<span class="comment">// 异步</span></span><br><span class="line">System.out.println(t1.isAlive());<span class="comment">//true</span></span><br><span class="line">t1.join();  <span class="comment">// 异步变成同步</span></span><br><span class="line">System.out.println(t1.isAlive());<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>也可以有时间限制的等待</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1.join(<span class="number">1000</span>); </span><br></pre></td></tr></table></figure>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>默认情况下我们创建的线程都是⽤户线程（普通线程），进程需要等待所有的线程执⾏完毕后，进<br>程才会结束。<br>守护线程.setDaemon(true):设置守护线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeamonThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程(默认前台线程)</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置线程为守护线程</span></span><br><span class="line">        d1.setDaemon(<span class="literal">true</span>);<span class="comment">//主线程结束便结束了</span></span><br><span class="line">        d1.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主线程结束</p>
</blockquote>
<p><strong>应⽤：</strong><br>垃圾回收器线程属于守护线程<br>tomcat⽤来接受处理外部的请求的线程就是守护线程。</p>
<h2 id="线程6种状态"><a href="#线程6种状态" class="headerlink" title="线程6种状态"></a>线程6种状态</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">状态名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NEW</td>
<td style="text-align:left">初始状态，线程被构建，但是还没有调用start()方法</td>
</tr>
<tr>
<td style="text-align:left">RUNNABLE</td>
<td style="text-align:left">运行状态，Java线程将操作系统中的就绪和运行两种状态统称为”运行中”</td>
</tr>
<tr>
<td style="text-align:left">BLOCKED</td>
<td style="text-align:left">阻塞状态，表示线程阻塞于锁</td>
</tr>
<tr>
<td style="text-align:left">WAITING</td>
<td style="text-align:left">等待状态，表示线程进入等待状态，进入该状态表示当前线程需要其他线程通知(notify或者notifyAll)</td>
</tr>
<tr>
<td style="text-align:left">TIME_WAITING</td>
<td style="text-align:left">超时等待状态，可以指定等待时间自己返回</td>
</tr>
<tr>
<td style="text-align:left">TERMINATED</td>
<td style="text-align:left">终止状态，表示当前线程已经执行完毕</td>
</tr>
</tbody>
</table>
</div>
<h3 id="BLOCKED"><a href="#BLOCKED" class="headerlink" title="BLOCKED"></a>BLOCKED</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table table = new Table();</span><br><span class="line">Thread student1 = new Thread(() -&gt; &#123;</span><br><span class="line">    table.use();</span><br><span class="line">&#125;, &quot;s1&quot;);</span><br><span class="line">Thread student2 = new Thread(() -&gt; &#123;</span><br><span class="line">    table.use();</span><br><span class="line">&#125;, &quot;s2&quot;);</span><br><span class="line">student1.start();</span><br><span class="line">Thread.sleep(1000);</span><br><span class="line">student2.start();</span><br><span class="line">Thread.sleep(500);</span><br><span class="line">System.out.println(student2.getState());</span><br></pre></td></tr></table></figure>
<p><code>Thread.sleep(1000)</code>的作用是确保student1已经获取了锁，<code>Thread.sleep(500)</code>的作用是确保student2尝试获取锁，但是锁被student1获取没有释放，因此student2是阻塞状态。</p>
<h3 id="WAITING"><a href="#WAITING" class="headerlink" title="WAITING"></a>WAITING</h3><p>会一直卡在wait()那。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Table1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-使用桌子&quot;</span>);</span><br><span class="line">        <span class="comment">//忘记点餐了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;忘记点餐了&quot;</span>);</span><br><span class="line">        wait();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;就餐结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TIMED-WAITING"><a href="#TIMED-WAITING" class="headerlink" title="TIMED_WAITING"></a>TIMED_WAITING</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wait(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="线程状态间转换"><a href="#线程状态间转换" class="headerlink" title="线程状态间转换"></a>线程状态间转换</h2><h3 id="Blocked-进⼊-Runnable"><a href="#Blocked-进⼊-Runnable" class="headerlink" title="Blocked 进⼊ Runnable"></a>Blocked 进⼊ Runnable</h3><p>想要从 Blocked 状态进⼊ Runnable 状态，我们上⾯说过必须要线程获得 monitor 锁，但是如果想<br>进⼊其他状态那么就相对⽐较特殊，因为它是没有超时机制的，也就是不会主动进⼊。</p>
<h3 id="Waiting-进⼊-Runnable"><a href="#Waiting-进⼊-Runnable" class="headerlink" title="Waiting 进⼊ Runnable"></a>Waiting 进⼊ Runnable</h3><ul>
<li>有当执⾏了LockSupport.unpark()，或者join的线程运⾏结束，或者被中断时才可以进⼊Runnable 状态。</li>
<li>如果通过其他线程调⽤ notify() 或 notifyAll()来唤醒它，则它会直接进⼊ Blocked 状态，这⾥⼤家<br>可能会有疑问，不是应该直接进⼊ Runnable 吗？<strong>这⾥需要注意⼀点，因为唤醒 Waiting 线程的线程如果调⽤ notify() 或 notifyAll()，要求必须⾸先持有该 monitor锁</strong>，这也就是我们说的 wait()、notify 必须在 synchronized 代码块中。</li>
<li>所以处于Waiting状态的线程被唤醒时拿不到该锁，就会进⼊Blocked状态，直到执⾏了notify（）/notifyAll（）的唤醒它的线程执⾏完毕并释放monitor锁，才可能轮到它去抢夺这把锁，如果它能抢到，就会从Blocked状态回到Runnable状态。</li>
</ul>
<h2 id="Callable接⼝"><a href="#Callable接⼝" class="headerlink" title="Callable接⼝"></a>Callable接⼝</h2><p>⼀般情况下，使⽤Runnable接⼝、Thread实现的线程我们都是⽆法返回结果的。但是如果对⼀些场合需要线程返回的结果。就要使⽤⽤<strong>Callable、Future</strong>这⼏个类。Callable只能在ExecutorService的线程池中跑，但有返回结果，也可以通过返回的Future对象查询执⾏状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Callable</span>&lt;V&gt; &#123;</span><br><span class="line">V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它只有⼀个call⽅法，并且有⼀个返回V，是泛型。可以认为这⾥返回V就是线程返回的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (callable == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="built_in">this</span>.callable = callable;</span><br><span class="line">        <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>第一步，创建Callable实现类的实例，并实现call方法</p>
<p>第2步，创建Callable实现类实例</p>
<p>第3步，使用FutureTask类来包装Callable对象，可以创建匿名对象</p>
<p>第4步，使用FutureTask对象作为Thread对象的target创建、并启动新线程。</p>
<p>第5步，调用FutureTask对象的方法来获取子线程执行结束后的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;2.子线程运行中...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">FutureTask&lt;Integer&gt; future = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(task);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(future).start();</span><br></pre></td></tr></table></figure>
<h2 id="三种线程创建的⽅式"><a href="#三种线程创建的⽅式" class="headerlink" title="三种线程创建的⽅式"></a>三种线程创建的⽅式</h2><ol>
<li>实现Runnable接口的run⽅法</li>
<li>继承Thread类并重写run的⽅法</li>
<li>使⽤FutureTask⽅式(实现Callable接口的⽅式)</li>
</ol>
<p>Java中，类仅⽀持单继承，如果⼀个类继承了Thread类，就⽆法再继承其它类，因此，<strong>如果⼀个类既要</strong><br><strong>继承其它的类，⼜必须创建为⼀个线程，就可以使⽤实现Runable接⼝的⽅式。</strong></p>
<p>使⽤实现Callable接口的⽅式创建的线程，可以获取到线程执⾏的<strong>返回值</strong>、是否执⾏完成等信息。</p>
<h3 id="Runnable和Callable区别"><a href="#Runnable和Callable区别" class="headerlink" title="Runnable和Callable区别"></a>Runnable和Callable区别</h3><ol>
<li>返回值：实现Callable接口的任务线程能返回执⾏结果；⽽实现Runnable接口的任务线程不能返回结果</li>
<li>抛出异常：Callable接口的call()⽅法允许抛出异常；⽽Runnable接口的run()⽅法的异常只能在内部消化，不能继续上抛；</li>
</ol>
]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>JUC</tag>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程基础-线程池</title>
    <url>/2024/03/07/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul>
<li>线程池概念 特性</li>
<li>创建线程EXecutors</li>
<li>自定义创建线程ThreadPoolExecutor</li>
<li>源码分析：创建、淘汰、异常、中断</li>
</ul>
<span id="more"></span>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>其实就是⼀个容纳多个线程的容器，其中的线程可以反复使⽤，省去了频繁创建线程对象的操作，⽆需反复创建线程⽽消耗过多资源。</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>线程池做的⼯作主要是<strong>控制运⾏的线程数量</strong>，处理过程中<strong>将任务放⼊队列</strong>，然后在线程创建后启动这些任务，如果线程数量超过了最⼤数量，超出数量的线程排队等候，等其他线程执⾏完毕，再从队列中取出任务来执⾏。</p>
<p><strong>降低资源消耗</strong>。通过重复利⽤已创建的线程降低线程创建和销毁造成的销耗。</p>
<p><strong>提⾼响应速度</strong>。当任务到达时，任务可以不需要等待线程创建就能⽴即执⾏。</p>
<p><strong>提⾼线程的可管理性</strong>。线程是稀缺资源，如果⽆限制的创建，不仅会销耗系统资源，还会降低系统的稳定性，使⽤线程池可以进⾏<strong>统⼀的分配，调优和监控</strong></p>
<h2 id="线程池-初试"><a href="#线程池-初试" class="headerlink" title="线程池-初试"></a>线程池-初试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    executorService.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            list.add(random.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">executorService.shutdown();</span><br><span class="line">executorService.awaitTermination(<span class="number">1</span>, TimeUnit.DAYS);  </span><br></pre></td></tr></table></figure>
<h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>Java⾥⾯线程池的顶级接口是 java.util.concurrent.Executor ，但是严格意义上讲 Executor并不是⼀个线程池，⽽只是⼀个执⾏线程的⼯具。真正的线程池接接口是<code>java.util.concurrent.ExecutorService</code> 。</p>
<ul>
<li><code>newFixedThreadPool</code>创建⼀个固定⻓度的线程池，当到达线程最⼤数量时，线程池的规模将不再变化。</li>
<li><code>newCachedThreadPool</code>创建⼀个可缓存的线程池，如果当前线程池的规模超出了处理需求，将回收空的线程；当需求增加时，会增加线程数量；线程池规模⽆限制。</li>
<li><code>newSingleThreadPoolExecutor</code>创建⼀个单线程的Executor，确保任务对了，串⾏执⾏</li>
<li><code>newScheduledThreadPool</code>创建⼀个固定⻓度的线程池，⽽且以延迟或者定时的⽅式来执⾏，类似 Timer；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;\t 办理业务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><p>newFixedThreadPool创建的线程池corePoolSize和maximumPoolSize值是相等的，它使⽤<br>的是<code>LinkedBlockingQueue</code>执⾏⻓期任务性能好，创建⼀个线程池，<strong>⼀池有N个固定的线程</strong>，有固定线程<br>数的线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    threadPool.shutdownNow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h3><p>newSingleThreadExecutor 创建的线程池corePoolSize和maximumPoolSize值都是1，它使⽤的是<code>LinkedBlockingQueue</code>⼀个任务⼀个任务的执⾏，⼀池⼀线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br></pre></td></tr></table></figure>
<h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><p>newCachedThreadPool创建的线程池将corePoolSize设置为0，将maximumPoolSize设置<br>为<code>Integer.MAX_VALUE</code>，它使⽤的是<code>SynchronousQueue</code>，也就是说<strong>来了任务就创建线程运⾏，当线程</strong><br><strong>空闲超过60秒，就销毁线程</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure>
<h3 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h3><p><strong>可以固定线程池线程数和延迟固定时间执行任务</strong>，类型是<code>ScheduledExecutorService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>执行任务也有所不同<code>schedule</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">threadPool.schedule(task, <span class="number">5</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
<h3 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h3><p>如果没有关闭线程池，线程池中线程一直占用系统资源，内存泄露，主线程只会不会退出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不会立马停止正在执行的线程，会等待所有的任务执行完后才彻底关闭</span></span><br><span class="line">threadPool.shutdown();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断线程池是否关闭，异步</span></span><br><span class="line">threadPool.isTerminated()</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等待线程池关闭，等待线程池中所有的线程执行完，最多等待Long.MAX_VALUE的时间，同步</span></span><br><span class="line">threadPool.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不会立马停止正在执行的线程，只会等待正在执行的线程执行完后才彻底关闭，异步</span></span><br><span class="line"><span class="comment">//举例，线程池5个任务执行完毕后就会关闭，不管10个任务没有执行完毕</span></span><br><span class="line">threadPool.shutdownNow();</span><br></pre></td></tr></table></figure>
<h2 id="excute和submit"><a href="#excute和submit" class="headerlink" title="excute和submit"></a>excute和submit</h2><p><strong>1.参数</strong></p>
<p>execute Runnable.run</p>
<p>submit callable</p>
<p><strong>2.返回值</strong></p>
<p>execute void</p>
<p>submit Future</p>
<p><strong>3.异常</strong></p>
<p>execute 会在子线程中抛出异常，在主线程捕捉不到</p>
<p>submit不会字码抛出异常，而是会讲一次暂时存起来，等Future.get()方法的时候才会抛出，可以在主线程捕捉，处理异常更方便</p>
<h2 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                        <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                        TimeUnit unit,</span></span><br><span class="line"><span class="params">                        BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                        ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                        RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure>
<p>corePoolSize:核心线程池数量<br>maximumPoolSize:最大线程数量<br>keepAliveTime:非核心线程的空闲状态的存活时间(数字1)<br>unit:时间单位(天、小时、…)<br>workQueue:工作队列（阻塞队列）</p>
<ul>
<li>ArrayBlockingQueue，基于数组结构的有界阻塞队列</li>
<li>LinkedBlockingQueue，⼀个基于链表结构的有界阻塞队列，默认为<code>Integer.MAX_VALUE</code></li>
<li>SynchronousQueue，不存储元素的阻塞队列</li>
<li>DelayQueue，⽀持延时获取元素的⽆界阻塞队列</li>
<li>PriorityBlockingQueue，⼀个具有优先级的⽆限阻塞队列</li>
</ul>
<p>threadFactory：线程⼯⼚，主要⽤来创建线程，一般默认<code>Executors.defaultThreadFactory()</code></p>
<p>handler：表示当拒绝处理任务时的策略，有以下四种取值</p>
<ul>
<li><code>ThreadPoolExecutor.AbortPolicy</code>: :raising_hand_woman:丢弃任务并抛出RejectedExecutionException异常，<strong>常用</strong></li>
<li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</li>
<li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前⾯的任务，然后重新尝试执⾏任务<br>（重复此过程）</li>
<li>ThreadPoolExecutor.CallerRunsPolicy：由调⽤线程处理该任务</li>
</ul>
<h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">               <span class="number">10</span>,</span><br><span class="line">               <span class="number">20</span>,</span><br><span class="line">               <span class="number">0L</span>,</span><br><span class="line">               TimeUnit.SECONDS,</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">10</span>),</span><br><span class="line">               Executors.defaultThreadFactory(),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class="line">       );</span><br><span class="line">       <span class="comment">//10个顾客请求</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">               <span class="type">MyTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTask</span>(i);</span><br><span class="line">               threadPool.execute(task);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           threadPool.shutdown();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>首先提交的10个任务</strong>：这些任务会立即由线程池中的核心线程开始执行。</li>
<li><strong>接下来提交的10个任务</strong>：由于核心线程已经满了，这些任务会被放入阻塞队列中等待执行。</li>
<li><strong>再接下来提交的10个任务</strong>：阻塞队列已满，线程池会创建新的线程来执行这些任务，直到线程池达到最大线程数20。</li>
<li><strong>剩余的70个任务</strong>：由于线程池和阻塞队列都已满，根据<code>AbortPolicy</code>拒绝策略，提交这些任务会导致<code>RejectedExecutionException</code>异常。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line">java.util.concurrent.RejectedExecutionException: Task com.hdb.juclearn.threadpoll.MyTask@728938a9 rejected from java.util.concurrent.ThreadPoolExecutor@21b8d17c[Running, <span class="type">pool</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">20</span>, <span class="type">active</span> <span class="variable">threads</span> <span class="operator">=</span> <span class="number">20</span>, <span class="type">queued</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">10</span>, <span class="type">completed</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">0</span>]</span><br><span class="line">	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:<span class="number">2065</span>)</span><br><span class="line">	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:<span class="number">833</span>)</span><br><span class="line">	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="number">1365</span>)</span><br><span class="line">	at com.hdb.juclearn.threadpoll.C2_CustomeThreadPool.main(C2_CustomeThreadPool.java:<span class="number">23</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>
<h2 id="创建线程方法选用"><a href="#创建线程方法选用" class="headerlink" title="创建线程方法选用"></a>创建线程方法选用</h2><p>超级大坑 在工作中单一的/固定数的/可变的三种创建线程池的方法哪个用的多？</p>
<blockquote>
<p>答案是一个都不用，我们工作中只能使用自定义的</p>
</blockquote>
<p><strong>FixedThreadPool和SingleThreadPool:</strong></p>
<p>允许的请求队列长度为Integer.MAX_VALUE,可能会堆积大量的请求，从而导致O0M。</p>
<p><strong>CachedThreadPool和ScheduledThreadPool:</strong></p>
<p>允许的创建线程数量为Integer.MAX_VALUE,可能会创建大量的线程，从而导致OOM。</p>
<h2 id="Tomcat和JDK线程池区别"><a href="#Tomcat和JDK线程池区别" class="headerlink" title="Tomcat和JDK线程池区别"></a>Tomcat和JDK线程池区别</h2><p>jdk创建线程池执行前是没有线程的，Tomcat创建线程池的构造函数会额外调用<code>prestartAllCoreThreads</code></p>
<p>函数，预先启动所有的核心线程。</p>
<h2 id="线程池如何创建线程"><a href="#线程池如何创建线程" class="headerlink" title="线程池如何创建线程"></a>线程池如何创建线程</h2><ol>
<li><p>未达到核心线程数（假设10个），创建新的线程执行任务</p>
</li>
<li><p>线程保活，通过阻塞队列让线程执行阻塞队列中的任务，没有获取到任务线程就会阻塞</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayBlockingQueue&lt;Runnable&gt; arrayBlockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        Runnable task;</span><br><span class="line">        <span class="keyword">while</span> ((task = arrayBlockingQueue.poll()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            task.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<ol>
<li>阻塞队列满，创建新的线程执行新来的任务，直到达到最大线程数（包括核心线程数）</li>
</ol>
<h2 id="线程池淘汰策略"><a href="#线程池淘汰策略" class="headerlink" title="线程池淘汰策略"></a>线程池淘汰策略</h2><p>假设有200个线程，淘汰到最后只剩10个，就是核心线程，不一定只淘汰后续创建的线程</p>
<p>注意<code>compareAndDecrementWorkerCount</code>，成功的线程被淘汰</p>
<p>Runnable r = timed ?<br>                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :<br>                workQueue.take();</p>
<p>一个是限时阻塞，一个是长期阻塞</p>
<p>从队列获取任务时，允许核心线程超时或者当前线程数大于corePoolSize时，使用poll方法拉取任务，超过keepAliveTimel时返回null,否则使用take方法阻塞拉取任务，直到获取到任务或者线程被中断将<code>timedOut</code>变为false表示非正常超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">getTask</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">timedOut</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 循环调用，其中会判断线程池状态</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c);</span><br><span class="line">    	<span class="comment">// 线程池即将关闭状态，如果阻塞队列中也没有任务了，返回null，runWorker方法没有拿到task则退出while循环，销毁线程。</span></span><br><span class="line">        <span class="comment">// 这里根据shutdown和shutdownNow设置不同的线程池状态走不同的逻辑</span></span><br><span class="line">        <span class="comment">// 如果线程池状态是STOP则直接线程数减1，然后返回null，runWorker方法会退出while循环，线程销毁</span></span><br><span class="line">        <span class="comment">// 如果线程池状态是SHUTDOWN则再看看阻塞队列是否为空，为空则线程数减1，后续线程销毁，不会空则继续获取任务</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="comment">// 获取当前线程数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c);</span><br><span class="line">    	<span class="comment">// 是否允许超时标识，allowCoreThreadTimeOut核心线程是否允许超时</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">timed</span> <span class="operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line">    	<span class="comment">// 非核心线程过多或者允许超时的情况下，如果队列为空则工作线程减1，后续销毁线程，这里就返回null</span></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 允许核心线程超时或者线程数大于核心线程数时，采用poll取数据，非阻塞，超过keepAliveTime没有获取到数据就继续自旋获取任务，</span></span><br><span class="line">            <span class="comment">// 不允许核心线程超时或者线程数小于等于核心线程数时，采用take取数据，阻塞等待直到获取到任务或者被中断</span></span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程异常"><a href="#线程异常" class="headerlink" title="线程异常"></a>线程异常</h2><p>工作线程结束有两种情况，一种是执行任务过程中发生异常，会将异常抛出，当前线程结束销毁（被淘汰掉），但是会创建一个新的线程；</p>
<p>还有一种情况是Woker的task为null或者getTask方法从阻塞队列未获取到任务，线程正常销毁结束。</p>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>将线程池状态设置为SHUTDOWN后不再接受新任务，将阻塞队列的任务执行完成后，线程池关闭。</p>
<h3 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h3><ul>
<li>调用shutdownNow方法会将线程池状态设置为STOP后不再接受新任务，然后将所有线程中断（这里的中断已经拿到任务并执行不会响应中断，是在调用getTask获取下一个任务时看线程池状态为STOP则不会再取阻塞队列任务，直接返回null，然后工作线程销毁</li>
<li>还有一种情况是正在阻塞等待拿任务，阻塞在poll或take上，都会响应中断，然后再一次循环任务返回null），并将未执行的任务返回，线程池关闭。</li>
</ul>
]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>JUC</tag>
        <tag>ThreadPool</tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录-二叉树3</title>
    <url>/2024/03/11/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%953%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p><strong>本节包括：</strong></p>
<ul>
<li>二叉树（部分）</li>
</ul>
<span id="more"></span>
<h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h2><p>给你一个整数数组 <code>nums</code> ，其中元素已经按 升序 排列，请你将其转换为一棵平衡二叉搜索树。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>本质就是寻找分割点，分割点作为当前节点，然后递归左区间和右区间</strong>。</p>
<p>分割点就是数组中间位置的节点。</p>
<p>采用[left,right]左闭右闭</p>
<h3 id="越界注意"><a href="#越界注意" class="headerlink" title="越界注意"></a>越界注意</h3><p>首先取数组中间元素的位置，不难写出<code>int mid = (left + right) / 2;</code>，这么写其实有一个问题，就是数值越界，例如left和right都是最大int，这么操作就越界了，</p>
<p>所以可以这么写：<code>int mid = left + ((right - left) / 2);</code></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortedArrayToBST</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildBST(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildBST</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; left) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid]);</span><br><span class="line">        root.left = buildBST(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        root.right = buildBST(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h2><p>给出二叉搜索树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201023160751832.png" alt="538.把二叉搜索树转换为累加树" style="zoom:50%;" /></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>采用中序遍历思想，不过是右中左的方式，累加结果，赋予当前<strong>中节点</strong></p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertBSTtoGST</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        convertInOrder(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按右中左顺序遍历，累加即可</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">convertInOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        convertInOrder(root.right);</span><br><span class="line">        sum += root.val;</span><br><span class="line">        root.val = sum;</span><br><span class="line">        convertInOrder(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code_Musing</category>
      </categories>
      <tags>
        <tag>binaryTree</tag>
        <tag>traversal</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu小技巧</title>
    <url>/2024/03/20/tips/ubuntuTips/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul>
<li>screen</li>
<li>conda</li>
</ul>
<span id="more"></span>
<h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><p><strong>新建一个screen会话</strong></p>
<p>screen -S &lt;名字&gt;</p>
<p><strong>退出当前screen会话</strong></p>
<p>键盘点击ctrl+a , 然后按d</p>
<p><strong>查看所有screen会话</strong></p>
<p>screen -ls</p>
<p><strong>进入（恢复）某一screen会话</strong></p>
<p>screen -r &lt;会话序列号&gt;</p>
<p><strong>关闭screen会话</strong></p>
<p>screen -X -S &lt;序列号&gt; quit</p>
<h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><p>查看虚拟环境列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br><span class="line">conda info --envs</span><br></pre></td></tr></table></figure>
<p>删除环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n env_name --all</span><br></pre></td></tr></table></figure>
<p>创建虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n name python=3.8</span><br></pre></td></tr></table></figure>
<p>激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate name</span><br></pre></td></tr></table></figure>
<p>退出虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
<h2 id="查看进程和杀死"><a href="#查看进程和杀死" class="headerlink" title="查看进程和杀死"></a>查看进程和杀死</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top u name</span><br><span class="line">pkill name</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
</search>
