<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/15/README/</url>
    <content><![CDATA[<p>大家好，这是hollis&amp;的个人博客，用于记录学习的过程与心得。</p>
]]></content>
      <categories>
        <category>欢迎</category>
      </categories>
      <tags>
        <tag>welcome</tag>
        <tag>computer</tag>
        <tag>java learner</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2024/01/15/MyBatis/MyBatis/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="MyBaits中文网"><a href="#MyBaits中文网" class="headerlink" title="MyBaits中文网"></a>MyBaits中文网</h2><p><a href="https://mybatis.net.cn/">MyBatis</a></p>
<h2 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h2><ul>
<li><p>数据库表（tb_user）及数据准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">	addr <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;234&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入依赖，pom.xml，粘贴logback.xml到resource文件夹下</p>
</li>
<li><p>编写mybatis-config.xml文件</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hdb2205&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写UserMapper.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithdb.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>主程序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/71335_image-20240112095356363.png" alt="image-20240112095356363" style="zoom:50%;" />

<img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/49567_image-20240112095507785.png" alt="image-20240112095507785" style="zoom: 50%;" />

<p><strong>刷新一下可以看到数据库的表</strong></p>
<img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/47675_image-20240112095851919.png" alt="image-20240112095851919" style="zoom: 67%;" />

<p><strong>idea中使用sql语句进行查询</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/57896_image-20240112100335351.png" alt="image-20240112100335351"></p>
<h2 id="使用Mapper代理方式完成入门案例"><a href="#使用Mapper代理方式完成入门案例" class="headerlink" title="使用Mapper代理方式完成入门案例"></a>使用Mapper代理方式完成入门案例</h2><ol>
<li>定义与SQL映射文件同名的Mapperf接口，并且将Mapper接口和SQL映射文件放置在同一目录下</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/12/70576_image-20240112102522431.png" alt="image-20240112102522431"></p>
<p>这里一定要用<code>com/inhdb/mapper</code>创建包，而不是<code>com.inhdb.mapper</code>，否则编译后没有文件夹层次结构，只是一个<code>com.inhdb.mapper</code>文件</p>
<ol start="2">
<li>设置SQL映射文件的namespace属性为Mapper接口全限定名</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.ithdb.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectAll&quot;</span> resultType=<span class="string">&quot;com.ithdb.pojo.User&quot;</span>&gt;</span><br><span class="line">        select *</span><br><span class="line">        from tb_user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id,并保持参数类型和返回值类型一致</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改mybatis-config.xml的UserMapper.xml地址</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/ithdb/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//3.1 获取UserMapper接口的代理对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectAll();</span><br></pre></td></tr></table></figure>

<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>只要遵循了<code>Mapper接口和SQL映射文件放置在同一目录下</code>（编译过后在同一目录下），就可以用包扫描的方法进行配置</p>
<p><code>mybatis-config.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;!--Mapper代理方式，识别到sql映射文件--&gt;</span><br><span class="line">   &lt;<span class="keyword">package</span> name=<span class="string">&quot;com.ithdb.mapper&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MyBatis核心配置文件"><a href="#MyBatis核心配置文件" class="headerlink" title="MyBatis核心配置文件"></a>MyBatis核心配置文件</h2><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment</p>
<h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.ithdb.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为com.ithdb.pojo目录下的实体取别名，默认小写如：user</p>
<p><code>UserMapper.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectAll&quot;</span> resultType=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">       select *</span><br><span class="line">       from tb_user;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="增删改查环境准备"><a href="#增删改查环境准备" class="headerlink" title="增删改查环境准备"></a>增删改查环境准备</h2><p>准备tb_brand(mybatis数据库下)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除tb_brand表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_brand;</span><br><span class="line"><span class="comment">-- 创建tb_brand表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand</span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- id 主键</span></span><br><span class="line">    id           <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    <span class="comment">-- 品牌名称</span></span><br><span class="line">    brand_name   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 企业名称</span></span><br><span class="line">    company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 排序字段</span></span><br><span class="line">    ordered      <span class="type">int</span>,</span><br><span class="line">    <span class="comment">-- 描述信息</span></span><br><span class="line">    description  <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="comment">-- 状态：0：禁用  1：启用</span></span><br><span class="line">    status       <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;三只松鼠&#x27;</span>, <span class="string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;好吃不上火&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">       (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;华为技术有限公司&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;小米科技有限公司&#x27;</span>, <span class="number">50</span>, <span class="string">&#x27;are you ok&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_brand;</span><br></pre></td></tr></table></figure>

<h3 id="大小驼峰解决方案"><a href="#大小驼峰解决方案" class="headerlink" title="大小驼峰解决方案"></a>大小驼峰解决方案</h3><p>springboot有更好的方案</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="查看详情"><a href="#查看详情" class="headerlink" title="查看详情"></a>查看详情</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        * 参数占位符：</span></span><br><span class="line"><span class="comment">            1. #&#123;&#125;:会将其替换为 ?，为了防止SQL注入</span></span><br><span class="line"><span class="comment">            2. $&#123;&#125;：拼sql。会存在SQL注入问题</span></span><br><span class="line"><span class="comment">            3. 使用时机：</span></span><br><span class="line"><span class="comment">                * 参数传递的时候：#&#123;&#125;</span></span><br><span class="line"><span class="comment">                * 表名或者列名不固定的情况下：$&#123;&#125; 会存在SQL注入问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * 参数类型：parameterType：可以省略</span></span><br><span class="line"><span class="comment">         * 特殊字符处理：</span></span><br><span class="line"><span class="comment">            1. 转义字符：</span></span><br><span class="line"><span class="comment">            2. CDATA区:</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="特殊字符转义"><a href="#特殊字符转义" class="headerlink" title="特殊字符转义"></a>特殊字符转义</h3><p>法一，转义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where id <span class="symbol">&amp;lt;</span> #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如&lt;对应<code>&amp;lt;</code></p>
<p>法二，CDATA</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where id</span><br><span class="line">            &lt;![CDATA[</span><br><span class="line">            &lt;</span><br><span class="line">            ]]&gt;</span><br><span class="line">            #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 条件查询</span><br><span class="line">    * * 参数接收</span><br><span class="line">    * 1. 散装参数：如果方法中有多个参数，需要使用@Param(&quot;SQL参数占位符名称&quot;)</span><br><span class="line">    * 2. 对象参数:对象的属性名称要和参数占位符名称一致</span><br><span class="line">    * 3. map集合参数</span><br><span class="line">    */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"><span class="comment">// 处理参数</span></span><br><span class="line">companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装对象</span></span><br><span class="line"><span class="comment">//        Brand brand = new Brand();</span></span><br><span class="line"><span class="comment">//        brand.setStatus(status);</span></span><br><span class="line"><span class="comment">//        brand.setCompanyName(companyName);</span></span><br><span class="line"><span class="comment">//        brand.setBrandName(brandName);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;status&quot;</span>, status);</span><br><span class="line">map.put(<span class="string">&quot;companyName&quot;</span>, companyName);</span><br><span class="line">map.put(<span class="string">&quot;brandName&quot;</span>, brandName);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    List&lt;Brand&gt; selectByCondition(@Param(&quot;status&quot;) int status, @Param(&quot;companyName&quot;) String companyName, @Param(&quot;brandName&quot;) String brandName);</span></span><br><span class="line"><span class="comment">//    List&lt;Brand&gt; selectByCondition(Brand brand);</span></span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="动态多条件查询"><a href="#动态多条件查询" class="headerlink" title="动态多条件查询"></a>动态多条件查询</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       动态条件查询</span></span><br><span class="line"><span class="comment">           * if: 条件判断</span></span><br><span class="line"><span class="comment">               * test：逻辑表达式</span></span><br><span class="line"><span class="comment">           * 问题：</span></span><br><span class="line"><span class="comment">               * 恒等式</span></span><br><span class="line"><span class="comment">               * &lt;where&gt; 替换 where 关键字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">        status = #&#123;status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and company_name like #&#123;companyName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and brand_name like #&#123;brandName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果第一个status后面参数不为空就会存在sql语法错误</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">       select *</span><br><span class="line">       from tb_brand</span><br><span class="line">       /* where 1=1 */</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">               and status = #&#123;status&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">               and company_name like #&#123;companyName&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">               and brand_name like #&#123;brandName&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>存在无参数全查询问题</p>
</blockquote>
<h2 id="单条件动态查询"><a href="#单条件动态查询" class="headerlink" title="单条件动态查询"></a>单条件动态查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByConditionSingle&quot;</span> resultMap=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    &lt;choose&gt;&lt;!--相当于<span class="keyword">switch</span>--&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;status!=null&quot;</span>&gt;&lt;!--相当于<span class="keyword">case</span>--&gt;</span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            company_name like #&#123;companyName&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;&lt;!--相当于<span class="keyword">case</span>--&gt;</span><br><span class="line">            brand_name like #&#123;brandName&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;otherwise&gt;</span><br><span class="line">            <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">        &lt;/otherwise&gt;</span><br><span class="line">    &lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>otherwise可以通过<code>&lt;where&gt;</code>包裹进行替换</p>
<h2 id="添加或者修改"><a href="#添加或者修改" class="headerlink" title="添加或者修改"></a>添加或者修改</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>BrandMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">        insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">        values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意需要提交或者开始处开启自动提交</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line"><span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 执行方法</span></span><br><span class="line">brandMapper.add(brand);</span><br><span class="line"><span class="comment">//提交事务,否则插入的数据会回滚</span></span><br><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h3 id="添加项获取主键如id值"><a href="#添加项获取主键如id值" class="headerlink" title="添加项获取主键如id值"></a>添加项获取主键如id值</h3><p>使用useGeneratedKeys、keyProperty绑定插入数据的主键到id</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4. 执行方法</span></span><br><span class="line">brandMapper.add(brand);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> brand.getId();</span><br><span class="line">System.out.println(id);</span><br></pre></td></tr></table></figure>

<h2 id="修改-动态"><a href="#修改-动态" class="headerlink" title="修改-动态"></a>修改-动态</h2><p>使用set标签避免sql参数不全，多“，”造成语法错误</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand_name = #&#123;brandName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            company_name = #&#123;companyName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ordered != null&quot;</span>&gt;</span></span><br><span class="line">            ordered = #&#123;ordered&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            description = #&#123;description&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="单个"><a href="#单个" class="headerlink" title="单个"></a>单个</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from tb_brand</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>sql原语</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> id <span class="keyword">in</span> (?,?,?);</span><br></pre></td></tr></table></figure>

<p>mybatis改写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        mybatis会将数组参数，封装为一个Map集合。</span></span><br><span class="line"><span class="comment">            * 默认：array = 数组</span></span><br><span class="line"><span class="comment">            * 使用@Param注解改变map集合的默认key的名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete</span><br><span class="line">    from tb_brand</span><br><span class="line">    where id in (</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>separator的目的是为了分隔多个id</p>
<p>还可以将where id in (?,?,?)中的括号用这种形式改变</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p><strong>多个参数：封装为Map集合,可以使用@Param注解，替换Map集合中默认的arg键名</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>简单的sql语句用注解，复杂的用xml配置方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_user where id = #&#123;id&#125;;&quot;)</span></span><br><span class="line">User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="springboot3使用MyBatis"><a href="#springboot3使用MyBatis" class="headerlink" title="springboot3使用MyBatis"></a>springboot3使用MyBatis</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、用spring initial创建module</p>
<p>2、选中初始依赖</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/61655_image-20240114212007854.png" alt="image-20240114212007854"></p>
<p><code>MyBatis Framework</code>和<code>MySQL Driver</code>在SQL的依赖中</p>
<p>3、<code>application.properties</code>配置数据源</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">hdb2205</span></span><br></pre></td></tr></table></figure>

<p>4、创建pojo类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String passwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、创建一个接口<code>UserMapper</code>，resource文件夹下创建<code>mapper</code>文件夹，利用MybatisX这个插件生产<code>UserMapper.xml</code>文件（选中接口点击 more actions，选中生产xml，选中xml文件生成的位置）</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/28490_image-20240114213800163.png" alt="image-20240114213800163"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/43338_image-20240114213851958.png" alt="image-20240114213851958"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/14/98218_image-20240114214002500.png" alt="image-20240114214002500"></p>
<p>6、在接口中编辑方法，利用插件自动生成statement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TUser <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hdb.boot3mybatis.bean.TUser&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7、主程序中加入<code>MapperScan</code>，扫描接口包的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com/hdb/boot3mybatis/mapper&quot;)</span></span><br></pre></td></tr></table></figure>

<p>8、配置xxxmapper.xml的位置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>9、配置驼峰命名</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>spirng6知识小点</title>
    <url>/2024/01/15/spring6/spring6_1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="启用Log4j2日志框架"><a href="#启用Log4j2日志框架" class="headerlink" title="启用Log4j2日志框架"></a>启用Log4j2日志框架</h2><p><strong>（1）日志信息的优先级</strong>，日志信息的优先级从高到低有<strong>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</strong><br>                TRACE：追踪，是最低的日志级别，相当于追踪程序的执行<br>                DEBUG：调试，一般在开发中，都将其设置为最低的日志级别<br>                INFO：信息，输出重要的信息，使用较多<br>                WARN：警告，输出警告的信息<br>                ERROR：错误，输出错误信息<br>                FATAL：严重错误</p>
<p>这些级别分别用来指定这条日志信息的重要程度；级别高的会自动屏蔽级别低的日志，也就是说，设置了WARN的日志，则INFO、DEBUG的日志级别的日志不会显示</p>
<p><strong>（2）日志信息的输出目的地</strong>，日志信息的输出目的地指定了日志将打印到<strong>控制台</strong>还是<strong>文件中</strong>；</p>
<p><strong>（3）日志信息的输出格式</strong>，而输出格式则控制了日志信息的显示内容。</p>
<p>CryptoNets: Applying Neural Networks to Encrypted Data with High Throughput and Accuracy</p>
<h2 id="AOP概念及相关术语"><a href="#AOP概念及相关术语" class="headerlink" title="AOP概念及相关术语"></a>AOP概念及相关术语</h2><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善<strong>，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术</strong>。</p>
]]></content>
      <categories>
        <category>spring6</category>
      </categories>
      <tags>
        <tag>spring6</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC学习笔记</title>
    <url>/2024/01/16/springMVC/spinngMVC1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol>
<li>先创建空项目</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/20184_image-20230831163022372.png" alt="image-20230831163022372"></p>
<ol start="2">
<li>创建module</li>
</ol>
<p>等待创建过程</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/78249_image-20230831163316649.png" alt="image-20230831163316649"></p>
<ol start="3">
<li>新建java目录</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/46834_image-20230831163503073.png" alt="image-20230831163503073"></p>
<ol start="4">
<li>更改per-module bytecode</li>
</ol>
<p>否则会报：java: 错误: 不支持发行版本 5</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/95133_image-20230831200656888.png" alt="image-20230831200656888"></p>
<blockquote>
<p>很显然这种方式很麻烦，每次修改pom.xml文件后，都需要再次去设置。</p>
</blockquote>
<p><strong>法二、在pom.xml文件中配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="local-tomcat配置"><a href="#local-tomcat配置" class="headerlink" title="local tomcat配置"></a>local tomcat配置</h2><p>提前安装tomcat，<code>application server</code>选择安装的目录</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/11337_image-20230831202822348.png" alt="image-20230831202822348"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/84522_image-20230831144725474.png" alt="image-20230831144725474"></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/83078_image-20230831144747097.png" alt="image-20230831144747097"></p>
<h2 id="tomcat乱码"><a href="#tomcat乱码" class="headerlink" title="tomcat乱码"></a>tomcat乱码</h2><h3 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">               connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">               redirectPort=<span class="string">&quot;8443&quot;</span></span><br><span class="line">               maxParameterCount=<span class="string">&quot;1000&quot;</span></span><br><span class="line">                URIEncoding=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">               /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="logging-properties"><a href="#logging-properties" class="headerlink" title="logging.properties"></a>logging.properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.encoding =  GBK</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h2 id="新建module后操作"><a href="#新建module后操作" class="headerlink" title="新建module后操作"></a>新建module后操作</h2><p>删掉原有deployment，添加新的<code>springMVC-demo2:war exploded</code></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/08/31/36330_image-20230831200416626.png" alt="image-20230831200416626"></p>
<h2 id="RequestMapping注解的value属性"><a href="#RequestMapping注解的value属性" class="headerlink" title="@RequestMapping注解的value属性"></a>@RequestMapping注解的value属性</h2><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<h2 id="RequestMapping注解的params属性"><a href="#RequestMapping注解的params属性" class="headerlink" title="@RequestMapping注解的params属性"></a>@RequestMapping注解的params属性</h2><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p>
<p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p>
<h2 id="SpringMVC支持ant风格的路径"><a href="#SpringMVC支持ant风格的路径" class="headerlink" title="SpringMVC支持ant风格的路径"></a>SpringMVC支持ant风格的路径</h2><p>？：表示任意的单个字符</p>
<blockquote>
<p>java代码中用<code>/a?a</code></p>
</blockquote>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用**时，只能使用&#x2F;**&#x2F;xxx的方式</p>
<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h2><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p><strong>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400</strong>：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<h2 id="解决获取请求参数的乱码问题"><a href="#解决获取请求参数的乱码问题" class="headerlink" title="解决获取请求参数的乱码问题"></a>解决获取请求参数的乱码问题</h2><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h2><p>ServletAPI, ModelAndView, Model, map, ModelMap</p>
<h3 id="Model-map-ModelMap关系"><a href="#Model-map-ModelMap关系" class="headerlink" title="Model, map, ModelMap关系"></a>Model, map, ModelMap关系</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Model</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title class_">ModelMap</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title class_">ExtendedModelMap</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jsp上下文路径"><a href="#jsp上下文路径" class="headerlink" title="jsp上下文路径"></a>jsp上下文路径</h2><p>更新后的版本，直接使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;success&quot;</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不再使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/success&quot;</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HiddenHttpMethodFilter"><a href="#HiddenHttpMethodFilter" class="headerlink" title="HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
</blockquote>
<h2 id="添加功能流程"><a href="#添加功能流程" class="headerlink" title="添加功能流程"></a>添加功能流程</h2><p>在employee_list中点击add功能，通过视图控制器（springMVC.xml)跳转到employee_add界面，输入信息，通过POST方法进入控制器，控制器保存新的员工，重定向到<code>/employee</code>重新进入查询所有的员工信息。</p>
<h2 id="get-post-delete-post"><a href="#get-post-delete-post" class="headerlink" title="get_post_delete_post"></a>get_post_delete_post</h2><table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>getUserById?id&#x3D;1</td>
<td>user&#x2F;1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id&#x3D;1</td>
<td>user&#x2F;1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody></table>
<h2 id="更新功能流程"><a href="#更新功能流程" class="headerlink" title="更新功能流程"></a>更新功能流程</h2><p>在employee_list中点击update功能，跳转到控制器中的getEmployeeById（RequestMethod.GET）查询对应id的employee，将employee信息发送到employee_update网页，网页采用回显，提交信息后跳转到控制器中的updateEmployee（put），更新保存信息，重定向到控制器的getAllEmployee显示所有员工信息。</p>
<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RequestEntity"><a href="#RequestEntity" class="headerlink" title="RequestEntity"></a>RequestEntity</h2><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<blockquote>
<p>不再把success解析为html视图</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC处理json"><a href="#SpringMVC处理json" class="headerlink" title="SpringMVC处理json"></a>SpringMVC处理json</h2><p>浏览器不能识别java响应的对象，需要转化为json格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>a&gt;导入jackson的依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.12</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>

<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为<strong>Json格式的字符串</strong></p>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，通常用于在不同系统之间传递和存储数据。JSON的设计目标是简单、易于阅读和编写，同时也易于解析和生成。它以文本形式表示数据，由键值对组成，具有以下特点：</p>
<ol>
<li>键值对：JSON 数据是由键值对组成的，每个键（也称为属性或字段）都是一个字符串，值可以是字符串、数字、布尔值、数组、对象、null等。键值对之间使用冒号（<code>:</code>）分隔，而不同的键值对之间使用逗号（<code>,</code>）分隔。</li>
<li>嵌套结构：JSON 支持嵌套结构，可以在值中包含其他键值对，从而构建复杂的数据结构。</li>
<li>数组：JSON 数组是一种有序的值的集合，使用方括号（<code>[]</code>）来表示。数组中的元素可以是任何合法的 JSON 数据类型，包括对象、字符串、数字等。</li>
<li>简洁性：JSON 的语法相对简单，易于阅读和编写。这使得它成为了在不同编程语言之间进行数据交换的理想选择。</li>
<li>自我描述性：JSON 数据本身包含数据类型信息，因此接收方可以很容易地理解数据的结构和内容。</li>
<li>广泛应用：JSON 在Web开发中非常常见，用于传输数据、配置文件、API通信等。它也得到了许多编程语言的支持，因此可以轻松地在不同平台上使用。****</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isStudent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;languages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;JavaScript&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Python&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C++&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123 Main St&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Anytown&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h2><p>再webapp下添加了static后，需要重新打包，找到maven中的lifestyle下的package，点击</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/10/30/28028_image-20231030104445931.png" alt="image-20231030104445931" style="zoom: 50%;" /><img src="https://gitee.com/hollis7/pictures/raw/master/2023/10/30/88240_image-20231030104506076.png" alt="image-20231030104506076" style="zoom: 50%;" /></p>
<h2 id="RestController注解"><a href="#RestController注解" class="headerlink" title="@RestController注解"></a>@RestController注解</h2><p><code>@RestController</code>注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了<code>@Controller</code>注解，并且为其中的每个方法添加了<code>@ResponseBody</code>注解</p>
<h2 id="文件上传-下载"><a href="#文件上传-下载" class="headerlink" title="文件上传&#x2F;下载"></a>文件上传&#x2F;下载</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>获取ServletContext对象</p>
<p>获取服务器中文件的真实路径</p>
<p>创建输入流</p>
<p>创建字节数组</p>
<p>将流读到字节数组中</p>
<p>创建HttpHeaders对象设置响应头信息</p>
<p>设置要下载方式以及下载文件的名字</p>
<p>设置响应状态码</p>
<p>创建ResponseEntity对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>这两条都是对所有请求拦截（springMVC配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.hdb.mvc.interceptors.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="拦截器的三个抽象方法"><a href="#拦截器的三个抽象方法" class="headerlink" title="拦截器的三个抽象方法"></a>拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h2 id="基于配置的异常处理"><a href="#基于配置的异常处理" class="headerlink" title="基于配置的异常处理"></a>基于配置的异常处理</h2><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver<br>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver. SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置异常处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置将异常信息共享在请求域中的键--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">出现错误</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;ex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h2><p>Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为<code>AbstractAnnotationConfigDispatcherServletInitializer</code>，当我们的类扩展了<code>AbstractAnnotationConfigDispatcherServletInitializer</code>并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webconfig"><a href="#webconfig" class="headerlink" title="webconfig"></a>webconfig</h3><p>代替SpringMVC的配置文件：</p>
<p>1、扫描组件  2、视图解析器   3、view-controller   4、default-servlet-handler</p>
<p> 5、mvc注解驱动   6、文件上传解析器  7、异常处理    8、拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hdb.mvc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hdb.mvc.interceptor.TestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.ContextLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.spring5.SpringTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.spring5.view.ThymeleafViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templatemode.TemplateMode;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templateresolver.ITemplateResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代替SpringMVC的配置文件：</span></span><br><span class="line"><span class="comment"> * 1、扫描组件   2、视图解析器     3、view-controller    4、default-servlet-handler</span></span><br><span class="line"><span class="comment"> * 5、mvc注解驱动    6、文件上传解析器   7、异常处理      8、拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//1、扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hdb.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//5、mvc注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、default-servlet-handler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8、拦截器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">TestInterceptor</span> <span class="variable">testInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(testInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、view-controller</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/hello&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6、文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CommonsMultipartResolver</span> <span class="variable">commonsMultipartResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">        <span class="keyword">return</span> commonsMultipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7、异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMappingExceptionResolver</span> <span class="variable">exceptionResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMappingExceptionResolver</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;java.lang.ArithmeticException&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//出现ArithmeticException映射到error。html</span></span><br><span class="line">        exceptionResolver.setExceptionMappings(prop);</span><br><span class="line">        <span class="comment">//exception的值是ArithmeticException中对应的错误信息，共享到请求域中的键</span></span><br><span class="line">        exceptionResolver.setExceptionAttribute(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        resolvers.add(exceptionResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC常用组件"><a href="#SpringMVC常用组件" class="headerlink" title="SpringMVC常用组件"></a>SpringMVC常用组件</h2><ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：<strong>处理器</strong>，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h2 id="DispatcherServlet初始化过程"><a href="#DispatcherServlet初始化过程" class="headerlink" title="DispatcherServlet初始化过程"></a>DispatcherServlet初始化过程</h2><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p>a&gt;初始化WebApplicationContext</p>
<p>b&gt;创建WebApplicationContext</p>
<p>c&gt;DispatcherServlet初始化策略</p>
<p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><ol>
<li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p>
</li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
</li>
</ol>
<p>a) 不存在</p>
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<p>b) 存在则执行下面的流程</p>
<ol start="3">
<li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
</li>
<li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>
</li>
<li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p>
</li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
</li>
</ol>
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<ol start="7">
<li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
</li>
<li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p>
</li>
<li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p>
</li>
<li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p>
</li>
<li><p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>springMVC</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpirngMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 场景整合</title>
    <url>/2024/01/15/springboot3/springboot3_%E5%9C%BA%E6%99%AF%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes</a></p>
<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ul>
<li>准备prometheus.yml，docker-compose.yml</li>
<li>启动环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure>

<p>停止服务而不删除相关容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.yml stop</span><br></pre></td></tr></table></figure>

<p>重新启动已经停止的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.yml start</span><br></pre></td></tr></table></figure>

<p>关闭通过 Docker Compose 启动的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.yml down</span><br></pre></td></tr></table></figure>

<h2 id="Redis整合"><a href="#Redis整合" class="headerlink" title="Redis整合"></a>Redis整合</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">121.48.161.4</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * set:     集合:       redisTemplate.opsForSet()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">setName</span> <span class="operator">=</span> <span class="string">&quot;settest&quot;</span>;</span><br><span class="line">       <span class="comment">//1、给集合中添加元素</span></span><br><span class="line">       redisTemplate.opsForSet().add(setName,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> redisTemplate.opsForSet().isMember(setName, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">       Assertions.assertTrue(aBoolean);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">aBoolean1</span> <span class="operator">=</span> redisTemplate.opsForSet().isMember(setName, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">       Assertions.assertFalse(aBoolean1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="RedisTemplate定制化"><a href="#RedisTemplate定制化" class="headerlink" title="RedisTemplate定制化"></a>RedisTemplate定制化</h2><p>模仿官方的RedisTemplate进行改写默认序列化，在<code>RedisAutoConfiguration</code>中有<br>找到<code>RedisSerializer</code>接口，定位实现类（ctr+H），发现<code>GenericJackson2JsonRedisSerializer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppRedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//把对象转为json字符串的序列化工具</span></span><br><span class="line">        template.setDefaultSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/78210_image-20240109102411367.png" alt="image-20240109102411367"></p>
<p>重新运行程序，会产生一个没有乱码的person的<code>&lt;key,value&gt;</code></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/82329_image-20240109102745029.png" alt="image-20240109102745029"></p>
<h2 id="redis相关配置"><a href="#redis相关配置" class="headerlink" title="redis相关配置"></a>redis相关配置</h2><ul>
<li><p><strong>Redis客户端</strong></p>
</li>
<li><ul>
<li>Lettuce： 默认</li>
<li>Jedis：可以使用以下切换</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring.data.redis.client-type=lettuce</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置lettuce的底层参数</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br></pre></td></tr></table></figure>
<p>使用Jedis，在redis-starter中排除<code>lettuce</code>，再导入<code>jedis</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        切换 jedis 作为操作redis的底层客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><p>Swagger 可以快速生成<strong>实时接口</strong>文档，方便前后开发人员进行协调沟通。遵循 <strong>OpenAPI</strong> 规范。</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>进入<code>http://localhost:8080/swagger-ui/index.html</code></p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><table>
<thead>
<tr>
<th>注解</th>
<th>标注位置</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@Tag</td>
<td>controller 类</td>
<td>标识 controller 作用</td>
</tr>
<tr>
<td>@Parameter</td>
<td>参数</td>
<td>标识参数作用</td>
</tr>
<tr>
<td>@Parameters</td>
<td>参数</td>
<td>参数多重说明</td>
</tr>
<tr>
<td>@Schema</td>
<td>model 层的 JavaBean</td>
<td>描述模型作用及每个属性</td>
</tr>
<tr>
<td>@Operation</td>
<td>方法</td>
<td>描述方法作用</td>
</tr>
<tr>
<td>@ApiResponse</td>
<td>方法</td>
<td>描述响应状态码等</td>
</tr>
</tbody></table>
<h2 id="controller示例"><a href="#controller示例" class="headerlink" title="controller示例"></a>controller示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tag(name=&quot;部门&quot;,description = &quot;部门的CRUD&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeptService deptService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Knife4j</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询&quot;,description = &quot;按照id查询部门&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询所有部门&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/depts&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">getDept</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.getDepts();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;保存部门&quot;,description = &quot;必须提交json&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveDept</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;</span><br><span class="line">        deptService.saveDept(dept);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;按照id删除部门&quot;,description = &quot;必须提交json&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/dept/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteDept</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="meta">@Parameter(description = &quot;部门id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        deptService.deleteDept(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分组设置"><a href="#分组设置" class="headerlink" title="分组设置"></a>分组设置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiUiConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">empApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;员工管理&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/emp/**&quot;</span>,<span class="string">&quot;/emps&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">deptApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;部门管理&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/dept/**&quot;</span>,<span class="string">&quot;/depts&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">docsOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;SpringBoot3-CRUD API&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;专门测试接口文件&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v0.0.1&quot;</span>)</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">                        .description(<span class="string">&quot;哈哈 Wiki Documentation&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h1><h2 id="方法一：webclient"><a href="#方法一：webclient" class="headerlink" title="方法一：webclient"></a>方法一：webclient</h2><p>编写WeatherService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getByWebClient</span><span class="params">(String city)</span>&#123;</span><br><span class="line">       <span class="comment">//远程调用阿里云API</span></span><br><span class="line">       <span class="comment">//1、创建WebClient</span></span><br><span class="line">       <span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.create();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2、准备数据</span></span><br><span class="line">       Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       params.put(<span class="string">&quot;area&quot;</span>,city);</span><br><span class="line">       <span class="comment">//3、定义发请求行为  CompletableFuture</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> client.get()</span><br><span class="line">               .uri(<span class="string">&quot;https://qryweather.market.alicloudapi.com/lundroid/queryweather?area=&#123;area&#125;&quot;</span>, params)</span><br><span class="line">               .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">               .header(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;APPCODE 9a0a550ada0c4656a5777f8ef674cbca&quot;</span>)</span><br><span class="line">               .retrieve()</span><br><span class="line">               .bodyToMono(String.class)</span><br><span class="line">               .block();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> json;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>WeatherController调用WeatherService的getByWebClient函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/weather&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">weather</span><span class="params">(<span class="meta">@RequestParam(&quot;city&quot;)</span>String city)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">weather</span> <span class="operator">=</span> weatherService.getByWebClient(city);</span><br><span class="line">        <span class="keyword">return</span> weather;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法二：HTTP-Interface"><a href="#方法二：HTTP-Interface" class="headerlink" title="方法二：HTTP Interface"></a>方法二：HTTP Interface</h2><p>Spring 允许我们通过定义接口的方式，给任意位置发送 http 请求，实现远程调用，可以用来简化 HTTP 远程访问。需要webflux场景才可</p>
<ol>
<li>定义配置类<code>AliyunApiConfiguration</code>，其中aliyun.appcode为阿里云的相关api的授权码，可在properties中设置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunApiConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    HttpServiceProxyFactory <span class="title function_">httpServiceProxyFactory</span><span class="params">(<span class="meta">@Value(&quot;$&#123;aliyun.appcode&#125;&quot;)</span> String appCode)</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建客户端</span></span><br><span class="line">        <span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">                .defaultHeader(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;APPCODE &quot;</span>+appCode)</span><br><span class="line">                .codecs(clientCodecConfigurer -&gt; &#123;</span><br><span class="line">                    clientCodecConfigurer</span><br><span class="line">                            .defaultCodecs()</span><br><span class="line">                            .maxInMemorySize(<span class="number">256</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">                    <span class="comment">//响应数据量太大有可能会超出BufferSize，所以这里设置的大一点</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//2、创建工厂</span></span><br><span class="line">        <span class="type">HttpServiceProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> HttpServiceProxyFactory</span><br><span class="line">                .builderFor(WebClientAdapter.create(client))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    WeatherInterface <span class="title function_">weatherInterface</span><span class="params">(HttpServiceProxyFactory httpServiceProxyFactory)</span>&#123;</span><br><span class="line">        <span class="comment">//3、获取代理对象</span></span><br><span class="line">        <span class="type">WeatherInterface</span> <span class="variable">weatherInterface</span> <span class="operator">=</span> httpServiceProxyFactory.createClient(WeatherInterface.class);</span><br><span class="line">        <span class="keyword">return</span> weatherInterface;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">aliyun.appcode</span>=<span class="string">9a0a550ada0c4656a5777f8ef674cbca</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WeatherInterface</span> &#123;</span><br><span class="line">    <span class="meta">@GetExchange(url = &quot;https://qryweather.market.alicloudapi.com/lundroid/queryweather&quot;,accept = &quot;application/json&quot;)</span></span><br><span class="line">    String <span class="title function_">getWeather</span><span class="params">(<span class="meta">@RequestParam(&quot;area&quot;)</span> String city)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>controller调用相关服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WeatherService weatherService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/weather&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">weather</span><span class="params">(<span class="meta">@RequestParam(&quot;city&quot;)</span>String city)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">weather</span> <span class="operator">=</span> weatherService.weather(city);</span><br><span class="line">        <span class="keyword">return</span> weather;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>当有新的阿里云api时，可以复用配置代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AliyunApiConfiguration</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    ExpressApi <span class="title function_">expressApi</span><span class="params">(HttpServiceProxyFactory httpServiceProxyFactory)</span>&#123;</span><br><span class="line">        <span class="type">ExpressApi</span> <span class="variable">client</span> <span class="operator">=</span> httpServiceProxyFactory.createClient(ExpressApi.class);</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//WeatherController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExpressApi</span> &#123;</span><br><span class="line">    <span class="meta">@GetExchange(url = &quot;https://qryweather.market.alicloudapi.com/lundroid/queryweather&quot;,accept = &quot;application/json&quot;)</span></span><br><span class="line">    String <span class="title function_">getExpress</span><span class="params">(<span class="meta">@RequestParam(&quot;number&quot;)</span> String number)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="消息服务"><a href="#消息服务" class="headerlink" title="消息服务"></a>消息服务</h1><h2 id="kafka原理"><a href="#kafka原理" class="headerlink" title="kafka原理"></a>kafka原理</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/1613913/1683170677428-6ffa28b6-d522-435f-9e50-20fe3ddfd024.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_36,text_5bCa56GF6LC3IGF0Z3VpZ3UuY29t,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/resize,w_1125,limit_0" alt="image.png"></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>新建module，勾选</li>
</ol>
<ul>
<li><input checked="" disabled="" type="checkbox"> Lombok</li>
<li><input checked="" disabled="" type="checkbox"> Spring Web</li>
<li><input checked="" disabled="" type="checkbox"> Spring for Apache Kafka</li>
</ul>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/12022_image-20240109203533200.png" alt="image-20240109203533200"></p>
<ol start="2">
<li>配置kafka服务器</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span>=<span class="string">121.48.161.4:9092</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在测试主程序中编写程序，需要修改hosts文件，文件地址：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hosts：</span><br><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure>
<p>:rage: 加入ip对应的名字，不是老师讲的kafka</p>
<p>修改hosts文件，先以管理员权限打开文本编辑器，再用文本编辑器打开hosts文件进行修改。</p>
<img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/09/86312_image-20240109213939272.png" alt="image-20240109213939272"  />

<h2 id="测试（异步）"><a href="#测试（异步）" class="headerlink" title="测试（异步）"></a>测试（异步）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        CompletableFuture[] futures = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">10000</span>];</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">CompletableFuture</span> <span class="variable">future</span> <span class="operator">=</span> kafkaTemplate.send(<span class="string">&quot;news&quot;</span>, <span class="string">&quot;pig&quot;</span>, <span class="string">&quot;你是猪&quot;</span>);</span><br><span class="line">            futures[i] = future;</span><br><span class="line">        &#125;</span><br><span class="line">        CompletableFuture.allOf(futures).join();</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">millis</span> <span class="operator">=</span> stopWatch.getTotalTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;10000消息发送完成：ms时间：&quot;</span> + millis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="kafka存入类测试"><a href="#kafka存入类测试" class="headerlink" title="kafka存入类测试"></a>kafka存入类测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CompletableFuture</span> <span class="variable">future</span> <span class="operator">=</span> kafkaTemplate.send(<span class="string">&quot;news&quot;</span>, <span class="string">&quot;person&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;hjaha@qq.com&quot;</span>));</span><br><span class="line">        future.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>需要进行序列化配置，默认是<code>Serializer</code>，改为json</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.producer.value-serializer</span>=<span class="string">org.springframework.kafka.support.serializer.JsonSerializer</span></span><br></pre></td></tr></table></figure>

<h2 id="KafkaListener监听"><a href="#KafkaListener监听" class="headerlink" title="KafkaListener监听"></a>KafkaListener监听</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHahaTopicListener</span> &#123;</span><br><span class="line">    <span class="comment">//默认的监听是从消息队列最后一个消息开始拿。新消息才能拿到</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;news&quot;, groupId = &quot;haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenRecords</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> record.key();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> record.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息：key【&quot;</span> + key + <span class="string">&quot;】 value【&quot;</span> + value + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拿到以前的完整消息;</span></span><br><span class="line">    <span class="meta">@KafkaListener(groupId = &quot;haha2&quot;,</span></span><br><span class="line"><span class="meta">            topicPartitions = &#123;</span></span><br><span class="line"><span class="meta">                    @TopicPartition(topic = &quot;news&quot;,</span></span><br><span class="line"><span class="meta">                            partitionOffsets = &#123;</span></span><br><span class="line"><span class="meta">                                    @PartitionOffset(partition = &quot;0&quot;, initialOffset = &quot;0&quot;)</span></span><br><span class="line"><span class="meta">                            &#125;)</span></span><br><span class="line"><span class="meta">            &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenAllRecords</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> record.key();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> record.value();</span><br><span class="line">        System.out.println(<span class="string">&quot;=============收到消息：key【&quot;</span> + key + <span class="string">&quot;】 value【&quot;</span> + value + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boo312MessageApplication</span></span><br></pre></td></tr></table></figure>

<p>Kafka 的特点包括：</p>
<ul>
<li>高吞吐：Kafka 可以处理每秒数百万条消息。</li>
<li>低延迟：Kafka 可以将消息从生产者发送到消费者的延迟保持在毫秒级。</li>
<li>持久化：Kafka 将消息持久化到磁盘，即使生产者或消费者发生故障，消息也不会丢失。</li>
<li>扩展性：Kafka 可以水平扩展，以满足不断增长的需求。</li>
</ul>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 基础特性</title>
    <url>/2024/01/15/springboot3/springboot3_%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="自定义-banner"><a href="#自定义-banner" class="headerlink" title="自定义 banner"></a>自定义 banner</h2><ol>
<li>类路径添加banner.txt或设置spring.banner.location就可以定制 banner</li>
<li>推荐网站：<a href="https://www.bootschool.net/ascii">Spring Boot banner 在线生成工具，制作下载英文 banner.txt，修改替换 banner.txt 文字实现自定义，个性化启动 banner-bootschool.net</a></li>
</ol>
<h2 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h2><p>1、标识环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）、区分出几个环境： dev（开发环境）、test（测试环境）、prod（生产环境）</span><br><span class="line">2）、指定每个组件在哪个环境下生效； default环境：默认环境</span><br><span class="line">	通过： @Profile(&#123;&quot;test&quot;&#125;)标注</span><br><span class="line">	组件没有标注@Profile代表任意时候都生效</span><br><span class="line">3）、默认只有激活指定的环境，这些组件才会生效。</span><br></pre></td></tr></table></figure>

<p>2、激活环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置文件激活：spring.profiles.active=dev；</span><br><span class="line">命令行激活： java -jar xxx.jar  --spring.profiles.active=dev</span><br><span class="line">集成环境如下图</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/04/72330_image-20240104164250109.png" alt="image-20240104164250109" style="zoom: 50%;" />

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--spring.profiles.active=dev</span><br></pre></td></tr></table></figure>

<p>3、环境包含</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#包含指定环境，不管你激活哪个环境，这个都要有。总是要生效的环境</span></span><br><span class="line"><span class="attr">spring.profiles.include</span>=<span class="string">prod</span></span><br></pre></td></tr></table></figure>

<h3 id="最佳实战"><a href="#最佳实战" class="headerlink" title="最佳实战"></a>最佳实战</h3><ul>
<li><p><strong>生效的环境</strong> &#x3D; <strong>激活的环境&#x2F;默认环境</strong>  + <strong>包含的环境</strong></p>
</li>
<li><p>项目里面这么用</p>
</li>
<li><ul>
<li>基础的配置<code>mybatis</code>、<code>log</code>、<code>xxx</code>：写到<strong>包含环境中</strong></li>
<li>需要动态切换变化的 <code>db</code>、<code>redis</code>：写到<strong>激活的环境中</strong></li>
</ul>
</li>
</ul>
<h3 id="Profile-分组"><a href="#Profile-分组" class="headerlink" title="Profile 分组"></a>Profile 分组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring.profiles.group.haha=db,<span class="built_in">log</span></span><br><span class="line">spring.profiles.group.hehe=mq</span><br></pre></td></tr></table></figure>

<h2 id="profile配置文件"><a href="#profile配置文件" class="headerlink" title="profile配置文件"></a>profile配置文件</h2><p>3、配置文件怎么使用Profile功能</p>
<p>1）、application.properties： 主配置文件。任何情况下都生效</p>
<p>2）、其他Profile环境下命名规范：  application-{profile标识}.properties：</p>
<p>比如：application-dev.properties</p>
<p>3）、激活指定环境即可：  配置文件激活、命令行激活</p>
<p>4）、效果：</p>
<p><strong>项目的所有生效配置项 &#x3D; 激活环境配置文件的所有项 + 主配置文件和激活文件不冲突的所有项</strong></p>
<p><strong>如果发生了配置冲突，以激活的环境配置文件为准。</strong></p>
<p>application-{profile标识}.properties 优先级高于 application.properties</p>
<p>主配置和激活的配置都生效，优先以激活的配置为准</p>
<h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p>命令行<code>&gt; </code>配置文件<code>&gt; </code>springapplication配置</p>
<p><strong>配置文件优先级</strong>如下：(<strong>后面覆盖前面</strong>)</p>
<ol>
<li><strong>jar 包内</strong>的application.properties&#x2F;yml</li>
<li><strong>jar 包内</strong>的application-{profile}.properties&#x2F;yml</li>
<li><strong>jar 包外</strong>的application.properties&#x2F;yml</li>
<li><strong>jar 包外</strong>的application-{profile}.properties&#x2F;yml</li>
</ol>
<p>最终效果：优先级由高到低，前面覆盖后面</p>
<p>命令行 &gt; 包外config直接子目录 &gt; 包外config目录 &gt; 包外根目录 &gt; 包内目录</p>
<p><img src="C:\data\mysoftware\Typora\typoraPicture\未命名绘图.svg" alt="未命名绘图"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/svg/1613913/1682073869709-2cba18c8-55bd-4bf1-a9df-ac784e30d89a.svg" alt="未命名绘图.svg"></p>
<h2 id="属性占位符"><a href="#属性占位符" class="headerlink" title="属性占位符"></a>属性占位符</h2><p>配置文件中可以使用 <code>$&#123;name:default&#125;</code>形式取出之前配置过的值。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.name</span>=<span class="string">MyApp</span></span><br><span class="line"><span class="attr">app.description</span>=<span class="string">$&#123;app.name&#125; is a Spring Boot application written by $&#123;username:Unknown&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;app.name:中国mooc&#125;&quot;)</span></span><br><span class="line">String appName;</span><br></pre></td></tr></table></figure>



<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>@SpringBootTest</p>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 数据访问</title>
    <url>/2024/01/15/springboot3/springboot3_%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes-尚硅谷</a></p>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdb2205</span><br></pre></td></tr></table></figure>

<h2 id="新建module"><a href="#新建module" class="headerlink" title="新建module"></a>新建module</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/03/61239_image-20240103152054170.png" alt="image-20240103152054170"></p>
<h2 id="整合SSM场景"><a href="#整合SSM场景" class="headerlink" title="整合SSM场景"></a>整合SSM场景</h2><ol>
<li>创建SSM整合项目</li>
<li>配置数据源</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">hdb2205</span></span><br></pre></td></tr></table></figure>

<p>安装MyBatisX 插件，帮我们生成Mapper接口的xml文件即可</p>
<ol start="3">
<li><code>Boot305SsmApplication</code>加入<code>@MapperScan</code>注释</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com/hdb/boot/boot3/ssm/mapper&quot;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2、配置整合MyBatis</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="comment"># 打开驼峰命名规则，mysql和java中的变量名字命名规则不同</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><ol>
<li><p><strong>导入</strong> <code>mybatis-spring-boot-starter</code></p>
</li>
<li><p>配置<strong>数据源</strong>信息</p>
</li>
<li><p>配置mybatis的<code>**mapper接口扫描**</code>与<code>**xml映射文件扫描**</code></p>
</li>
<li><p>编写bean，mapper，生成xml，编写sql 进行crud。<strong>事务等操作依然和Spring中用法一样</strong></p>
</li>
<li><p>效果：</p>
</li>
<li><ol>
<li>所有sql写在xml中</li>
<li>所有<code>mybatis配置</code>写在<code>application.properties</code>下面</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 核心原理</title>
    <url>/2024/01/15/springboot3/springboot3_%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes</a></p>
<h2 id="事件和监听器"><a href="#事件和监听器" class="headerlink" title="事件和监听器"></a>事件和监听器</h2><ol>
<li><p>自定义<code>SpringApplicationRunListener</code>来<strong>监听事件</strong>；</p>
</li>
<li><ol>
<li>编写<code>SpringApplicationRunListener</code> <strong>实现类</strong></li>
<li>在 <code>META-INF/spring.factories</code> 中配置 <code>org.springframework.boot.SpringApplicationRunListener=自己的Listener</code>，还可以指定一个<strong>有参构造器</strong>，接受两个参数<code>(SpringApplication application, String[] args)</code></li>
</ol>
</li>
<li><pre><code class="properties"># spring.factories
org.springframework.boot.SpringApplicationRunListener=com.hdb.core.listener.MyAppListener
</code></pre>
</li>
<li><ol start="3">
<li>springboot 在<code>spring-boot.jar</code>中配置了默认的 事件监听器</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Listener 先要从 META-INF/spring.factories 读到</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1、引导： 利用 BootstrapContext 引导整个项目启动</span></span><br><span class="line"><span class="comment"> *      starting：              应用开始，SpringApplication的run方法一调用，只要有了 BootstrapContext 就执行</span></span><br><span class="line"><span class="comment"> *      environmentPrepared：   环境准备好（把启动参数等绑定到环境变量中），但是ioc还没有创建；【调一次】</span></span><br><span class="line"><span class="comment"> * 2、启动：</span></span><br><span class="line"><span class="comment"> *      contextPrepared：       ioc容器创建并准备好，但是sources（主配置类）没加载。并关闭引导上下文；组件都没创建  【调一次】</span></span><br><span class="line"><span class="comment"> *      contextLoaded：         ioc容器加载。主配置类加载进去了。但是ioc容器还没刷新（我们的bean没创建）。</span></span><br><span class="line"><span class="comment"> *      =======截止以前，ioc容器里面还没造bean呢=======</span></span><br><span class="line"><span class="comment"> *      started：               ioc容器刷新了（所有bean造好了），但是 runner 没调用。</span></span><br><span class="line"><span class="comment"> *      ready:                  ioc容器刷新了（所有bean造好了），所有runner调用完了。</span></span><br><span class="line"><span class="comment"> * 3、运行</span></span><br><span class="line"><span class="comment"> *     以前步骤都正确执行，代表容器running。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="生命周期全流程"><a href="#生命周期全流程" class="headerlink" title="生命周期全流程"></a>生命周期全流程</h3><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/04/28084_image-1704377032144-1.png" alt="image"></p>
<h2 id="事件触发时机"><a href="#事件触发时机" class="headerlink" title="事件触发时机"></a>事件触发时机</h2><ul>
<li><p><strong>ApplicationListener：    感知全阶段：基于事件机制，感知事件。 一旦到了哪个阶段可以做别的事</strong></p>
</li>
<li><ul>
<li><code>@Bean</code>或<code>@EventListener</code>： <code>事件驱动</code></li>
<li><code>SpringApplication.addListeners(…)</code>或 <code>SpringApplicationBuilder.listeners(…)</code></li>
<li><code>META-INF/spring.factories</code></li>
</ul>
</li>
<li><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/05/68286_image-1704437922998-1.png" alt="image"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====事件====到达====&quot;</span>+event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">com.hdb.core.listener.MyListener</span></span><br></pre></td></tr></table></figure>

<p>应用事件发送顺序如下：</p>
<p>![image 2](<a href="https://gitee.com/hollis7/pictures/raw/master/2024/01/05/52391_image">https://gitee.com/hollis7/pictures/raw/master/2024/01/05/52391_image</a> 2.png)</p>
<h2 id="SpringBoot-事件驱动开发"><a href="#SpringBoot-事件驱动开发" class="headerlink" title="SpringBoot 事件驱动开发"></a>SpringBoot 事件驱动开发</h2><p><img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/05/31052_image3.png" alt="image3"></p>
<h3 id="事件发布者"><a href="#事件发布者" class="headerlink" title="事件发布者"></a>事件发布者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventPublisher</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span> &#123;</span><br><span class="line">    ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有事件都可以发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">//调用底层API发送事件</span></span><br><span class="line">        applicationEventPublisher.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会被自动调用，把真正发事件的底层组组件给我们注入进来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationEventPublisher event publisher to be used by this object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="登录成功事件"><a href="#登录成功事件" class="headerlink" title="登录成功事件"></a>登录成功事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录成功事件。所有事件都推荐继承 ApplicationEvent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  代表是谁登录成了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginSuccessEvent</span><span class="params">(UserEntity source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="service监听"><a href="#service监听" class="headerlink" title="service监听"></a>service监听</h3><p>方法一实现ApplicationListener接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span>  <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;LoginSuccessEvent&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAccountScore</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        System.out.println(username +<span class="string">&quot; 加了1分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(LoginSuccessEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====  AccountService  收到事件 =====&quot;</span>);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) event.getSource();</span><br><span class="line">        addAccountScore(source.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二，<code>@EventListener</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(LoginSuccessEvent loginSuccessEvent)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===== CouponService ====感知到事件&quot;</span>+loginSuccessEvent);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) loginSuccessEvent.getSource();</span><br><span class="line">        sendCoupon(source.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCoupon</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot; 随机得到了一张优惠券&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CouponService couponService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysService sysService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;passwd&quot;)</span>String passwd)</span>&#123;</span><br><span class="line">        <span class="comment">//业务处理登录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;业务处理登录完成....&quot;</span>);</span><br><span class="line">        <span class="comment">//TODO 发送事件.</span></span><br><span class="line">        <span class="comment">//1、创建事件信息</span></span><br><span class="line">        <span class="type">LoginSuccessEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginSuccessEvent</span>(<span class="keyword">new</span> <span class="title class_">UserEntity</span>(username, passwd));</span><br><span class="line">        <span class="comment">//2、发送事件</span></span><br><span class="line">        eventPublisher.sendEvent(event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> username+<span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>在Java中，<strong>SPI</strong>的实现方式是通过在<code>META-INF/services</code>目录下创建一个以服务接口全限定名为名字的文件，文件中包含实现该服务接口的类的全限定名。当应用程序启动时，Java的SPI机制会自动扫描classpath中的这些文件，并根据文件中指定的类名来加载实现类。</p>
<p>在SpringBoot中，<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></p>
<h2 id="功能开关"><a href="#功能开关" class="headerlink" title="功能开关"></a>功能开关</h2><ul>
<li><p>自动配置：全部都配置好，什么都不用管。   自动批量导入</p>
</li>
<li><ul>
<li>项目一启动，spi文件中指定的所有都加载。</li>
</ul>
</li>
<li><p><code>@EnableXxxx</code>：手动控制哪些功能的开启； 手动导入。</p>
</li>
<li><ul>
<li>开启xxx功能</li>
<li>都是利用 @Import 把此功能要用的组件导入进去</li>
</ul>
</li>
</ul>
<h2 id="理解-SpringBootApplication"><a href="#理解-SpringBootApplication" class="headerlink" title="理解@SpringBootApplication"></a>理解@SpringBootApplication</h2><p><code>@SpringBootConfiguration</code></p>
<p>就是： @Configuration ，容器中的组件，配置类。spring ioc启动就会加载创建这个类对象</p>
<p><code>@AutoConfigurationPackage</code>：扫描主程序包：加载自己的组件</p>
<blockquote>
<ul>
<li>利用 <code>@Import(AutoConfigurationPackages.Registrar.class)</code> 想要给容器中导入组件。</li>
<li>把主程序所在的<strong>包</strong>的所有组件导入进来。</li>
</ul>
</blockquote>
<p><code>@Import(AutoConfigurationImportSelector.class)</code>：加载所有自动配置类：加载starter导入的组件</p>
<p><code>@ComponentScan</code><br>组件扫描：排除一些组件（哪些不要）<br>排除前面已经扫描进来的配置类、和自动配置类。</p>
<h2 id="完整启动加载流程"><a href="#完整启动加载流程" class="headerlink" title="完整启动加载流程"></a>完整启动加载流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/svg/1613913/1682569555020-b6cbc750-3171-44c6-810f-1c59e590b792.svg" alt="自动配置进阶原理.svg"></p>
<h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h2><h3 id="1-配置处理器（省略）"><a href="#1-配置处理器（省略）" class="headerlink" title="1. 配置处理器（省略）"></a>1. 配置处理器（省略）</h3><p>导入配置处理器，配置文件自定义的properties配置都会有提示</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2023版默认已经有提示了</p>
</blockquote>
<h3 id="2-业务代码"><a href="#2-业务代码" class="headerlink" title="2. 业务代码"></a>2. 业务代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;robot&quot;)</span>  <span class="comment">//此属性类和配置文件指定前缀绑定</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-基本抽取"><a href="#3-1-基本抽取" class="headerlink" title="3.1 基本抽取"></a>3.1 基本抽取</h3><ul>
<li>创建starter项目，把公共代码需要的所有依赖导入</li>
</ul>
<img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/08/22745_image-20240108195339109.png" alt="image-20240108195339109" style="zoom:67%;" />

<ul>
<li><p>把公共代码复制进来</p>
</li>
<li><p>自己写一个 <code>RobotAutoConfiguration</code>，给容器中导入这个场景需要的所有组件</p>
</li>
<li><ul>
<li>为什么这些组件默认不会扫描进去？</li>
<li><strong>starter所在的包和引入它的项目的主程序所在的包不是父子层级</strong></li>
</ul>
</li>
<li><p>别人引用这个<code>starter</code>，直接导入这个 <code>RobotAutoConfiguration</code>,就能把这个场景的组件导入进来</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--        自定义starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hdb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot3-08-robot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>RobotAutoConfiguration</code>用<code>Import</code>导入了相关的组件，Boot306FeaturesApplication通过<code>Import</code>导入了<code>RobotAutoConfiguration</code>就可以使用robot相关服务了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>导入了(&#123;RobotController.class, RobotProperties.class, RobotService.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(RobotAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boot306FeaturesApplication</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-使用-EnableXxx机制"><a href="#3-2-使用-EnableXxx机制" class="headerlink" title="3.2 使用@EnableXxx机制"></a>3.2 使用@EnableXxx机制</h3><p>在robot-starter的包里再写一个申明接口，模仿<code>EnableWebMvc</code>写法，在Boot306FeaturesApplication上添加注释<code>@EnableRobot</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;RobotAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRobot &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/hollis7/pictures/raw/master/2024/01/08/32500_image-20240108200942226.png" alt="image-20240108200942226" style="zoom:67%;" />

<h3 id="3-3-完全自动配置"><a href="#3-3-完全自动配置" class="headerlink" title="3.3 完全自动配置"></a>3.3 完全自动配置</h3><ul>
<li>依赖SpringBoot的SPI机制</li>
<li>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports 文件中编写好我们自动配置类的全类名即可</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># org.springframework.boot.autoconfigure.AutoConfiguration.imports </span></span><br><span class="line"><span class="attr">com.hdb.boot3.starter.robot.RobotAutoConfiguration</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3 web开发</title>
    <url>/2024/01/15/springboot3/springboot3_web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="springboot3笔记资料地址"><a href="#springboot3笔记资料地址" class="headerlink" title="springboot3笔记资料地址"></a>springboot3笔记资料地址</h2><p><a href="https://www.yuque.com/leifengyang/springboot3">springboot3-notes</a></p>
<h2 id="xmind文件打开网址"><a href="#xmind文件打开网址" class="headerlink" title="xmind文件打开网址"></a>xmind文件打开网址</h2><p><a href="https://mubu.com/app/edit/home/1IVQRB_zQ2b#m">幕布</a></p>
<h2 id="关闭占用端口的程序"><a href="#关闭占用端口的程序" class="headerlink" title="关闭占用端口的程序"></a>关闭占用端口的程序</h2><p>查看占用端口的程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr 8080</span><br></pre></td></tr></table></figure>

<p>使用命令关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill -PID 进程号 -F</span><br></pre></td></tr></table></figure>

<h2 id="springboot3-识别不了新module"><a href="#springboot3-识别不了新module" class="headerlink" title="springboot3 识别不了新module"></a>springboot3 识别不了新module</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><ol>
<li>Remove Module</li>
<li>选中未识别的module</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/30/60877_image-20231130103414289.png" alt="image-20231130103414289"></p>
<ol start="3">
<li><code>import module from external model----&gt;maven</code></li>
</ol>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><ol>
<li>右击 项目名，选择“ Add Framework Support”</li>
<li>选中<code>maven</code></li>
</ol>
<h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用</strong></p>
<p><strong>特性：</strong></p>
<ul>
<li><p>快速创建独立 Spring 应用</p>
</li>
<li><ul>
<li>SSM：导包、写配置、启动运行</li>
</ul>
</li>
<li><p>直接嵌入Tomcat、Jetty or Undertow（无需部署 war 包）【Servlet容器】</p>
</li>
<li><ul>
<li>linux  java tomcat mysql： war 放到 tomcat 的 webapps下</li>
<li>jar： java环境；  java -jar</li>
</ul>
</li>
<li><p><strong>重点</strong>：提供可选的starter，简化应用<strong>整合</strong></p>
</li>
<li><ul>
<li><strong>场景启动器</strong>（starter）：web、json、邮件、oss（对象存储）、异步、定时任务、缓存…</li>
<li>导包一堆，控制好版本。</li>
<li>为每一种场景准备了一个依赖； <strong>web-starter。mybatis-starter</strong></li>
</ul>
</li>
<li><p><strong>重点：</strong>按需自动配置 Spring 以及 第三方库</p>
</li>
<li><ul>
<li>如果这些场景我要使用（生效）。这个场景的所有配置都会自动配置好。</li>
<li><strong>约定大于配置</strong>：每个场景都有很多默认配置。</li>
<li>自定义：配置文件中修改几项就可以</li>
</ul>
</li>
<li><p>提供生产级特性：如 监控指标、健康检查、外部化配置等</p>
</li>
<li><ul>
<li>监控指标、健康检查（k8s）、外部化配置</li>
</ul>
</li>
<li><p>无代码生成、无xml</p>
</li>
</ul>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol>
<li>创建新module</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/31077_image-20231122105332075.png" alt="image-20231122105332075"></p>
<ol start="2">
<li>继承spring-boot-starter-parent，pom文件导入，刷新</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    所有springboot项目都必须继承自 spring-boot-starter-parent --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--        web开发的场景启动器 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/69206_image-20231122110019745.png" alt="image-20231122110019745"></p>
<ol start="4">
<li>编写代码</li>
</ol>
<p>主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">//这是一个SpringBoot应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编写controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>导入打包插件，并清空和打包</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/64700_image-20231122111309675.png" alt="image-20231122111309675" style="zoom:50%;" />

<ol start="7">
<li>找到打包文件，cmd命令输入<code>java -jar demo.jar</code>运行</li>
</ol>
<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/33036_image-20231122112346584.png" alt="image-20231122112346584" style="zoom:50%;" />

<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/13158_image-20231122112612576.png" alt="image-20231122112612576" style="zoom: 33%;" />

<ol start="8">
<li>修改端口8888，添加配置文件<code>application.properties</code>(模拟linux场景)</li>
</ol>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/22/67131_image-20231122113212064.png" alt="image-20231122113212064"></p>
<img src="C:\data\mysoftware\Typora\typoraPicture\image-20231122113233472.png" alt="image-20231122113233472" style="zoom:50%;" />

<p>端口变为8888</p>
<blockquote>
<p>windows场景下，idea的resource资源里添加<code>application.properties</code>（集中配置）</p>
</blockquote>
<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/82336_image-20231123095704294.png" alt="image-20231123095704294" style="zoom:50%;" />

<h2 id="Spring-Initializr-创建向导"><a href="#Spring-Initializr-创建向导" class="headerlink" title="Spring Initializr 创建向导"></a>Spring Initializr 创建向导</h2><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/21135_image-20231123112601446.png" alt="image-20231123112601446" style="zoom:50%;" />

<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/77224_image-20231123100919524.png" alt="image-20231123100919524" style="zoom:50%;" />

<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/23/20035_image-20231123100938497.png" alt="image-20231123100938497" style="zoom:50%;" />

<h2 id="自定义依赖版本号"><a href="#自定义依赖版本号" class="headerlink" title="自定义依赖版本号"></a>自定义依赖版本号</h2><ul>
<li><p>利用maven的就近原则</p>
</li>
<li><ul>
<li>直接在<strong>导入依赖的时候声明版本</strong></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;8.0.31&lt;/version&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三方的jar包</p>
<ul>
<li>boot父项目没有管理的需要自行声明好</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="springboot的自动配置机制"><a href="#springboot的自动配置机制" class="headerlink" title="springboot的自动配置机制"></a>springboot的自动配置机制</h2><ol>
<li>springboot导入场景，容器中就会自动配置好这个场景的核心组件。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> SpringApplication.run(Boot302DemoApplication.class, args);</span><br><span class="line">        String[] names = ioc.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>默认的包扫描规则</li>
</ol>
<ul>
<li><p><code>@SpringBootApplication</code> 标注的类就是主程序类</p>
</li>
<li><p><strong>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</strong></p>
</li>
<li><p>@SpringBootApplication(scanBasePackages &#x3D; “com.hdb”)</p>
</li>
<li><p><code>@ComponentScan(&quot;com.hdb&quot;)</code> 直接指定扫描的路径</p>
</li>
</ul>
<ol start="3">
<li>配置默认值</li>
</ol>
<ul>
<li><p><strong>配置文件</strong>的所有配置项是和某个<strong>类的对象</strong>值进行一一绑定的。</p>
</li>
<li><p>绑定了配置文件中每一项值的类： <strong>属性类</strong>。</p>
</li>
<li><p><strong>按需加载自动配置</strong></p>
</li>
</ul>
<blockquote>
<p>导入场景<code>spring-boot-starter-web</code>，场景启动器除了会导入相关功能依赖，导入一个<code>spring-boot-starter</code>，是所有<code>starter</code>的<code>starter</code>，基础核心starter。<code>spring-boot-starter</code>导入了一个包 <code>spring-boot-autoconfigure</code>。包里面都是各种场景的<code>AutoConfiguration</code><strong>自动配置类</strong>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code>这个包，但是不是全都开启的。</p>
</blockquote>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p>组件默认是单实例的，使用<code>@Scope(&quot;prototype&quot;)</code>表面多实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">   <span class="meta">@Bean(&quot;userhaha&quot;)</span><span class="comment">//替代以前的Bean标签。 组件在容器中的名字默认是方法名，可以直接修改注解的值</span></span><br><span class="line">   <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setId(<span class="number">1L</span>);</span><br><span class="line">       user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>SpringBootConfiguration和Configuration差别不大，为了便于区分</p>
<h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(FastsqlException.class)</span></span><br></pre></td></tr></table></figure>

<p>使用@Import 导入第三方的组件,给容器中放指定类型的组件，组件的名字默认是全类名</p>
<h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><p><strong>@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</strong></p>
<p><strong>@ConditionalOnMissingClass：如果类路径中不存在这个类，则触发指定行为</strong></p>
<p><strong>@ConditionalOnBean：如果容器中存在这个Bean（组件），则触发指定行为</strong></p>
<p><strong>@ConditionalOnMissingBean：如果容器中不存在这个Bean（组件），则触发指定行为</strong></p>
<h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p> <strong>声明组件的属性和配置文件哪些前缀开始项进行绑定</strong></p>
<ol>
<li>@ConfigurationProperties(prefix &#x3D; “pig”)使得通过配置文件可以给实列赋值（在Appconfig和Pig.java中均可加入）</li>
</ol>
<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/13940_image-20231124110420990.png" alt="image-20231124110420990" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Appconfig.class </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Pig <span class="title function_">pig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>@EnableConfigurationProperties：快速注册注解：</strong>在配置文件中标注</li>
</ol>
<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/21048_image-20231124111538865.png" alt="image-20231124111538865" style="zoom:80%;" />

<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/15073_image-20231124111604817.png" alt="image-20231124111604817" style="zoom:50%;" />

<h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/24/51687_image-20231124105349873.png" alt="image-20231124105349873" style="zoom: 33%;" />

<h2 id="自动setter-getter–-Data"><a href="#自动setter-getter–-Data" class="headerlink" title="自动setter&#x2F;getter–&gt;@Data"></a>自动setter&#x2F;getter–&gt;@Data</h2><p>pom.xml中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        自动生成构造器、getter/setter、自动生成Builder模式等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类中加入注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="properties的复杂对象标识"><a href="#properties的复杂对象标识" class="headerlink" title="properties的复杂对象标识"></a>properties的复杂对象标识</h2><p>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//自动生成JavaBean属性的getter/setter</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor //自动生成无参构造器</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor //自动生成全参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Boolean like;</span><br><span class="line">    <span class="keyword">private</span> Child child; <span class="comment">//嵌套对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; dogs; <span class="comment">//数组（里面是对象）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Cat&gt; cats; <span class="comment">//表示Map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件<code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">person.name</span>=<span class="string">张三</span></span><br><span class="line"><span class="attr">person.age</span>=<span class="string">18</span></span><br><span class="line"><span class="attr">person.birthDay</span>=<span class="string">2010/10/12 12:12:12</span></span><br><span class="line"><span class="attr">person.like</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">person.child.name</span>=<span class="string">李四</span></span><br><span class="line"><span class="attr">person.child.age</span>=<span class="string">12</span></span><br><span class="line"><span class="attr">person.child.birthDay</span>=<span class="string">2018/10/12</span></span><br><span class="line"><span class="attr">person.child.text[0]</span>=<span class="string">abc</span></span><br><span class="line"><span class="attr">person.child.text[1]</span>=<span class="string">def</span></span><br><span class="line"><span class="attr">person.dogs[0].name</span>=<span class="string">小黑</span></span><br><span class="line"><span class="attr">person.dogs[0].age</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">person.dogs[1].name</span>=<span class="string">小白</span></span><br><span class="line"><span class="attr">person.dogs[1].age</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">person.cats.c1.name</span>=<span class="string">小蓝</span></span><br><span class="line"><span class="attr">person.cats.c1.age</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">person.cats.c2.name</span>=<span class="string">小灰</span></span><br><span class="line"><span class="attr">person.cats.c2.age</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure>

<p>配置文件二：<code>application.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">birthDay:</span> <span class="number">2010</span><span class="string">/10/10</span> <span class="number">12</span><span class="string">:12:12</span></span><br><span class="line">  <span class="attr">like:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">child:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">李四</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">birthDay:</span> <span class="number">2018</span><span class="string">/10/10</span></span><br><span class="line"><span class="comment">#    数组的两种表示</span></span><br><span class="line">    <span class="attr">text:</span> [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>]</span><br><span class="line">  <span class="attr">dogs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小黑</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小白</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#  map的两种表示</span></span><br><span class="line">  <span class="attr">cats:</span></span><br><span class="line">    <span class="attr">c1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小蓝</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">c2:</span> &#123;<span class="attr">name:</span> <span class="string">小绿</span>,<span class="attr">age:</span> <span class="number">2</span>&#125; <span class="comment">#对象也可用&#123;&#125;表示</span></span><br></pre></td></tr></table></figure>

<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>以后每次勾选lombok，自动设置是set&#x2F;get方法</p>
<img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/30/22457_image-20231130100501188.png" alt="image-20231130100501188" style="zoom:50%;" />

<p><strong>SpringBoot怎么把日志默认配置好的</strong></p>
<p>1、每个<code>starter</code>场景，都会导入一个核心场景<code>spring-boot-starter</code></p>
<p>2、核心场景引入了日志的所用功能<code>spring-boot-starter-logging</code></p>
<p>3、默认使用了<code>logback + slf4j</code> 组合作为默认底层日志</p>
<p>4、<code>日志是系统一启动就要用</code>，<code>xxxAutoConfiguration</code>是系统启动好了以后放好的组件，后来用的。</p>
<p>5、日志是利用<strong>监听器机制</strong>配置好的。<code>ApplicationListener</code>。</p>
<p>6、日志所有的配置都可以通过修改配置文件实现。以<code>logging</code>开始的所有配置。</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/11/30/68896_image.png" alt="image"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2023-11-30T10:30:46.701+08:00  INFO 7012 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]</span><br><span class="line">2023-11-30T10:30:46.707+08:00  INFO 7012 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br></pre></td></tr></table></figure>

<h3 id="修改日志格式"><a href="#修改日志格式" class="headerlink" title="修改日志格式"></a>修改日志格式</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;15&#125; ===&gt; %msg%n</span></span><br><span class="line"><span class="comment">#2023-11-30 10:45:00.046 INFO  [main] o.s.b.w.e.t.TomcatWebServer ===&gt; Tomcat initialized with port 8080 (http)</span></span><br></pre></td></tr></table></figure>

<p>只修改时间</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.pattern.dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 2023-11-30 10:51:33  INFO 20376 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]</span></span><br></pre></td></tr></table></figure>

<h3 id="插入日志"><a href="#插入日志" class="headerlink" title="插入日志"></a>插入日志</h3><h4 id="通过日志类"><a href="#通过日志类" class="headerlink" title="通过日志类"></a>通过日志类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>使用<code>@Slf4j</code>和默认的log</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;嘿嘿嘿&quot;</span>);</span><br><span class="line"><span class="comment">//        logger.info(&quot;哈哈哈&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul>
<li><p>由低到高：<code>ALL,TRACE, DEBUG, INFO, WARN, ERROR,FATAL,OFF</code>；</p>
</li>
<li><ul>
<li><strong>只会打印指定级别及以上级别的日志</strong></li>
<li>ALL：打印所有日志</li>
<li>TRACE：追踪框架详细流程日志，一般不使用</li>
<li>DEBUG：开发调试细节日志</li>
<li>INFO：关键、感兴趣信息日志</li>
<li>WARN：警告但不是错误的信息日志，比如：版本过时</li>
<li>ERROR：业务错误日志，比如出现各种异常</li>
<li>FATAL：致命错误日志，比如jvm系统崩溃</li>
<li>OFF：<strong>关闭所有日志记录</strong></li>
</ul>
</li>
</ul>
<h4 id="修改日志默认级别"><a href="#修改日志默认级别" class="headerlink" title="修改日志默认级别"></a>修改日志默认级别</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认所有日志没有精确指定级别就使用root的默认级别(info)</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">debug</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#精确调整某个包下的日志级别</span></span><br><span class="line"><span class="attr">logging.level.com.atguigu.logging.controller</span>=<span class="string">warn</span></span><br></pre></td></tr></table></figure>

<h4 id="日志分组"><a href="#日志分组" class="headerlink" title="日志分组"></a>日志分组</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.group.abc</span>=<span class="string">com.atguigu.logging.controller,com.atguigu.logging.service,com.aaa,com.bbb</span></span><br><span class="line"><span class="attr">logging.level.abc</span>=<span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging.level.sql</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h4 id="指定日志文件的路径"><a href="#指定日志文件的路径" class="headerlink" title="指定日志文件的路径"></a>指定日志文件的路径</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.file.path</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>

<h4 id="指定日志文件的名"><a href="#指定日志文件的名" class="headerlink" title="指定日志文件的名"></a>指定日志文件的名</h4><p>指定日志文件的名： <strong>filename 和 path的配置同时存在只看filename</strong></p>
<p>1、只写名字： 就生成到当前项目同位置的 my.log</p>
<p>2、<strong>写名字+路径：生成到指定位置的指定文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.file.name</span>=<span class="string">demo.log</span></span><br></pre></td></tr></table></figure>

<h2 id="文件归档与滚动切割"><a href="#文件归档与滚动切割" class="headerlink" title="文件归档与滚动切割"></a>文件归档与滚动切割</h2><p>归档：每天的日志单独存到一个文档中。</p>
<p>切割：每个文件10MB，超过大小切割成另外一个文件。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#日志归档、切割</span></span><br><span class="line"><span class="attr">logging.logback.rollingpolicy.file-name-pattern</span>=<span class="string">$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz</span></span><br><span class="line"><span class="comment">#存档前，每个日志文件的最大大小</span></span><br><span class="line"><span class="attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="string">1MB</span></span><br></pre></td></tr></table></figure>

<p>上述皆为默认</p>
<h2 id="自定义日志"><a href="#自定义日志" class="headerlink" title="自定义日志"></a>自定义日志</h2><p><code>resource</code>下配置<code>logback-spring.xml</code>，会自动识别</p>
<h1 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h1><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>SpringBoot 已经默认配置好了<strong>Web开发</strong>场景常用功能。我们直接使用即可。</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>用法</th>
<th>效果</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>全自动</strong></td>
<td>直接编写控制器逻辑</td>
<td></td>
<td>全部使用<strong>自动配置默认效果</strong></td>
</tr>
<tr>
<td><strong>手自一体</strong></td>
<td><code>@Configuration</code> +   配置<code>**WebMvcConfigurer**</code>+ <em>配置 WebMvcRegistrations</em></td>
<td><strong>不要标注</strong> <code>@**EnableWebMvc**</code></td>
<td><strong>保留自动配置效果</strong> <strong>手动设置部分功能</strong> 定义MVC底层组件</td>
</tr>
<tr>
<td><strong>全手动</strong></td>
<td><code>@Configuration</code> +   配置<code>**WebMvcConfigurer**</code></td>
<td><strong>标注</strong> <code>@**EnableWebMvc**</code></td>
<td><strong>禁用自动配置效果</strong> <strong>全手动设置</strong></td>
</tr>
</tbody></table>
<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><h3 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h3><p>静态资源映射规则在 WebMvcAutoConfiguration 中进行了定义：</p>
<ol>
<li><code>/webjars/**</code> 的所有路径 资源都在 <code>classpath:/META-INF/resources/webjars/</code></li>
<li><code>/**</code> 的所有路径 资源都在 <code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code></li>
</ol>
<blockquote>
<p>所有静态资源都定义了缓存规则。【浏览器访问过一次，就会缓存一段时间】，但此功能参数无默认值</p>
</blockquote>
<h3 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h3><p>在静态资源目录下找 favicon.ico，放入static目录下，网页自动变成对应ico，记住<code>ctr + F5</code>刷新缓存</p>
<h3 id="缓存实验"><a href="#缓存实验" class="headerlink" title="缓存实验"></a>缓存实验</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启静态资源映射规则</span></span><br><span class="line"><span class="attr">spring.web.resources.add-mappings</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置缓存</span></span><br><span class="line"><span class="comment">#spring.web.resources.cache.period=3600</span></span><br><span class="line"><span class="comment">##缓存详细合并项控制，覆盖period配置：</span></span><br><span class="line"><span class="comment">## 浏览器第一次请求服务器，服务器告诉浏览器此资源缓存7200秒，7200秒以内的所有此资源访问不用发给服务器请求，7200秒以后发请求给服务器</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="string">7200</span></span><br></pre></td></tr></table></figure>

<h3 id="静态资源自定义配置"><a href="#静态资源自定义配置" class="headerlink" title="静态资源自定义配置"></a>静态资源自定义配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 共享缓存</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.cache-public</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自定义静态资源文件夹位置</span></span><br><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/a/,classpath:/b/,classpath:/static/</span></span><br><span class="line"><span class="comment">### 2.1. 自定义webjars路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.webjars-path-pattern</span>=<span class="string">/wj/**</span></span><br><span class="line"><span class="comment">### 2.2. 静态资源访问路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br></pre></td></tr></table></figure>

<h3 id="代码方式静态资源自定义配置"><a href="#代码方式静态资源自定义配置" class="headerlink" title="代码方式静态资源自定义配置"></a>代码方式静态资源自定义配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//保留以前规则</span></span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己写新的规则。</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>,<span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自己的规则，保留<code>/static/下</code>访问，同时支持自定义下<code>/a</code>、<code>/b</code>的访问，浏览器直接输入文件名，或者<code>static/3.jpg</code></p>
</blockquote>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/14/37416_image-20231214203646707.png" alt="image-20231214203646707"></p>
<h4 id="为什么容器中放一个WebMvcConfigurer就能配置底层行为"><a href="#为什么容器中放一个WebMvcConfigurer就能配置底层行为" class="headerlink" title="为什么容器中放一个WebMvcConfigurer就能配置底层行为"></a>为什么容器中放一个WebMvcConfigurer就能配置底层行为</h4><ol>
<li>WebMvcAutoConfiguration 是一个自动配置类，它里面有一个 <code>EnableWebMvcConfiguration</code></li>
<li><code>EnableWebMvcConfiguration</code>继承与 <code>DelegatingWebMvcConfiguration</code>，这两个都生效</li>
<li><code>DelegatingWebMvcConfiguration</code>利用 DI 把容器中 所有 <code>WebMvcConfigurer </code>注入进来</li>
<li>别人调用 <code>DelegatingWebMvcConfiguration</code> 的方法配置底层规则，而它调用所有 <code>WebMvcConfigurer</code>的配置底层方法。</li>
</ol>
<h2 id="PathPatternParser风格路径"><a href="#PathPatternParser风格路径" class="headerlink" title="PathPatternParser风格路径"></a>PathPatternParser风格路径</h2><ul>
<li><p>默认使用新版 <code>PathPatternParser</code>进行路径匹配<em>，</em>不能匹配 <code>**</code> 在中间的情况，剩下的和 <code>antPathMatcher</code>语法兼容</p>
</li>
<li><p>中间有<code>**</code> ，报错，<code>Fix this pattern in your application or switch to the legacy parser implementation with &#39;spring.mvc.pathmatch.matching-strategy=ant_path_matcher&#39;.</code></p>
<blockquote>
<p>spring.mvc.pathmatch.matching-strategy&#x3D;ant_path_matcher</p>
</blockquote>
</li>
</ul>
<h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/14/85200_image-1702559859264-1.png" alt="image" style="zoom: 80%;" />

<p>  1.1. 基于请求头内容协商：<strong>（默认开启）</strong><br>    1.1.1. 客户端向服务端发送请求，携带HTTP标准的Accept请求头。<br>      1.1.1.1. Accept: application&#x2F;json、text&#x2F;xml、text&#x2F;yaml<br>      1.1.1.2. 服务端根据客户端请求头期望的数据类型进行动态返回<br>  1.2. 基于请求参数内容协商：<strong>（需要开启）</strong><br>    1.2.1. 发送请求 GET &#x2F;projects&#x2F;spring-boot?<code>format=json</code><br>    1.2.2. 匹配到 @GetMapping(“&#x2F;projects&#x2F;spring-boot”)<br>    1.2.3. 根据参数协商，优先返回 json 类型数据【需要开启参数匹配设置】<br>    1.2.4. 发送请求 GET &#x2F;projects&#x2F;spring-boot?format&#x3D;xml,优先返回 xml 类型数据</p>
<ol>
<li><p>引入支持写出xml内容依赖</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标注注解</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JacksonXmlRootElement</span>  <span class="comment">// 可以写出为xml文档</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>开启基于请求参数的内容协商</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启基于请求参数的内容协商功能。 默认参数名：format</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定内容协商时使用的参数名。默认是 format</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/14/16124_image-20231214214334717.png" alt="image-20231214214334717"></p>
<h3 id="自定义内容返回"><a href="#自定义内容返回" class="headerlink" title="自定义内容返回"></a>自定义内容返回</h3><p><code>@ResponseBody</code>由<code>HttpMessageConverter</code>处理</p>
<ol>
<li><p>如果controller方法的返回值标注了 <code>@ResponseBody </code>注解</p>
</li>
<li><ol>
<li>请求进来先来到<code>DispatcherServlet</code>的<code>doDispatch()</code>进行处理</li>
<li>找到一个 <code>HandlerAdapter </code>适配器。利用适配器执行目标方法</li>
<li><code>RequestMappingHandlerAdapter</code>来执行，调用<code>invokeHandlerMethod（）</code>来执行目标方法</li>
<li>目标方法执行之前，准备好两个东西</li>
</ol>
</li>
<li><ol>
<li><ol>
<li><code>HandlerMethodArgumentResolver</code>：参数解析器，确定目标方法每个参数值</li>
<li><code>HandlerMethodReturnValueHandler</code>：返回值处理器，确定目标方法的返回值改怎么处理</li>
</ol>
</li>
</ol>
</li>
<li><ol>
<li><code>RequestMappingHandlerAdapter</code> 里面的<code>invokeAndHandle()</code>真正执行目标方法</li>
<li>目标方法执行完成，会返回<strong>返回值对象</strong></li>
<li><strong>找到一个合适的返回值处理器</strong> <code>HandlerMethodReturnValueHandler</code></li>
<li>最终找到 <code>RequestResponseBodyMethodProcessor</code>能处理 标注了 <code>@ResponseBody</code>注解的方法</li>
<li><code>RequestResponseBodyMethodProcessor</code> 调用<code>writeWithMessageConverters </code>,利用<code>MessageConverter</code>把返回值写出去</li>
</ol>
</li>
</ol>
<h3 id="使用yaml返回"><a href="#使用yaml返回" class="headerlink" title="使用yaml返回"></a>使用yaml返回</h3><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把对象写出成YAML（<strong>展示，可忽略</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setId(<span class="number">1L</span>);</span><br><span class="line">        person.setUserName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        person.setEmail(<span class="string">&quot;aaa@qq.com&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">18</span>);</span><br><span class="line"><span class="comment">//        不写yaml文件开头</span></span><br><span class="line">        <span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>编写配置，新增一种内容形式</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增一种媒体类型</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br></pre></td></tr></table></figure>

<p>增加<code>HttpMessageConverter</code>组件，专门负责把对象写出为yaml格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">                <span class="comment">//自己写新的规则。</span></span><br><span class="line">                registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                        .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>, <span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                        .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span><span class="comment">//配置一个能把对象转为yaml的messageConverter</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">                <span class="comment">//这里是springboot默认配置的，如果不加@Bean注解，会报错。</span></span><br><span class="line">                converters.add(<span class="keyword">new</span> <span class="title class_">MyYamlHttpMessageConverter</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyYamlHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title class_">AbstractHttpMessageConverter</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//把对象转成yaml</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyYamlHttpMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//告诉SpringBoot这个MessageConverter支持哪种媒体类型  //媒体类型</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">MediaType</span>(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;yaml&quot;</span>, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line">        <span class="built_in">this</span>.mapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">//只要是对象类型，不是基本类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">readInternal</span><span class="params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//@ResponseBody 把对象怎么写出去</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">writeInternal</span><span class="params">(Object methodReturnValue, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class="line">        <span class="comment">//try-with写法，自动关流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">body</span> <span class="operator">=</span> outputMessage.getBody()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.mapper.writeValue(body, methodReturnValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>配置媒体类型支持: </p>
</li>
<li><ul>
<li><code>spring.mvc.contentnegotiation.media-types.yaml=text/yaml</code></li>
</ul>
</li>
<li><p>编写对应的<code>HttpMessageConverter</code>，要告诉Boot这个支持的媒体类型</p>
</li>
<li><ul>
<li>按照<code>MyYamlHttpMessageConverter</code>的示例</li>
</ul>
</li>
<li><p>把MessageConverter组件加入到底层</p>
</li>
<li><ul>
<li>容器中放一个<code>WebMvcConfigurer</code> 组件，并配置底层的<code>MessageConverter</code></li>
</ul>
</li>
</ul>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/1613913/1681354523290-b89d7e0d-b9aa-40f5-8d22-d3d09d02b136.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_5bCa56GF6LC3IGF0Z3VpZ3UuY29t,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<h3 id="thymeleaf初试"><a href="#thymeleaf初试" class="headerlink" title="thymeleaf初试"></a>thymeleaf初试</h3><p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WelcomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;well&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String name, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>welcome.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>span 标签的作用是用于显示文本内容，并可以通过 th:text 指令将变量的值替换为文本内容。</p>
</blockquote>
<h3 id="thymeleaf基础语法"><a href="#thymeleaf基础语法" class="headerlink" title="thymeleaf基础语法"></a>thymeleaf基础语法</h3><ol>
<li><code>th:xxx</code>：动态渲染指定的 html 标签属性值、或者th指令（遍历、判断等）</li>
</ol>
<p>● th:text：将一切内容都识别为纯文本，不会对 HTML 标签进行解析。<br>  ○ th:utext：会对 HTML 标签进行解析，并将其生效。。<br>● th:属性：标签指定属性渲染<br>● th:attr：标签任意属性渲染<br>● th:ifth:each…：其他th指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/18/27187_image-20231218105441046.png" alt="image-20231218105441046"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:任意html属性</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;imgUrl&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;4.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;imgUrl&quot;</span>,<span class="string">&quot;static/3.jpg&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;width: 400px&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th：其他指令</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;imgUrl&#125;&quot;</span> <span class="attr">th:style</span>=<span class="string">&quot;$&#123;style&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;show&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;show&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h3 id="自动添加根路径"><a href="#自动添加根路径" class="headerlink" title="自动添加根路径"></a>自动添加根路径</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目的根路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/demo</span></span><br></pre></td></tr></table></figure>

<p>在浏览器输入url：<code>/demo/well</code>后，自动在路径下加载<code>/demo/static/3.jpg</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">2.jpg  @&#123;&#125; 专门用来取各种路径</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/3.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:300px;&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/3.jpg&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        List&lt;Person&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>, <span class="string">&quot;张三1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">15</span>, <span class="string">&quot;pm&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3L</span>, <span class="string">&quot;张三2&quot;</span>, <span class="string">&quot;zs2@qq.com&quot;</span>, <span class="number">16</span>, <span class="string">&quot;pm&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">4L</span>, <span class="string">&quot;张三333&quot;</span>, <span class="string">&quot;zs3@qq.com&quot;</span>, <span class="number">17</span>, <span class="string">&quot;pm&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">7L</span>, <span class="string">&quot;张三444&quot;</span>, <span class="string">&quot;zs4@qq.com&quot;</span>, <span class="number">18</span>, <span class="string">&quot;admin&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">8L</span>, <span class="string">&quot;张三5&quot;</span>, <span class="string">&quot;zs5@qq.com&quot;</span>, <span class="number">19</span>, <span class="string">&quot;hr&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        model.addAttribute(<span class="string">&quot;persons&quot;</span>,list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int i = 10/0;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>角色<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>状态信息<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;person,stats:$&#123;persons&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;person.email&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;person.age&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.role&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            index:[[$&#123;stats.index&#125;]]<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            count:[[$&#123;stats.count&#125;]]<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            size(总数量):[[$&#123;stats.size&#125;]]<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            current(当前对象): [[$&#123;stats.current&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            even(true)/odd(false): [[$&#123;stats.even&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            first: [[$&#123;stats.first&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            last: [[$&#123;stats.last&#125;]] <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/20/32173_image-20231220110146251.png" alt="image-20231220110146251" style="zoom: 67%;" />

<blockquote>
<p>可以在bootstrap上复制渲染的css，js链接，点击docss查找</p>
</blockquote>
<p><strong>iterStat 有以下属性：</strong></p>
<ul>
<li>index：当前遍历元素的索引，从0开始</li>
<li>count：当前遍历元素的索引，从1开始</li>
<li>size：需要遍历元素的总数量</li>
<li>current：当前正在遍历的元素对象</li>
<li>even&#x2F;odd：是否偶数&#x2F;奇数行</li>
<li>first：是否第一个元素</li>
<li>last：是否最后一个元素</li>
</ul>
<h4 id="th-switch"><a href="#th-switch" class="headerlink" title="th:switch"></a>th:switch</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;person.role&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;pm&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>项目经理<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;hr&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>人事<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="th-if"><a href="#th-if" class="headerlink" title="th:if"></a>th:if</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#strings.isEmpty(person.email)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;联系不上&#x27;&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(person.email)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.email&#125;&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h4><ul>
<li>片段</li>
<li>遍历</li>
<li>判断</li>
</ul>
<h4 id="对象选择"><a href="#对象选择" class="headerlink" title="对象选择"></a>对象选择</h4><p>用<code>*</code>选择遍历的对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;person,stats:$&#123;persons&#125;&quot;</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;person&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td th:text=&quot;$&#123;person.userName&#125;&quot;&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要在遍历那里加入 <code>th:object=&quot;$&#123;person&#125;</code>，然后用<code>*</code>代替：<code>th:text=&quot;*&#123;userName&#125;&quot;</code></p>
<h3 id="模板布局"><a href="#模板布局" class="headerlink" title="模板布局"></a>模板布局</h3><ul>
<li>定义模板： <code>th:fragment</code></li>
</ul>
<p><strong>commom.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取的判断，名字叫 myheader--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:fragment</span>=<span class="string">&quot;myheader&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p-3 text-bg-dark&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>引用模板：<code>~&#123;templatename::selector&#125;</code></li>
</ul>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导航  使用公共部分进行替换--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  ~&#123; 模板名 :: 片段名&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;common::myheader&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="热启动"><a href="#热启动" class="headerlink" title="热启动"></a>热启动</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--热启动功能 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>Spring Boot 在类路径根下查找<code>messages</code>资源绑定文件。文件名为：<code>messages.properties</code></p>
<p>多语言可以定义多个消息文件，命名为messages_区域代码.properties。如：</p>
<ul>
<li>messages.properties：默认</li>
<li>messages_zh_CN.properties：中文环境</li>
<li>messages_en_US.properties：英语环境</li>
</ul>
<p>在程序中可以自动注入 MessageSource组件，获取国际化的配置项值</p>
<p>在页面中可以使用表达式  <code>#&#123;&#125;</code>获取国际化的配置项值</p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/25/99634_image-20231225111916158.png" alt="image-20231225111916158"></p>
<p><strong>message.properties</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/25/54508_image-20231225111952638.png" alt="image-20231225111952638"></p>
<p><strong>messages_zh_CN.properties</strong></p>
<p><img src="https://gitee.com/hollis7/pictures/raw/master/2023/12/25/39480_image-20231225112104173.png" alt="image-20231225112104173"></p>
<p><strong>common.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--国际化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-light me-2&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;sign&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><img src="https://cdn.nlark.com/yuque/0/2023/svg/1613913/1681723795095-828d2034-1e6c-4d98-8e47-573dd6b5463b.svg" alt="未命名绘图.svg" style="zoom:67%;" />

<h3 id="默认机制"><a href="#默认机制" class="headerlink" title="默认机制"></a>默认机制</h3><p><strong>错误处理的自动配置</strong>都在<code>ErrorMvcAutoConfiguration</code>中，两大核心机制：</p>
<ul>
<li><ol>
<li>SpringBoot 会<strong>自适应****处理错误</strong>，<strong>响应页面</strong>或<strong>JSON数据</strong></li>
</ol>
</li>
<li><ol start="2">
<li><strong>SpringMVC的错误处理机制</strong>依然保留，<strong>MVC处理不了</strong>，才会<strong>交给boot进行处理</strong></li>
</ol>
</li>
<li><p>发生错误以后，转发给&#x2F;error路径，SpringBoot在底层写好一个 BasicErrorController的组件，专门处理这个请求</p>
</li>
<li><p>错误页面是这么解析到的</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、解析错误的自定义视图地址</span></span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="comment">//2、如果解析不到错误页面的地址，默认的错误页就是 error</span></span><br><span class="line"><span class="keyword">return</span> (modelAndView != <span class="literal">null</span>) ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br></pre></td></tr></table></figure>

<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol>
<li><p><strong>解析一个错误页</strong></p>
</li>
<li><p>a. 如果发生了500、404、503、403 这些错误</p>
</li>
<li><ol>
<li><ol>
<li>如果有<strong>模板引擎</strong>，默认在 <code>classpath:/templates/error/**精确码.html**</code></li>
<li>如果没有模板引擎，在静态资源文件夹下找  <code>**精确码.html**</code></li>
</ol>
</li>
</ol>
</li>
<li><p>b. 如果匹配不到<code>精确码.html</code>这些精确的错误页，就去找<code>5xx.html</code>，<code>4xx.html</code><strong>模糊匹配</strong></p>
</li>
<li><ol>
<li><ol>
<li>如果有模板引擎，默认在 <code>classpath:/templates/error/5xx.html</code></li>
<li>如果没有模板引擎，在静态资源文件夹下找  <code>5xx.html</code></li>
</ol>
</li>
</ol>
</li>
<li><p>如果模板引擎路径<code>templates</code>下有 <code>error.html</code>页面，就直接渲染</p>
</li>
</ol>
<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><ol>
<li><p><code>ServletWebServerFactoryAutoConfiguration</code> 自动配置了嵌入式容器场景</p>
</li>
<li><p>绑定了<code>ServerProperties</code>配置类，所有和服务器有关的配置 <code>server</code></p>
</li>
<li><p><code>ServletWebServerFactoryAutoConfiguration</code> 导入了 嵌入式的三大服务器 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code></p>
</li>
<li><ol>
<li>导入 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code> 都有条件注解。系统中有这个类才行（也就是导了包）</li>
<li>默认  <code>Tomcat</code>配置生效。给容器中放 TomcatServletWebServerFactory</li>
<li>都给容器中 <code>ServletWebServerFactory</code>放了一个 <strong>web服务器工厂（造web服务器的）</strong></li>
<li><strong>web服务器工厂 都有一个功能，</strong><code>getWebServer</code>获取web服务器</li>
<li>TomcatServletWebServerFactory 创建了 tomcat。</li>
</ol>
</li>
<li><p>ServletWebServerFactory 什么时候会创建 webServer出来。</p>
</li>
<li><p><code>ServletWebServerApplicationContext</code>ioc容器，启动的时候会调用创建web服务器</p>
</li>
<li><p>Spring<strong>容器刷新（启动）</strong>的时候，会预留一个时机，刷新子容器。<code>onRefresh()</code></p>
</li>
<li><p>refresh() 容器刷新 十二大步的刷新子容器会调用 <code>onRefresh()</code>；</p>
</li>
</ol>
<blockquote>
<p>Web场景的Spring容器启动，在onRefresh的时候，会调用创建web服务器的方法。</p>
<p>Web服务器的创建是通过WebServerFactory搞定的。容器中又会根据导了什么包条件注解，启动相关的 服务器配置，默认<code>EmbeddedTomcat</code>会给容器中放一个 <code>TomcatServletWebServerFactory</code>，导致项目启动，自动创建出Tomcat。</p>
</blockquote>
]]></content>
      <categories>
        <category>springboot3</category>
      </categories>
      <tags>
        <tag>springboot3</tag>
      </tags>
  </entry>
</search>
